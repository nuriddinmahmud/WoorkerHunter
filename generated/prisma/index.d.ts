
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Region
 * 
 */
export type Region = $Result.DefaultSelection<Prisma.$RegionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Brand
 * 
 */
export type Brand = $Result.DefaultSelection<Prisma.$BrandPayload>
/**
 * Model Size
 * 
 */
export type Size = $Result.DefaultSelection<Prisma.$SizePayload>
/**
 * Model Power
 * 
 */
export type Power = $Result.DefaultSelection<Prisma.$PowerPayload>
/**
 * Model Tool
 * 
 */
export type Tool = $Result.DefaultSelection<Prisma.$ToolPayload>
/**
 * Model Master
 * 
 */
export type Master = $Result.DefaultSelection<Prisma.$MasterPayload>
/**
 * Model MasterProfession
 * 
 */
export type MasterProfession = $Result.DefaultSelection<Prisma.$MasterProfessionPayload>
/**
 * Model Level
 * 
 */
export type Level = $Result.DefaultSelection<Prisma.$LevelPayload>
/**
 * Model Profession
 * 
 */
export type Profession = $Result.DefaultSelection<Prisma.$ProfessionPayload>
/**
 * Model ProfessionLevel
 * 
 */
export type ProfessionLevel = $Result.DefaultSelection<Prisma.$ProfessionLevelPayload>
/**
 * Model ProfessionTool
 * 
 */
export type ProfessionTool = $Result.DefaultSelection<Prisma.$ProfessionToolPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model OrderProduct
 * 
 */
export type OrderProduct = $Result.DefaultSelection<Prisma.$OrderProductPayload>
/**
 * Model OrderMaster
 * 
 */
export type OrderMaster = $Result.DefaultSelection<Prisma.$OrderMasterPayload>
/**
 * Model Basket
 * 
 */
export type Basket = $Result.DefaultSelection<Prisma.$BasketPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model MasterRatings
 * 
 */
export type MasterRatings = $Result.DefaultSelection<Prisma.$MasterRatingsPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model FAQ
 * 
 */
export type FAQ = $Result.DefaultSelection<Prisma.$FAQPayload>
/**
 * Model Showcase
 * 
 */
export type Showcase = $Result.DefaultSelection<Prisma.$ShowcasePayload>
/**
 * Model Partner
 * 
 */
export type Partner = $Result.DefaultSelection<Prisma.$PartnerPayload>
/**
 * Model SiteMetadata
 * 
 */
export type SiteMetadata = $Result.DefaultSelection<Prisma.$SiteMetadataPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN',
  VIEWER_ADMIN: 'VIEWER_ADMIN',
  USER_FIZ: 'USER_FIZ',
  USER_YUR: 'USER_YUR'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const UserStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  BANNED: 'BANNED'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const PaymentType: {
  CASH: 'CASH',
  CLICK: 'CLICK',
  PAYME: 'PAYME'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]


export const OrderStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  REJECTED: 'REJECTED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]


export const TimeUnit: {
  HOURLY: 'HOURLY',
  DAILY: 'DAILY'
};

export type TimeUnit = (typeof TimeUnit)[keyof typeof TimeUnit]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

export type PaymentType = $Enums.PaymentType

export const PaymentType: typeof $Enums.PaymentType

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

export type TimeUnit = $Enums.TimeUnit

export const TimeUnit: typeof $Enums.TimeUnit

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Regions
 * const regions = await prisma.region.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Regions
   * const regions = await prisma.region.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.region`: Exposes CRUD operations for the **Region** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Regions
    * const regions = await prisma.region.findMany()
    * ```
    */
  get region(): Prisma.RegionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.brand`: Exposes CRUD operations for the **Brand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brand.findMany()
    * ```
    */
  get brand(): Prisma.BrandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.size`: Exposes CRUD operations for the **Size** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sizes
    * const sizes = await prisma.size.findMany()
    * ```
    */
  get size(): Prisma.SizeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.power`: Exposes CRUD operations for the **Power** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Powers
    * const powers = await prisma.power.findMany()
    * ```
    */
  get power(): Prisma.PowerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tool`: Exposes CRUD operations for the **Tool** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tools
    * const tools = await prisma.tool.findMany()
    * ```
    */
  get tool(): Prisma.ToolDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.master`: Exposes CRUD operations for the **Master** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Masters
    * const masters = await prisma.master.findMany()
    * ```
    */
  get master(): Prisma.MasterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.masterProfession`: Exposes CRUD operations for the **MasterProfession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MasterProfessions
    * const masterProfessions = await prisma.masterProfession.findMany()
    * ```
    */
  get masterProfession(): Prisma.MasterProfessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.level`: Exposes CRUD operations for the **Level** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Levels
    * const levels = await prisma.level.findMany()
    * ```
    */
  get level(): Prisma.LevelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profession`: Exposes CRUD operations for the **Profession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professions
    * const professions = await prisma.profession.findMany()
    * ```
    */
  get profession(): Prisma.ProfessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.professionLevel`: Exposes CRUD operations for the **ProfessionLevel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfessionLevels
    * const professionLevels = await prisma.professionLevel.findMany()
    * ```
    */
  get professionLevel(): Prisma.ProfessionLevelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.professionTool`: Exposes CRUD operations for the **ProfessionTool** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfessionTools
    * const professionTools = await prisma.professionTool.findMany()
    * ```
    */
  get professionTool(): Prisma.ProfessionToolDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderProduct`: Exposes CRUD operations for the **OrderProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderProducts
    * const orderProducts = await prisma.orderProduct.findMany()
    * ```
    */
  get orderProduct(): Prisma.OrderProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderMaster`: Exposes CRUD operations for the **OrderMaster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderMasters
    * const orderMasters = await prisma.orderMaster.findMany()
    * ```
    */
  get orderMaster(): Prisma.OrderMasterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.basket`: Exposes CRUD operations for the **Basket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Baskets
    * const baskets = await prisma.basket.findMany()
    * ```
    */
  get basket(): Prisma.BasketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.masterRatings`: Exposes CRUD operations for the **MasterRatings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MasterRatings
    * const masterRatings = await prisma.masterRatings.findMany()
    * ```
    */
  get masterRatings(): Prisma.MasterRatingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fAQ`: Exposes CRUD operations for the **FAQ** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FAQS
    * const fAQS = await prisma.fAQ.findMany()
    * ```
    */
  get fAQ(): Prisma.FAQDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.showcase`: Exposes CRUD operations for the **Showcase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Showcases
    * const showcases = await prisma.showcase.findMany()
    * ```
    */
  get showcase(): Prisma.ShowcaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.partner`: Exposes CRUD operations for the **Partner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partners
    * const partners = await prisma.partner.findMany()
    * ```
    */
  get partner(): Prisma.PartnerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.siteMetadata`: Exposes CRUD operations for the **SiteMetadata** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SiteMetadata
    * const siteMetadata = await prisma.siteMetadata.findMany()
    * ```
    */
  get siteMetadata(): Prisma.SiteMetadataDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Region: 'Region',
    User: 'User',
    Company: 'Company',
    Session: 'Session',
    Brand: 'Brand',
    Size: 'Size',
    Power: 'Power',
    Tool: 'Tool',
    Master: 'Master',
    MasterProfession: 'MasterProfession',
    Level: 'Level',
    Profession: 'Profession',
    ProfessionLevel: 'ProfessionLevel',
    ProfessionTool: 'ProfessionTool',
    Order: 'Order',
    OrderProduct: 'OrderProduct',
    OrderMaster: 'OrderMaster',
    Basket: 'Basket',
    Comment: 'Comment',
    MasterRatings: 'MasterRatings',
    Contact: 'Contact',
    FAQ: 'FAQ',
    Showcase: 'Showcase',
    Partner: 'Partner',
    SiteMetadata: 'SiteMetadata'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "region" | "user" | "company" | "session" | "brand" | "size" | "power" | "tool" | "master" | "masterProfession" | "level" | "profession" | "professionLevel" | "professionTool" | "order" | "orderProduct" | "orderMaster" | "basket" | "comment" | "masterRatings" | "contact" | "fAQ" | "showcase" | "partner" | "siteMetadata"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Region: {
        payload: Prisma.$RegionPayload<ExtArgs>
        fields: Prisma.RegionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findFirst: {
            args: Prisma.RegionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findMany: {
            args: Prisma.RegionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          create: {
            args: Prisma.RegionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          createMany: {
            args: Prisma.RegionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          delete: {
            args: Prisma.RegionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          update: {
            args: Prisma.RegionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          deleteMany: {
            args: Prisma.RegionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RegionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          upsert: {
            args: Prisma.RegionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          aggregate: {
            args: Prisma.RegionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegion>
          }
          groupBy: {
            args: Prisma.RegionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegionCountArgs<ExtArgs>
            result: $Utils.Optional<RegionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Brand: {
        payload: Prisma.$BrandPayload<ExtArgs>
        fields: Prisma.BrandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findFirst: {
            args: Prisma.BrandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findMany: {
            args: Prisma.BrandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          create: {
            args: Prisma.BrandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          createMany: {
            args: Prisma.BrandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BrandCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          delete: {
            args: Prisma.BrandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          update: {
            args: Prisma.BrandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          deleteMany: {
            args: Prisma.BrandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BrandUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          upsert: {
            args: Prisma.BrandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          aggregate: {
            args: Prisma.BrandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrand>
          }
          groupBy: {
            args: Prisma.BrandGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrandGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrandCountArgs<ExtArgs>
            result: $Utils.Optional<BrandCountAggregateOutputType> | number
          }
        }
      }
      Size: {
        payload: Prisma.$SizePayload<ExtArgs>
        fields: Prisma.SizeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SizeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SizeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          findFirst: {
            args: Prisma.SizeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SizeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          findMany: {
            args: Prisma.SizeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>[]
          }
          create: {
            args: Prisma.SizeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          createMany: {
            args: Prisma.SizeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SizeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>[]
          }
          delete: {
            args: Prisma.SizeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          update: {
            args: Prisma.SizeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          deleteMany: {
            args: Prisma.SizeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SizeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SizeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>[]
          }
          upsert: {
            args: Prisma.SizeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          aggregate: {
            args: Prisma.SizeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSize>
          }
          groupBy: {
            args: Prisma.SizeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SizeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SizeCountArgs<ExtArgs>
            result: $Utils.Optional<SizeCountAggregateOutputType> | number
          }
        }
      }
      Power: {
        payload: Prisma.$PowerPayload<ExtArgs>
        fields: Prisma.PowerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PowerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PowerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          findFirst: {
            args: Prisma.PowerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PowerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          findMany: {
            args: Prisma.PowerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>[]
          }
          create: {
            args: Prisma.PowerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          createMany: {
            args: Prisma.PowerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PowerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>[]
          }
          delete: {
            args: Prisma.PowerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          update: {
            args: Prisma.PowerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          deleteMany: {
            args: Prisma.PowerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PowerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PowerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>[]
          }
          upsert: {
            args: Prisma.PowerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          aggregate: {
            args: Prisma.PowerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePower>
          }
          groupBy: {
            args: Prisma.PowerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PowerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PowerCountArgs<ExtArgs>
            result: $Utils.Optional<PowerCountAggregateOutputType> | number
          }
        }
      }
      Tool: {
        payload: Prisma.$ToolPayload<ExtArgs>
        fields: Prisma.ToolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ToolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ToolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          findFirst: {
            args: Prisma.ToolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ToolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          findMany: {
            args: Prisma.ToolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>[]
          }
          create: {
            args: Prisma.ToolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          createMany: {
            args: Prisma.ToolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ToolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>[]
          }
          delete: {
            args: Prisma.ToolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          update: {
            args: Prisma.ToolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          deleteMany: {
            args: Prisma.ToolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ToolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ToolUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>[]
          }
          upsert: {
            args: Prisma.ToolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          aggregate: {
            args: Prisma.ToolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTool>
          }
          groupBy: {
            args: Prisma.ToolGroupByArgs<ExtArgs>
            result: $Utils.Optional<ToolGroupByOutputType>[]
          }
          count: {
            args: Prisma.ToolCountArgs<ExtArgs>
            result: $Utils.Optional<ToolCountAggregateOutputType> | number
          }
        }
      }
      Master: {
        payload: Prisma.$MasterPayload<ExtArgs>
        fields: Prisma.MasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          findFirst: {
            args: Prisma.MasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          findMany: {
            args: Prisma.MasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>[]
          }
          create: {
            args: Prisma.MasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          createMany: {
            args: Prisma.MasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MasterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>[]
          }
          delete: {
            args: Prisma.MasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          update: {
            args: Prisma.MasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          deleteMany: {
            args: Prisma.MasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MasterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>[]
          }
          upsert: {
            args: Prisma.MasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          aggregate: {
            args: Prisma.MasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaster>
          }
          groupBy: {
            args: Prisma.MasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterCountArgs<ExtArgs>
            result: $Utils.Optional<MasterCountAggregateOutputType> | number
          }
        }
      }
      MasterProfession: {
        payload: Prisma.$MasterProfessionPayload<ExtArgs>
        fields: Prisma.MasterProfessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterProfessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProfessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterProfessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProfessionPayload>
          }
          findFirst: {
            args: Prisma.MasterProfessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProfessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterProfessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProfessionPayload>
          }
          findMany: {
            args: Prisma.MasterProfessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProfessionPayload>[]
          }
          create: {
            args: Prisma.MasterProfessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProfessionPayload>
          }
          createMany: {
            args: Prisma.MasterProfessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MasterProfessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProfessionPayload>[]
          }
          delete: {
            args: Prisma.MasterProfessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProfessionPayload>
          }
          update: {
            args: Prisma.MasterProfessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProfessionPayload>
          }
          deleteMany: {
            args: Prisma.MasterProfessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterProfessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MasterProfessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProfessionPayload>[]
          }
          upsert: {
            args: Prisma.MasterProfessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProfessionPayload>
          }
          aggregate: {
            args: Prisma.MasterProfessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMasterProfession>
          }
          groupBy: {
            args: Prisma.MasterProfessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterProfessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterProfessionCountArgs<ExtArgs>
            result: $Utils.Optional<MasterProfessionCountAggregateOutputType> | number
          }
        }
      }
      Level: {
        payload: Prisma.$LevelPayload<ExtArgs>
        fields: Prisma.LevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LevelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LevelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          findFirst: {
            args: Prisma.LevelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LevelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          findMany: {
            args: Prisma.LevelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>[]
          }
          create: {
            args: Prisma.LevelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          createMany: {
            args: Prisma.LevelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LevelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>[]
          }
          delete: {
            args: Prisma.LevelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          update: {
            args: Prisma.LevelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          deleteMany: {
            args: Prisma.LevelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LevelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LevelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>[]
          }
          upsert: {
            args: Prisma.LevelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          aggregate: {
            args: Prisma.LevelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLevel>
          }
          groupBy: {
            args: Prisma.LevelGroupByArgs<ExtArgs>
            result: $Utils.Optional<LevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.LevelCountArgs<ExtArgs>
            result: $Utils.Optional<LevelCountAggregateOutputType> | number
          }
        }
      }
      Profession: {
        payload: Prisma.$ProfessionPayload<ExtArgs>
        fields: Prisma.ProfessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          findFirst: {
            args: Prisma.ProfessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          findMany: {
            args: Prisma.ProfessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>[]
          }
          create: {
            args: Prisma.ProfessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          createMany: {
            args: Prisma.ProfessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>[]
          }
          delete: {
            args: Prisma.ProfessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          update: {
            args: Prisma.ProfessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          deleteMany: {
            args: Prisma.ProfessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>[]
          }
          upsert: {
            args: Prisma.ProfessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          aggregate: {
            args: Prisma.ProfessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfession>
          }
          groupBy: {
            args: Prisma.ProfessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessionCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessionCountAggregateOutputType> | number
          }
        }
      }
      ProfessionLevel: {
        payload: Prisma.$ProfessionLevelPayload<ExtArgs>
        fields: Prisma.ProfessionLevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessionLevelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionLevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessionLevelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionLevelPayload>
          }
          findFirst: {
            args: Prisma.ProfessionLevelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionLevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessionLevelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionLevelPayload>
          }
          findMany: {
            args: Prisma.ProfessionLevelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionLevelPayload>[]
          }
          create: {
            args: Prisma.ProfessionLevelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionLevelPayload>
          }
          createMany: {
            args: Prisma.ProfessionLevelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessionLevelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionLevelPayload>[]
          }
          delete: {
            args: Prisma.ProfessionLevelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionLevelPayload>
          }
          update: {
            args: Prisma.ProfessionLevelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionLevelPayload>
          }
          deleteMany: {
            args: Prisma.ProfessionLevelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessionLevelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfessionLevelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionLevelPayload>[]
          }
          upsert: {
            args: Prisma.ProfessionLevelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionLevelPayload>
          }
          aggregate: {
            args: Prisma.ProfessionLevelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessionLevel>
          }
          groupBy: {
            args: Prisma.ProfessionLevelGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessionLevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessionLevelCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessionLevelCountAggregateOutputType> | number
          }
        }
      }
      ProfessionTool: {
        payload: Prisma.$ProfessionToolPayload<ExtArgs>
        fields: Prisma.ProfessionToolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessionToolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionToolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessionToolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionToolPayload>
          }
          findFirst: {
            args: Prisma.ProfessionToolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionToolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessionToolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionToolPayload>
          }
          findMany: {
            args: Prisma.ProfessionToolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionToolPayload>[]
          }
          create: {
            args: Prisma.ProfessionToolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionToolPayload>
          }
          createMany: {
            args: Prisma.ProfessionToolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessionToolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionToolPayload>[]
          }
          delete: {
            args: Prisma.ProfessionToolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionToolPayload>
          }
          update: {
            args: Prisma.ProfessionToolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionToolPayload>
          }
          deleteMany: {
            args: Prisma.ProfessionToolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessionToolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfessionToolUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionToolPayload>[]
          }
          upsert: {
            args: Prisma.ProfessionToolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionToolPayload>
          }
          aggregate: {
            args: Prisma.ProfessionToolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessionTool>
          }
          groupBy: {
            args: Prisma.ProfessionToolGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessionToolGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessionToolCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessionToolCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      OrderProduct: {
        payload: Prisma.$OrderProductPayload<ExtArgs>
        fields: Prisma.OrderProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>
          }
          findFirst: {
            args: Prisma.OrderProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>
          }
          findMany: {
            args: Prisma.OrderProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>[]
          }
          create: {
            args: Prisma.OrderProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>
          }
          createMany: {
            args: Prisma.OrderProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>[]
          }
          delete: {
            args: Prisma.OrderProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>
          }
          update: {
            args: Prisma.OrderProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>
          }
          deleteMany: {
            args: Prisma.OrderProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>[]
          }
          upsert: {
            args: Prisma.OrderProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>
          }
          aggregate: {
            args: Prisma.OrderProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderProduct>
          }
          groupBy: {
            args: Prisma.OrderProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderProductCountArgs<ExtArgs>
            result: $Utils.Optional<OrderProductCountAggregateOutputType> | number
          }
        }
      }
      OrderMaster: {
        payload: Prisma.$OrderMasterPayload<ExtArgs>
        fields: Prisma.OrderMasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderMasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderMasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMasterPayload>
          }
          findFirst: {
            args: Prisma.OrderMasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderMasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMasterPayload>
          }
          findMany: {
            args: Prisma.OrderMasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMasterPayload>[]
          }
          create: {
            args: Prisma.OrderMasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMasterPayload>
          }
          createMany: {
            args: Prisma.OrderMasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderMasterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMasterPayload>[]
          }
          delete: {
            args: Prisma.OrderMasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMasterPayload>
          }
          update: {
            args: Prisma.OrderMasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMasterPayload>
          }
          deleteMany: {
            args: Prisma.OrderMasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderMasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderMasterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMasterPayload>[]
          }
          upsert: {
            args: Prisma.OrderMasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMasterPayload>
          }
          aggregate: {
            args: Prisma.OrderMasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderMaster>
          }
          groupBy: {
            args: Prisma.OrderMasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderMasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderMasterCountArgs<ExtArgs>
            result: $Utils.Optional<OrderMasterCountAggregateOutputType> | number
          }
        }
      }
      Basket: {
        payload: Prisma.$BasketPayload<ExtArgs>
        fields: Prisma.BasketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BasketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BasketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          findFirst: {
            args: Prisma.BasketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BasketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          findMany: {
            args: Prisma.BasketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>[]
          }
          create: {
            args: Prisma.BasketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          createMany: {
            args: Prisma.BasketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BasketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>[]
          }
          delete: {
            args: Prisma.BasketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          update: {
            args: Prisma.BasketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          deleteMany: {
            args: Prisma.BasketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BasketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BasketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>[]
          }
          upsert: {
            args: Prisma.BasketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          aggregate: {
            args: Prisma.BasketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBasket>
          }
          groupBy: {
            args: Prisma.BasketGroupByArgs<ExtArgs>
            result: $Utils.Optional<BasketGroupByOutputType>[]
          }
          count: {
            args: Prisma.BasketCountArgs<ExtArgs>
            result: $Utils.Optional<BasketCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      MasterRatings: {
        payload: Prisma.$MasterRatingsPayload<ExtArgs>
        fields: Prisma.MasterRatingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterRatingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterRatingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          findFirst: {
            args: Prisma.MasterRatingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterRatingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          findMany: {
            args: Prisma.MasterRatingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>[]
          }
          create: {
            args: Prisma.MasterRatingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          createMany: {
            args: Prisma.MasterRatingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MasterRatingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>[]
          }
          delete: {
            args: Prisma.MasterRatingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          update: {
            args: Prisma.MasterRatingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          deleteMany: {
            args: Prisma.MasterRatingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterRatingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MasterRatingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>[]
          }
          upsert: {
            args: Prisma.MasterRatingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          aggregate: {
            args: Prisma.MasterRatingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMasterRatings>
          }
          groupBy: {
            args: Prisma.MasterRatingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterRatingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterRatingsCountArgs<ExtArgs>
            result: $Utils.Optional<MasterRatingsCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      FAQ: {
        payload: Prisma.$FAQPayload<ExtArgs>
        fields: Prisma.FAQFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FAQFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FAQFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          findFirst: {
            args: Prisma.FAQFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FAQFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          findMany: {
            args: Prisma.FAQFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          create: {
            args: Prisma.FAQCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          createMany: {
            args: Prisma.FAQCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FAQCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          delete: {
            args: Prisma.FAQDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          update: {
            args: Prisma.FAQUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          deleteMany: {
            args: Prisma.FAQDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FAQUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FAQUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          upsert: {
            args: Prisma.FAQUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          aggregate: {
            args: Prisma.FAQAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFAQ>
          }
          groupBy: {
            args: Prisma.FAQGroupByArgs<ExtArgs>
            result: $Utils.Optional<FAQGroupByOutputType>[]
          }
          count: {
            args: Prisma.FAQCountArgs<ExtArgs>
            result: $Utils.Optional<FAQCountAggregateOutputType> | number
          }
        }
      }
      Showcase: {
        payload: Prisma.$ShowcasePayload<ExtArgs>
        fields: Prisma.ShowcaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShowcaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShowcaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>
          }
          findFirst: {
            args: Prisma.ShowcaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShowcaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>
          }
          findMany: {
            args: Prisma.ShowcaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>[]
          }
          create: {
            args: Prisma.ShowcaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>
          }
          createMany: {
            args: Prisma.ShowcaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShowcaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>[]
          }
          delete: {
            args: Prisma.ShowcaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>
          }
          update: {
            args: Prisma.ShowcaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>
          }
          deleteMany: {
            args: Prisma.ShowcaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShowcaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShowcaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>[]
          }
          upsert: {
            args: Prisma.ShowcaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowcasePayload>
          }
          aggregate: {
            args: Prisma.ShowcaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShowcase>
          }
          groupBy: {
            args: Prisma.ShowcaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShowcaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShowcaseCountArgs<ExtArgs>
            result: $Utils.Optional<ShowcaseCountAggregateOutputType> | number
          }
        }
      }
      Partner: {
        payload: Prisma.$PartnerPayload<ExtArgs>
        fields: Prisma.PartnerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartnerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartnerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          findFirst: {
            args: Prisma.PartnerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartnerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          findMany: {
            args: Prisma.PartnerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>[]
          }
          create: {
            args: Prisma.PartnerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          createMany: {
            args: Prisma.PartnerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartnerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>[]
          }
          delete: {
            args: Prisma.PartnerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          update: {
            args: Prisma.PartnerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          deleteMany: {
            args: Prisma.PartnerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartnerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PartnerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>[]
          }
          upsert: {
            args: Prisma.PartnerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          aggregate: {
            args: Prisma.PartnerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartner>
          }
          groupBy: {
            args: Prisma.PartnerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartnerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartnerCountArgs<ExtArgs>
            result: $Utils.Optional<PartnerCountAggregateOutputType> | number
          }
        }
      }
      SiteMetadata: {
        payload: Prisma.$SiteMetadataPayload<ExtArgs>
        fields: Prisma.SiteMetadataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SiteMetadataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteMetadataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SiteMetadataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteMetadataPayload>
          }
          findFirst: {
            args: Prisma.SiteMetadataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteMetadataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SiteMetadataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteMetadataPayload>
          }
          findMany: {
            args: Prisma.SiteMetadataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteMetadataPayload>[]
          }
          create: {
            args: Prisma.SiteMetadataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteMetadataPayload>
          }
          createMany: {
            args: Prisma.SiteMetadataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SiteMetadataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteMetadataPayload>[]
          }
          delete: {
            args: Prisma.SiteMetadataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteMetadataPayload>
          }
          update: {
            args: Prisma.SiteMetadataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteMetadataPayload>
          }
          deleteMany: {
            args: Prisma.SiteMetadataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SiteMetadataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SiteMetadataUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteMetadataPayload>[]
          }
          upsert: {
            args: Prisma.SiteMetadataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteMetadataPayload>
          }
          aggregate: {
            args: Prisma.SiteMetadataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSiteMetadata>
          }
          groupBy: {
            args: Prisma.SiteMetadataGroupByArgs<ExtArgs>
            result: $Utils.Optional<SiteMetadataGroupByOutputType>[]
          }
          count: {
            args: Prisma.SiteMetadataCountArgs<ExtArgs>
            result: $Utils.Optional<SiteMetadataCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    region?: RegionOmit
    user?: UserOmit
    company?: CompanyOmit
    session?: SessionOmit
    brand?: BrandOmit
    size?: SizeOmit
    power?: PowerOmit
    tool?: ToolOmit
    master?: MasterOmit
    masterProfession?: MasterProfessionOmit
    level?: LevelOmit
    profession?: ProfessionOmit
    professionLevel?: ProfessionLevelOmit
    professionTool?: ProfessionToolOmit
    order?: OrderOmit
    orderProduct?: OrderProductOmit
    orderMaster?: OrderMasterOmit
    basket?: BasketOmit
    comment?: CommentOmit
    masterRatings?: MasterRatingsOmit
    contact?: ContactOmit
    fAQ?: FAQOmit
    showcase?: ShowcaseOmit
    partner?: PartnerOmit
    siteMetadata?: SiteMetadataOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RegionCountOutputType
   */

  export type RegionCountOutputType = {
    users: number
  }

  export type RegionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RegionCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionCountOutputType
     */
    select?: RegionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    companies: number
    order: number
    contact: number
    basket: number
    comment: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    companies?: boolean | UserCountOutputTypeCountCompaniesArgs
    order?: boolean | UserCountOutputTypeCountOrderArgs
    contact?: boolean | UserCountOutputTypeCountContactArgs
    basket?: boolean | UserCountOutputTypeCountBasketArgs
    comment?: boolean | UserCountOutputTypeCountCommentArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBasketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type BrandCountOutputType
   */

  export type BrandCountOutputType = {
    tools: number
  }

  export type BrandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | BrandCountOutputTypeCountToolsArgs
  }

  // Custom InputTypes
  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandCountOutputType
     */
    select?: BrandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolWhereInput
  }


  /**
   * Count Type SizeCountOutputType
   */

  export type SizeCountOutputType = {
    tools: number
  }

  export type SizeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | SizeCountOutputTypeCountToolsArgs
  }

  // Custom InputTypes
  /**
   * SizeCountOutputType without action
   */
  export type SizeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeCountOutputType
     */
    select?: SizeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SizeCountOutputType without action
   */
  export type SizeCountOutputTypeCountToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolWhereInput
  }


  /**
   * Count Type PowerCountOutputType
   */

  export type PowerCountOutputType = {
    tools: number
  }

  export type PowerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | PowerCountOutputTypeCountToolsArgs
  }

  // Custom InputTypes
  /**
   * PowerCountOutputType without action
   */
  export type PowerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PowerCountOutputType
     */
    select?: PowerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PowerCountOutputType without action
   */
  export type PowerCountOutputTypeCountToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolWhereInput
  }


  /**
   * Count Type ToolCountOutputType
   */

  export type ToolCountOutputType = {
    professionTools: number
    orderProducts: number
    basket: number
  }

  export type ToolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professionTools?: boolean | ToolCountOutputTypeCountProfessionToolsArgs
    orderProducts?: boolean | ToolCountOutputTypeCountOrderProductsArgs
    basket?: boolean | ToolCountOutputTypeCountBasketArgs
  }

  // Custom InputTypes
  /**
   * ToolCountOutputType without action
   */
  export type ToolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToolCountOutputType
     */
    select?: ToolCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ToolCountOutputType without action
   */
  export type ToolCountOutputTypeCountProfessionToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionToolWhereInput
  }

  /**
   * ToolCountOutputType without action
   */
  export type ToolCountOutputTypeCountOrderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderProductWhereInput
  }

  /**
   * ToolCountOutputType without action
   */
  export type ToolCountOutputTypeCountBasketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
  }


  /**
   * Count Type MasterCountOutputType
   */

  export type MasterCountOutputType = {
    masterProfessions: number
    ordermasters: number
    masterRating: number
  }

  export type MasterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    masterProfessions?: boolean | MasterCountOutputTypeCountMasterProfessionsArgs
    ordermasters?: boolean | MasterCountOutputTypeCountOrdermastersArgs
    masterRating?: boolean | MasterCountOutputTypeCountMasterRatingArgs
  }

  // Custom InputTypes
  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterCountOutputType
     */
    select?: MasterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeCountMasterProfessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterProfessionWhereInput
  }

  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeCountOrdermastersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderMasterWhereInput
  }

  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeCountMasterRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterRatingsWhereInput
  }


  /**
   * Count Type LevelCountOutputType
   */

  export type LevelCountOutputType = {
    masterProfessions: number
    professionLevels: number
    orderProductLevel: number
    basket: number
  }

  export type LevelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    masterProfessions?: boolean | LevelCountOutputTypeCountMasterProfessionsArgs
    professionLevels?: boolean | LevelCountOutputTypeCountProfessionLevelsArgs
    orderProductLevel?: boolean | LevelCountOutputTypeCountOrderProductLevelArgs
    basket?: boolean | LevelCountOutputTypeCountBasketArgs
  }

  // Custom InputTypes
  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelCountOutputType
     */
    select?: LevelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountMasterProfessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterProfessionWhereInput
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountProfessionLevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionLevelWhereInput
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountOrderProductLevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderProductWhereInput
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountBasketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
  }


  /**
   * Count Type ProfessionCountOutputType
   */

  export type ProfessionCountOutputType = {
    masterProfessions: number
    professionLevels: number
    professionTools: number
    orderProducts: number
    basket: number
  }

  export type ProfessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    masterProfessions?: boolean | ProfessionCountOutputTypeCountMasterProfessionsArgs
    professionLevels?: boolean | ProfessionCountOutputTypeCountProfessionLevelsArgs
    professionTools?: boolean | ProfessionCountOutputTypeCountProfessionToolsArgs
    orderProducts?: boolean | ProfessionCountOutputTypeCountOrderProductsArgs
    basket?: boolean | ProfessionCountOutputTypeCountBasketArgs
  }

  // Custom InputTypes
  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionCountOutputType
     */
    select?: ProfessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeCountMasterProfessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterProfessionWhereInput
  }

  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeCountProfessionLevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionLevelWhereInput
  }

  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeCountProfessionToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionToolWhereInput
  }

  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeCountOrderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderProductWhereInput
  }

  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeCountBasketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    orderProducts: number
    comments: number
    masters: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderProducts?: boolean | OrderCountOutputTypeCountOrderProductsArgs
    comments?: boolean | OrderCountOutputTypeCountCommentsArgs
    masters?: boolean | OrderCountOutputTypeCountMastersArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderProductWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountMastersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderMasterWhereInput
  }


  /**
   * Count Type CommentCountOutputType
   */

  export type CommentCountOutputType = {
    MasterRatings: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MasterRatings?: boolean | CommentCountOutputTypeCountMasterRatingsArgs
  }

  // Custom InputTypes
  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountMasterRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterRatingsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Region
   */

  export type AggregateRegion = {
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  export type RegionMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RegionMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RegionCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRu: number
    nameEn: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RegionMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RegionMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RegionCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RegionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Region to aggregate.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Regions
    **/
    _count?: true | RegionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionMaxAggregateInputType
  }

  export type GetRegionAggregateType<T extends RegionAggregateArgs> = {
        [P in keyof T & keyof AggregateRegion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegion[P]>
      : GetScalarType<T[P], AggregateRegion[P]>
  }




  export type RegionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionWhereInput
    orderBy?: RegionOrderByWithAggregationInput | RegionOrderByWithAggregationInput[]
    by: RegionScalarFieldEnum[] | RegionScalarFieldEnum
    having?: RegionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionCountAggregateInputType | true
    _min?: RegionMinAggregateInputType
    _max?: RegionMaxAggregateInputType
  }

  export type RegionGroupByOutputType = {
    id: string
    nameUz: string
    nameRu: string | null
    nameEn: string | null
    createdAt: Date
    updatedAt: Date
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  type GetRegionGroupByPayload<T extends RegionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionGroupByOutputType[P]>
            : GetScalarType<T[P], RegionGroupByOutputType[P]>
        }
      >
    >


  export type RegionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Region$usersArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["region"]>

  export type RegionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["region"]>

  export type RegionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["region"]>

  export type RegionSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RegionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRu" | "nameEn" | "createdAt" | "updatedAt", ExtArgs["result"]["region"]>
  export type RegionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Region$usersArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RegionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RegionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RegionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Region"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRu: string | null
      nameEn: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["region"]>
    composites: {}
  }

  type RegionGetPayload<S extends boolean | null | undefined | RegionDefaultArgs> = $Result.GetResult<Prisma.$RegionPayload, S>

  type RegionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RegionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegionCountAggregateInputType | true
    }

  export interface RegionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Region'], meta: { name: 'Region' } }
    /**
     * Find zero or one Region that matches the filter.
     * @param {RegionFindUniqueArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegionFindUniqueArgs>(args: SelectSubset<T, RegionFindUniqueArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Region that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RegionFindUniqueOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegionFindUniqueOrThrowArgs>(args: SelectSubset<T, RegionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Region that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegionFindFirstArgs>(args?: SelectSubset<T, RegionFindFirstArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Region that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegionFindFirstOrThrowArgs>(args?: SelectSubset<T, RegionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Regions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Regions
     * const regions = await prisma.region.findMany()
     * 
     * // Get first 10 Regions
     * const regions = await prisma.region.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const regionWithIdOnly = await prisma.region.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegionFindManyArgs>(args?: SelectSubset<T, RegionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Region.
     * @param {RegionCreateArgs} args - Arguments to create a Region.
     * @example
     * // Create one Region
     * const Region = await prisma.region.create({
     *   data: {
     *     // ... data to create a Region
     *   }
     * })
     * 
     */
    create<T extends RegionCreateArgs>(args: SelectSubset<T, RegionCreateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Regions.
     * @param {RegionCreateManyArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegionCreateManyArgs>(args?: SelectSubset<T, RegionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Regions and returns the data saved in the database.
     * @param {RegionCreateManyAndReturnArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegionCreateManyAndReturnArgs>(args?: SelectSubset<T, RegionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Region.
     * @param {RegionDeleteArgs} args - Arguments to delete one Region.
     * @example
     * // Delete one Region
     * const Region = await prisma.region.delete({
     *   where: {
     *     // ... filter to delete one Region
     *   }
     * })
     * 
     */
    delete<T extends RegionDeleteArgs>(args: SelectSubset<T, RegionDeleteArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Region.
     * @param {RegionUpdateArgs} args - Arguments to update one Region.
     * @example
     * // Update one Region
     * const region = await prisma.region.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegionUpdateArgs>(args: SelectSubset<T, RegionUpdateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Regions.
     * @param {RegionDeleteManyArgs} args - Arguments to filter Regions to delete.
     * @example
     * // Delete a few Regions
     * const { count } = await prisma.region.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegionDeleteManyArgs>(args?: SelectSubset<T, RegionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegionUpdateManyArgs>(args: SelectSubset<T, RegionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions and returns the data updated in the database.
     * @param {RegionUpdateManyAndReturnArgs} args - Arguments to update many Regions.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RegionUpdateManyAndReturnArgs>(args: SelectSubset<T, RegionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Region.
     * @param {RegionUpsertArgs} args - Arguments to update or create a Region.
     * @example
     * // Update or create a Region
     * const region = await prisma.region.upsert({
     *   create: {
     *     // ... data to create a Region
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Region we want to update
     *   }
     * })
     */
    upsert<T extends RegionUpsertArgs>(args: SelectSubset<T, RegionUpsertArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionCountArgs} args - Arguments to filter Regions to count.
     * @example
     * // Count the number of Regions
     * const count = await prisma.region.count({
     *   where: {
     *     // ... the filter for the Regions we want to count
     *   }
     * })
    **/
    count<T extends RegionCountArgs>(
      args?: Subset<T, RegionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionAggregateArgs>(args: Subset<T, RegionAggregateArgs>): Prisma.PrismaPromise<GetRegionAggregateType<T>>

    /**
     * Group by Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionGroupByArgs['orderBy'] }
        : { orderBy?: RegionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Region model
   */
  readonly fields: RegionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Region.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Region$usersArgs<ExtArgs> = {}>(args?: Subset<T, Region$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Region model
   */
  interface RegionFieldRefs {
    readonly id: FieldRef<"Region", 'String'>
    readonly nameUz: FieldRef<"Region", 'String'>
    readonly nameRu: FieldRef<"Region", 'String'>
    readonly nameEn: FieldRef<"Region", 'String'>
    readonly createdAt: FieldRef<"Region", 'DateTime'>
    readonly updatedAt: FieldRef<"Region", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Region findUnique
   */
  export type RegionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findUniqueOrThrow
   */
  export type RegionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findFirst
   */
  export type RegionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findFirstOrThrow
   */
  export type RegionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findMany
   */
  export type RegionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Regions to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region create
   */
  export type RegionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to create a Region.
     */
    data: XOR<RegionCreateInput, RegionUncheckedCreateInput>
  }

  /**
   * Region createMany
   */
  export type RegionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region createManyAndReturn
   */
  export type RegionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region update
   */
  export type RegionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to update a Region.
     */
    data: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
    /**
     * Choose, which Region to update.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region updateMany
   */
  export type RegionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to update.
     */
    limit?: number
  }

  /**
   * Region updateManyAndReturn
   */
  export type RegionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to update.
     */
    limit?: number
  }

  /**
   * Region upsert
   */
  export type RegionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The filter to search for the Region to update in case it exists.
     */
    where: RegionWhereUniqueInput
    /**
     * In case the Region found by the `where` argument doesn't exist, create a new Region with this data.
     */
    create: XOR<RegionCreateInput, RegionUncheckedCreateInput>
    /**
     * In case the Region was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
  }

  /**
   * Region delete
   */
  export type RegionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter which Region to delete.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region deleteMany
   */
  export type RegionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Regions to delete
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to delete.
     */
    limit?: number
  }

  /**
   * Region.users
   */
  export type Region$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Region without action
   */
  export type RegionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    password: string | null
    regionId: string | null
    status: $Enums.UserStatus | null
    role: $Enums.UserRole | null
    refreshToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    password: string | null
    regionId: string | null
    status: $Enums.UserStatus | null
    role: $Enums.UserRole | null
    refreshToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    phoneNumber: number
    password: number
    regionId: number
    status: number
    role: number
    refreshToken: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    password?: true
    regionId?: true
    status?: true
    role?: true
    refreshToken?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    password?: true
    regionId?: true
    status?: true
    role?: true
    refreshToken?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    password?: true
    regionId?: true
    status?: true
    role?: true
    refreshToken?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    regionId: string | null
    status: $Enums.UserStatus
    role: $Enums.UserRole
    refreshToken: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    password?: boolean
    regionId?: boolean
    status?: boolean
    role?: boolean
    refreshToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean | User$regionArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    companies?: boolean | User$companiesArgs<ExtArgs>
    order?: boolean | User$orderArgs<ExtArgs>
    contact?: boolean | User$contactArgs<ExtArgs>
    basket?: boolean | User$basketArgs<ExtArgs>
    comment?: boolean | User$commentArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    password?: boolean
    regionId?: boolean
    status?: boolean
    role?: boolean
    refreshToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean | User$regionArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    password?: boolean
    regionId?: boolean
    status?: boolean
    role?: boolean
    refreshToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean | User$regionArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    password?: boolean
    regionId?: boolean
    status?: boolean
    role?: boolean
    refreshToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "phoneNumber" | "password" | "regionId" | "status" | "role" | "refreshToken" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | User$regionArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    companies?: boolean | User$companiesArgs<ExtArgs>
    order?: boolean | User$orderArgs<ExtArgs>
    contact?: boolean | User$contactArgs<ExtArgs>
    basket?: boolean | User$basketArgs<ExtArgs>
    comment?: boolean | User$commentArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | User$regionArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | User$regionArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      region: Prisma.$RegionPayload<ExtArgs> | null
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      companies: Prisma.$CompanyPayload<ExtArgs>[]
      order: Prisma.$OrderPayload<ExtArgs>[]
      contact: Prisma.$ContactPayload<ExtArgs>[]
      basket: Prisma.$BasketPayload<ExtArgs>[]
      comment: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      phoneNumber: string
      password: string
      regionId: string | null
      status: $Enums.UserStatus
      role: $Enums.UserRole
      refreshToken: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    region<T extends User$regionArgs<ExtArgs> = {}>(args?: Subset<T, User$regionArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    companies<T extends User$companiesArgs<ExtArgs> = {}>(args?: Subset<T, User$companiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    order<T extends User$orderArgs<ExtArgs> = {}>(args?: Subset<T, User$orderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contact<T extends User$contactArgs<ExtArgs> = {}>(args?: Subset<T, User$contactArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    basket<T extends User$basketArgs<ExtArgs> = {}>(args?: Subset<T, User$basketArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comment<T extends User$commentArgs<ExtArgs> = {}>(args?: Subset<T, User$commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly regionId: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'UserStatus'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly refreshToken: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.region
   */
  export type User$regionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    where?: RegionWhereInput
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.companies
   */
  export type User$companiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * User.order
   */
  export type User$orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User.contact
   */
  export type User$contactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * User.basket
   */
  export type User$basketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    cursor?: BasketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * User.comment
   */
  export type User$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    taxId: string | null
    bankCode: string | null
    bankAccount: string | null
    bankName: string | null
    oked: string | null
    address: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    taxId: string | null
    bankCode: string | null
    bankAccount: string | null
    bankName: string | null
    oked: string | null
    address: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRu: number
    nameEn: number
    taxId: number
    bankCode: number
    bankAccount: number
    bankName: number
    oked: number
    address: number
    ownerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    taxId?: true
    bankCode?: true
    bankAccount?: true
    bankName?: true
    oked?: true
    address?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    taxId?: true
    bankCode?: true
    bankAccount?: true
    bankName?: true
    oked?: true
    address?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    taxId?: true
    bankCode?: true
    bankAccount?: true
    bankName?: true
    oked?: true
    address?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: string
    nameUz: string
    nameRu: string | null
    nameEn: string | null
    taxId: string | null
    bankCode: string | null
    bankAccount: string | null
    bankName: string | null
    oked: string | null
    address: string | null
    ownerId: string
    createdAt: Date
    updatedAt: Date
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    taxId?: boolean
    bankCode?: boolean
    bankAccount?: boolean
    bankName?: boolean
    oked?: boolean
    address?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    taxId?: boolean
    bankCode?: boolean
    bankAccount?: boolean
    bankName?: boolean
    oked?: boolean
    address?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    taxId?: boolean
    bankCode?: boolean
    bankAccount?: boolean
    bankName?: boolean
    oked?: boolean
    address?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    taxId?: boolean
    bankCode?: boolean
    bankAccount?: boolean
    bankName?: boolean
    oked?: boolean
    address?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRu" | "nameEn" | "taxId" | "bankCode" | "bankAccount" | "bankName" | "oked" | "address" | "ownerId" | "createdAt" | "updatedAt", ExtArgs["result"]["company"]>
  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRu: string | null
      nameEn: string | null
      taxId: string | null
      bankCode: string | null
      bankAccount: string | null
      bankName: string | null
      oked: string | null
      address: string | null
      ownerId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies and returns the data updated in the database.
     * @param {CompanyUpdateManyAndReturnArgs} args - Arguments to update many Companies.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'String'>
    readonly nameUz: FieldRef<"Company", 'String'>
    readonly nameRu: FieldRef<"Company", 'String'>
    readonly nameEn: FieldRef<"Company", 'String'>
    readonly taxId: FieldRef<"Company", 'String'>
    readonly bankCode: FieldRef<"Company", 'String'>
    readonly bankAccount: FieldRef<"Company", 'String'>
    readonly bankName: FieldRef<"Company", 'String'>
    readonly oked: FieldRef<"Company", 'String'>
    readonly address: FieldRef<"Company", 'String'>
    readonly ownerId: FieldRef<"Company", 'String'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company updateManyAndReturn
   */
  export type CompanyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to delete.
     */
    limit?: number
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    ip: string | null
    userAgent: string | null
    device: string | null
    brand: string | null
    model: string | null
    os: string | null
    osVersion: string | null
    client: string | null
    clientType: string | null
    clientVersion: string | null
    isBot: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    ip: string | null
    userAgent: string | null
    device: string | null
    brand: string | null
    model: string | null
    os: string | null
    osVersion: string | null
    client: string | null
    clientType: string | null
    clientVersion: string | null
    isBot: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    ip: number
    userAgent: number
    device: number
    brand: number
    model: number
    os: number
    osVersion: number
    client: number
    clientType: number
    clientVersion: number
    isBot: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    ip?: true
    userAgent?: true
    device?: true
    brand?: true
    model?: true
    os?: true
    osVersion?: true
    client?: true
    clientType?: true
    clientVersion?: true
    isBot?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    ip?: true
    userAgent?: true
    device?: true
    brand?: true
    model?: true
    os?: true
    osVersion?: true
    client?: true
    clientType?: true
    clientVersion?: true
    isBot?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    ip?: true
    userAgent?: true
    device?: true
    brand?: true
    model?: true
    os?: true
    osVersion?: true
    client?: true
    clientType?: true
    clientVersion?: true
    isBot?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userId: string
    ip: string | null
    userAgent: string | null
    device: string | null
    brand: string | null
    model: string | null
    os: string | null
    osVersion: string | null
    client: string | null
    clientType: string | null
    clientVersion: string | null
    isBot: boolean | null
    createdAt: Date
    updatedAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ip?: boolean
    userAgent?: boolean
    device?: boolean
    brand?: boolean
    model?: boolean
    os?: boolean
    osVersion?: boolean
    client?: boolean
    clientType?: boolean
    clientVersion?: boolean
    isBot?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ip?: boolean
    userAgent?: boolean
    device?: boolean
    brand?: boolean
    model?: boolean
    os?: boolean
    osVersion?: boolean
    client?: boolean
    clientType?: boolean
    clientVersion?: boolean
    isBot?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ip?: boolean
    userAgent?: boolean
    device?: boolean
    brand?: boolean
    model?: boolean
    os?: boolean
    osVersion?: boolean
    client?: boolean
    clientType?: boolean
    clientVersion?: boolean
    isBot?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
    ip?: boolean
    userAgent?: boolean
    device?: boolean
    brand?: boolean
    model?: boolean
    os?: boolean
    osVersion?: boolean
    client?: boolean
    clientType?: boolean
    clientVersion?: boolean
    isBot?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "ip" | "userAgent" | "device" | "brand" | "model" | "os" | "osVersion" | "client" | "clientType" | "clientVersion" | "isBot" | "createdAt" | "updatedAt", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      ip: string | null
      userAgent: string | null
      device: string | null
      brand: string | null
      model: string | null
      os: string | null
      osVersion: string | null
      client: string | null
      clientType: string | null
      clientVersion: string | null
      isBot: boolean | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly ip: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly device: FieldRef<"Session", 'String'>
    readonly brand: FieldRef<"Session", 'String'>
    readonly model: FieldRef<"Session", 'String'>
    readonly os: FieldRef<"Session", 'String'>
    readonly osVersion: FieldRef<"Session", 'String'>
    readonly client: FieldRef<"Session", 'String'>
    readonly clientType: FieldRef<"Session", 'String'>
    readonly clientVersion: FieldRef<"Session", 'String'>
    readonly isBot: FieldRef<"Session", 'Boolean'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Brand
   */

  export type AggregateBrand = {
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  export type BrandMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BrandMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BrandCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRu: number
    nameEn: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BrandMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BrandMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BrandCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BrandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brand to aggregate.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brands
    **/
    _count?: true | BrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandMaxAggregateInputType
  }

  export type GetBrandAggregateType<T extends BrandAggregateArgs> = {
        [P in keyof T & keyof AggregateBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrand[P]>
      : GetScalarType<T[P], AggregateBrand[P]>
  }




  export type BrandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithAggregationInput | BrandOrderByWithAggregationInput[]
    by: BrandScalarFieldEnum[] | BrandScalarFieldEnum
    having?: BrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandCountAggregateInputType | true
    _min?: BrandMinAggregateInputType
    _max?: BrandMaxAggregateInputType
  }

  export type BrandGroupByOutputType = {
    id: string
    nameUz: string
    nameRu: string | null
    nameEn: string | null
    createdAt: Date
    updatedAt: Date
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  type GetBrandGroupByPayload<T extends BrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandGroupByOutputType[P]>
            : GetScalarType<T[P], BrandGroupByOutputType[P]>
        }
      >
    >


  export type BrandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tools?: boolean | Brand$toolsArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BrandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRu" | "nameEn" | "createdAt" | "updatedAt", ExtArgs["result"]["brand"]>
  export type BrandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | Brand$toolsArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BrandIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BrandIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BrandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Brand"
    objects: {
      tools: Prisma.$ToolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRu: string | null
      nameEn: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["brand"]>
    composites: {}
  }

  type BrandGetPayload<S extends boolean | null | undefined | BrandDefaultArgs> = $Result.GetResult<Prisma.$BrandPayload, S>

  type BrandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BrandCountAggregateInputType | true
    }

  export interface BrandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Brand'], meta: { name: 'Brand' } }
    /**
     * Find zero or one Brand that matches the filter.
     * @param {BrandFindUniqueArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrandFindUniqueArgs>(args: SelectSubset<T, BrandFindUniqueArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Brand that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BrandFindUniqueOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrandFindUniqueOrThrowArgs>(args: SelectSubset<T, BrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrandFindFirstArgs>(args?: SelectSubset<T, BrandFindFirstArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrandFindFirstOrThrowArgs>(args?: SelectSubset<T, BrandFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brand.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandWithIdOnly = await prisma.brand.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BrandFindManyArgs>(args?: SelectSubset<T, BrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Brand.
     * @param {BrandCreateArgs} args - Arguments to create a Brand.
     * @example
     * // Create one Brand
     * const Brand = await prisma.brand.create({
     *   data: {
     *     // ... data to create a Brand
     *   }
     * })
     * 
     */
    create<T extends BrandCreateArgs>(args: SelectSubset<T, BrandCreateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Brands.
     * @param {BrandCreateManyArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrandCreateManyArgs>(args?: SelectSubset<T, BrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Brands and returns the data saved in the database.
     * @param {BrandCreateManyAndReturnArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BrandCreateManyAndReturnArgs>(args?: SelectSubset<T, BrandCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Brand.
     * @param {BrandDeleteArgs} args - Arguments to delete one Brand.
     * @example
     * // Delete one Brand
     * const Brand = await prisma.brand.delete({
     *   where: {
     *     // ... filter to delete one Brand
     *   }
     * })
     * 
     */
    delete<T extends BrandDeleteArgs>(args: SelectSubset<T, BrandDeleteArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Brand.
     * @param {BrandUpdateArgs} args - Arguments to update one Brand.
     * @example
     * // Update one Brand
     * const brand = await prisma.brand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrandUpdateArgs>(args: SelectSubset<T, BrandUpdateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Brands.
     * @param {BrandDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrandDeleteManyArgs>(args?: SelectSubset<T, BrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrandUpdateManyArgs>(args: SelectSubset<T, BrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands and returns the data updated in the database.
     * @param {BrandUpdateManyAndReturnArgs} args - Arguments to update many Brands.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BrandUpdateManyAndReturnArgs>(args: SelectSubset<T, BrandUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Brand.
     * @param {BrandUpsertArgs} args - Arguments to update or create a Brand.
     * @example
     * // Update or create a Brand
     * const brand = await prisma.brand.upsert({
     *   create: {
     *     // ... data to create a Brand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brand we want to update
     *   }
     * })
     */
    upsert<T extends BrandUpsertArgs>(args: SelectSubset<T, BrandUpsertArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brand.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends BrandCountArgs>(
      args?: Subset<T, BrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandAggregateArgs>(args: Subset<T, BrandAggregateArgs>): Prisma.PrismaPromise<GetBrandAggregateType<T>>

    /**
     * Group by Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandGroupByArgs['orderBy'] }
        : { orderBy?: BrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Brand model
   */
  readonly fields: BrandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Brand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tools<T extends Brand$toolsArgs<ExtArgs> = {}>(args?: Subset<T, Brand$toolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Brand model
   */
  interface BrandFieldRefs {
    readonly id: FieldRef<"Brand", 'String'>
    readonly nameUz: FieldRef<"Brand", 'String'>
    readonly nameRu: FieldRef<"Brand", 'String'>
    readonly nameEn: FieldRef<"Brand", 'String'>
    readonly createdAt: FieldRef<"Brand", 'DateTime'>
    readonly updatedAt: FieldRef<"Brand", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Brand findUnique
   */
  export type BrandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findUniqueOrThrow
   */
  export type BrandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findFirst
   */
  export type BrandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findFirstOrThrow
   */
  export type BrandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findMany
   */
  export type BrandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brands to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand create
   */
  export type BrandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to create a Brand.
     */
    data: XOR<BrandCreateInput, BrandUncheckedCreateInput>
  }

  /**
   * Brand createMany
   */
  export type BrandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand createManyAndReturn
   */
  export type BrandCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand update
   */
  export type BrandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to update a Brand.
     */
    data: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
    /**
     * Choose, which Brand to update.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand updateMany
   */
  export type BrandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand updateManyAndReturn
   */
  export type BrandUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand upsert
   */
  export type BrandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The filter to search for the Brand to update in case it exists.
     */
    where: BrandWhereUniqueInput
    /**
     * In case the Brand found by the `where` argument doesn't exist, create a new Brand with this data.
     */
    create: XOR<BrandCreateInput, BrandUncheckedCreateInput>
    /**
     * In case the Brand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
  }

  /**
   * Brand delete
   */
  export type BrandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter which Brand to delete.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand deleteMany
   */
  export type BrandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brands to delete
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to delete.
     */
    limit?: number
  }

  /**
   * Brand.tools
   */
  export type Brand$toolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    where?: ToolWhereInput
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    cursor?: ToolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Brand without action
   */
  export type BrandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
  }


  /**
   * Model Size
   */

  export type AggregateSize = {
    _count: SizeCountAggregateOutputType | null
    _min: SizeMinAggregateOutputType | null
    _max: SizeMaxAggregateOutputType | null
  }

  export type SizeMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SizeMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SizeCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRu: number
    nameEn: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SizeMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SizeMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SizeCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SizeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Size to aggregate.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sizes
    **/
    _count?: true | SizeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SizeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SizeMaxAggregateInputType
  }

  export type GetSizeAggregateType<T extends SizeAggregateArgs> = {
        [P in keyof T & keyof AggregateSize]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSize[P]>
      : GetScalarType<T[P], AggregateSize[P]>
  }




  export type SizeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeWhereInput
    orderBy?: SizeOrderByWithAggregationInput | SizeOrderByWithAggregationInput[]
    by: SizeScalarFieldEnum[] | SizeScalarFieldEnum
    having?: SizeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SizeCountAggregateInputType | true
    _min?: SizeMinAggregateInputType
    _max?: SizeMaxAggregateInputType
  }

  export type SizeGroupByOutputType = {
    id: string
    nameUz: string
    nameRu: string | null
    nameEn: string | null
    createdAt: Date
    updatedAt: Date
    _count: SizeCountAggregateOutputType | null
    _min: SizeMinAggregateOutputType | null
    _max: SizeMaxAggregateOutputType | null
  }

  type GetSizeGroupByPayload<T extends SizeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SizeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SizeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SizeGroupByOutputType[P]>
            : GetScalarType<T[P], SizeGroupByOutputType[P]>
        }
      >
    >


  export type SizeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tools?: boolean | Size$toolsArgs<ExtArgs>
    _count?: boolean | SizeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["size"]>

  export type SizeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["size"]>

  export type SizeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["size"]>

  export type SizeSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SizeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRu" | "nameEn" | "createdAt" | "updatedAt", ExtArgs["result"]["size"]>
  export type SizeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | Size$toolsArgs<ExtArgs>
    _count?: boolean | SizeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SizeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SizeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SizePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Size"
    objects: {
      tools: Prisma.$ToolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRu: string | null
      nameEn: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["size"]>
    composites: {}
  }

  type SizeGetPayload<S extends boolean | null | undefined | SizeDefaultArgs> = $Result.GetResult<Prisma.$SizePayload, S>

  type SizeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SizeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SizeCountAggregateInputType | true
    }

  export interface SizeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Size'], meta: { name: 'Size' } }
    /**
     * Find zero or one Size that matches the filter.
     * @param {SizeFindUniqueArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SizeFindUniqueArgs>(args: SelectSubset<T, SizeFindUniqueArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Size that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SizeFindUniqueOrThrowArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SizeFindUniqueOrThrowArgs>(args: SelectSubset<T, SizeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Size that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeFindFirstArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SizeFindFirstArgs>(args?: SelectSubset<T, SizeFindFirstArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Size that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeFindFirstOrThrowArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SizeFindFirstOrThrowArgs>(args?: SelectSubset<T, SizeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sizes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sizes
     * const sizes = await prisma.size.findMany()
     * 
     * // Get first 10 Sizes
     * const sizes = await prisma.size.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sizeWithIdOnly = await prisma.size.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SizeFindManyArgs>(args?: SelectSubset<T, SizeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Size.
     * @param {SizeCreateArgs} args - Arguments to create a Size.
     * @example
     * // Create one Size
     * const Size = await prisma.size.create({
     *   data: {
     *     // ... data to create a Size
     *   }
     * })
     * 
     */
    create<T extends SizeCreateArgs>(args: SelectSubset<T, SizeCreateArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sizes.
     * @param {SizeCreateManyArgs} args - Arguments to create many Sizes.
     * @example
     * // Create many Sizes
     * const size = await prisma.size.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SizeCreateManyArgs>(args?: SelectSubset<T, SizeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sizes and returns the data saved in the database.
     * @param {SizeCreateManyAndReturnArgs} args - Arguments to create many Sizes.
     * @example
     * // Create many Sizes
     * const size = await prisma.size.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sizes and only return the `id`
     * const sizeWithIdOnly = await prisma.size.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SizeCreateManyAndReturnArgs>(args?: SelectSubset<T, SizeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Size.
     * @param {SizeDeleteArgs} args - Arguments to delete one Size.
     * @example
     * // Delete one Size
     * const Size = await prisma.size.delete({
     *   where: {
     *     // ... filter to delete one Size
     *   }
     * })
     * 
     */
    delete<T extends SizeDeleteArgs>(args: SelectSubset<T, SizeDeleteArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Size.
     * @param {SizeUpdateArgs} args - Arguments to update one Size.
     * @example
     * // Update one Size
     * const size = await prisma.size.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SizeUpdateArgs>(args: SelectSubset<T, SizeUpdateArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sizes.
     * @param {SizeDeleteManyArgs} args - Arguments to filter Sizes to delete.
     * @example
     * // Delete a few Sizes
     * const { count } = await prisma.size.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SizeDeleteManyArgs>(args?: SelectSubset<T, SizeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sizes
     * const size = await prisma.size.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SizeUpdateManyArgs>(args: SelectSubset<T, SizeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sizes and returns the data updated in the database.
     * @param {SizeUpdateManyAndReturnArgs} args - Arguments to update many Sizes.
     * @example
     * // Update many Sizes
     * const size = await prisma.size.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sizes and only return the `id`
     * const sizeWithIdOnly = await prisma.size.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SizeUpdateManyAndReturnArgs>(args: SelectSubset<T, SizeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Size.
     * @param {SizeUpsertArgs} args - Arguments to update or create a Size.
     * @example
     * // Update or create a Size
     * const size = await prisma.size.upsert({
     *   create: {
     *     // ... data to create a Size
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Size we want to update
     *   }
     * })
     */
    upsert<T extends SizeUpsertArgs>(args: SelectSubset<T, SizeUpsertArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeCountArgs} args - Arguments to filter Sizes to count.
     * @example
     * // Count the number of Sizes
     * const count = await prisma.size.count({
     *   where: {
     *     // ... the filter for the Sizes we want to count
     *   }
     * })
    **/
    count<T extends SizeCountArgs>(
      args?: Subset<T, SizeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SizeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Size.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SizeAggregateArgs>(args: Subset<T, SizeAggregateArgs>): Prisma.PrismaPromise<GetSizeAggregateType<T>>

    /**
     * Group by Size.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SizeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SizeGroupByArgs['orderBy'] }
        : { orderBy?: SizeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SizeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSizeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Size model
   */
  readonly fields: SizeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Size.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SizeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tools<T extends Size$toolsArgs<ExtArgs> = {}>(args?: Subset<T, Size$toolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Size model
   */
  interface SizeFieldRefs {
    readonly id: FieldRef<"Size", 'String'>
    readonly nameUz: FieldRef<"Size", 'String'>
    readonly nameRu: FieldRef<"Size", 'String'>
    readonly nameEn: FieldRef<"Size", 'String'>
    readonly createdAt: FieldRef<"Size", 'DateTime'>
    readonly updatedAt: FieldRef<"Size", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Size findUnique
   */
  export type SizeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size findUniqueOrThrow
   */
  export type SizeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size findFirst
   */
  export type SizeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sizes.
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sizes.
     */
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }

  /**
   * Size findFirstOrThrow
   */
  export type SizeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sizes.
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sizes.
     */
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }

  /**
   * Size findMany
   */
  export type SizeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Sizes to fetch.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sizes.
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }

  /**
   * Size create
   */
  export type SizeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * The data needed to create a Size.
     */
    data: XOR<SizeCreateInput, SizeUncheckedCreateInput>
  }

  /**
   * Size createMany
   */
  export type SizeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sizes.
     */
    data: SizeCreateManyInput | SizeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Size createManyAndReturn
   */
  export type SizeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * The data used to create many Sizes.
     */
    data: SizeCreateManyInput | SizeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Size update
   */
  export type SizeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * The data needed to update a Size.
     */
    data: XOR<SizeUpdateInput, SizeUncheckedUpdateInput>
    /**
     * Choose, which Size to update.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size updateMany
   */
  export type SizeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sizes.
     */
    data: XOR<SizeUpdateManyMutationInput, SizeUncheckedUpdateManyInput>
    /**
     * Filter which Sizes to update
     */
    where?: SizeWhereInput
    /**
     * Limit how many Sizes to update.
     */
    limit?: number
  }

  /**
   * Size updateManyAndReturn
   */
  export type SizeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * The data used to update Sizes.
     */
    data: XOR<SizeUpdateManyMutationInput, SizeUncheckedUpdateManyInput>
    /**
     * Filter which Sizes to update
     */
    where?: SizeWhereInput
    /**
     * Limit how many Sizes to update.
     */
    limit?: number
  }

  /**
   * Size upsert
   */
  export type SizeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * The filter to search for the Size to update in case it exists.
     */
    where: SizeWhereUniqueInput
    /**
     * In case the Size found by the `where` argument doesn't exist, create a new Size with this data.
     */
    create: XOR<SizeCreateInput, SizeUncheckedCreateInput>
    /**
     * In case the Size was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SizeUpdateInput, SizeUncheckedUpdateInput>
  }

  /**
   * Size delete
   */
  export type SizeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter which Size to delete.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size deleteMany
   */
  export type SizeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sizes to delete
     */
    where?: SizeWhereInput
    /**
     * Limit how many Sizes to delete.
     */
    limit?: number
  }

  /**
   * Size.tools
   */
  export type Size$toolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    where?: ToolWhereInput
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    cursor?: ToolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Size without action
   */
  export type SizeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
  }


  /**
   * Model Power
   */

  export type AggregatePower = {
    _count: PowerCountAggregateOutputType | null
    _min: PowerMinAggregateOutputType | null
    _max: PowerMaxAggregateOutputType | null
  }

  export type PowerMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PowerMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PowerCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRu: number
    nameEn: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PowerMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PowerMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PowerCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PowerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Power to aggregate.
     */
    where?: PowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Powers to fetch.
     */
    orderBy?: PowerOrderByWithRelationInput | PowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Powers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Powers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Powers
    **/
    _count?: true | PowerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PowerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PowerMaxAggregateInputType
  }

  export type GetPowerAggregateType<T extends PowerAggregateArgs> = {
        [P in keyof T & keyof AggregatePower]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePower[P]>
      : GetScalarType<T[P], AggregatePower[P]>
  }




  export type PowerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PowerWhereInput
    orderBy?: PowerOrderByWithAggregationInput | PowerOrderByWithAggregationInput[]
    by: PowerScalarFieldEnum[] | PowerScalarFieldEnum
    having?: PowerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PowerCountAggregateInputType | true
    _min?: PowerMinAggregateInputType
    _max?: PowerMaxAggregateInputType
  }

  export type PowerGroupByOutputType = {
    id: string
    nameUz: string
    nameRu: string | null
    nameEn: string | null
    createdAt: Date
    updatedAt: Date
    _count: PowerCountAggregateOutputType | null
    _min: PowerMinAggregateOutputType | null
    _max: PowerMaxAggregateOutputType | null
  }

  type GetPowerGroupByPayload<T extends PowerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PowerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PowerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PowerGroupByOutputType[P]>
            : GetScalarType<T[P], PowerGroupByOutputType[P]>
        }
      >
    >


  export type PowerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tools?: boolean | Power$toolsArgs<ExtArgs>
    _count?: boolean | PowerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["power"]>

  export type PowerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["power"]>

  export type PowerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["power"]>

  export type PowerSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PowerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRu" | "nameEn" | "createdAt" | "updatedAt", ExtArgs["result"]["power"]>
  export type PowerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | Power$toolsArgs<ExtArgs>
    _count?: boolean | PowerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PowerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PowerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PowerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Power"
    objects: {
      tools: Prisma.$ToolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRu: string | null
      nameEn: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["power"]>
    composites: {}
  }

  type PowerGetPayload<S extends boolean | null | undefined | PowerDefaultArgs> = $Result.GetResult<Prisma.$PowerPayload, S>

  type PowerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PowerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PowerCountAggregateInputType | true
    }

  export interface PowerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Power'], meta: { name: 'Power' } }
    /**
     * Find zero or one Power that matches the filter.
     * @param {PowerFindUniqueArgs} args - Arguments to find a Power
     * @example
     * // Get one Power
     * const power = await prisma.power.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PowerFindUniqueArgs>(args: SelectSubset<T, PowerFindUniqueArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Power that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PowerFindUniqueOrThrowArgs} args - Arguments to find a Power
     * @example
     * // Get one Power
     * const power = await prisma.power.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PowerFindUniqueOrThrowArgs>(args: SelectSubset<T, PowerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Power that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerFindFirstArgs} args - Arguments to find a Power
     * @example
     * // Get one Power
     * const power = await prisma.power.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PowerFindFirstArgs>(args?: SelectSubset<T, PowerFindFirstArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Power that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerFindFirstOrThrowArgs} args - Arguments to find a Power
     * @example
     * // Get one Power
     * const power = await prisma.power.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PowerFindFirstOrThrowArgs>(args?: SelectSubset<T, PowerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Powers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Powers
     * const powers = await prisma.power.findMany()
     * 
     * // Get first 10 Powers
     * const powers = await prisma.power.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const powerWithIdOnly = await prisma.power.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PowerFindManyArgs>(args?: SelectSubset<T, PowerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Power.
     * @param {PowerCreateArgs} args - Arguments to create a Power.
     * @example
     * // Create one Power
     * const Power = await prisma.power.create({
     *   data: {
     *     // ... data to create a Power
     *   }
     * })
     * 
     */
    create<T extends PowerCreateArgs>(args: SelectSubset<T, PowerCreateArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Powers.
     * @param {PowerCreateManyArgs} args - Arguments to create many Powers.
     * @example
     * // Create many Powers
     * const power = await prisma.power.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PowerCreateManyArgs>(args?: SelectSubset<T, PowerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Powers and returns the data saved in the database.
     * @param {PowerCreateManyAndReturnArgs} args - Arguments to create many Powers.
     * @example
     * // Create many Powers
     * const power = await prisma.power.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Powers and only return the `id`
     * const powerWithIdOnly = await prisma.power.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PowerCreateManyAndReturnArgs>(args?: SelectSubset<T, PowerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Power.
     * @param {PowerDeleteArgs} args - Arguments to delete one Power.
     * @example
     * // Delete one Power
     * const Power = await prisma.power.delete({
     *   where: {
     *     // ... filter to delete one Power
     *   }
     * })
     * 
     */
    delete<T extends PowerDeleteArgs>(args: SelectSubset<T, PowerDeleteArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Power.
     * @param {PowerUpdateArgs} args - Arguments to update one Power.
     * @example
     * // Update one Power
     * const power = await prisma.power.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PowerUpdateArgs>(args: SelectSubset<T, PowerUpdateArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Powers.
     * @param {PowerDeleteManyArgs} args - Arguments to filter Powers to delete.
     * @example
     * // Delete a few Powers
     * const { count } = await prisma.power.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PowerDeleteManyArgs>(args?: SelectSubset<T, PowerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Powers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Powers
     * const power = await prisma.power.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PowerUpdateManyArgs>(args: SelectSubset<T, PowerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Powers and returns the data updated in the database.
     * @param {PowerUpdateManyAndReturnArgs} args - Arguments to update many Powers.
     * @example
     * // Update many Powers
     * const power = await prisma.power.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Powers and only return the `id`
     * const powerWithIdOnly = await prisma.power.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PowerUpdateManyAndReturnArgs>(args: SelectSubset<T, PowerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Power.
     * @param {PowerUpsertArgs} args - Arguments to update or create a Power.
     * @example
     * // Update or create a Power
     * const power = await prisma.power.upsert({
     *   create: {
     *     // ... data to create a Power
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Power we want to update
     *   }
     * })
     */
    upsert<T extends PowerUpsertArgs>(args: SelectSubset<T, PowerUpsertArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Powers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerCountArgs} args - Arguments to filter Powers to count.
     * @example
     * // Count the number of Powers
     * const count = await prisma.power.count({
     *   where: {
     *     // ... the filter for the Powers we want to count
     *   }
     * })
    **/
    count<T extends PowerCountArgs>(
      args?: Subset<T, PowerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PowerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Power.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PowerAggregateArgs>(args: Subset<T, PowerAggregateArgs>): Prisma.PrismaPromise<GetPowerAggregateType<T>>

    /**
     * Group by Power.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PowerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PowerGroupByArgs['orderBy'] }
        : { orderBy?: PowerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PowerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPowerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Power model
   */
  readonly fields: PowerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Power.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PowerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tools<T extends Power$toolsArgs<ExtArgs> = {}>(args?: Subset<T, Power$toolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Power model
   */
  interface PowerFieldRefs {
    readonly id: FieldRef<"Power", 'String'>
    readonly nameUz: FieldRef<"Power", 'String'>
    readonly nameRu: FieldRef<"Power", 'String'>
    readonly nameEn: FieldRef<"Power", 'String'>
    readonly createdAt: FieldRef<"Power", 'DateTime'>
    readonly updatedAt: FieldRef<"Power", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Power findUnique
   */
  export type PowerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter, which Power to fetch.
     */
    where: PowerWhereUniqueInput
  }

  /**
   * Power findUniqueOrThrow
   */
  export type PowerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter, which Power to fetch.
     */
    where: PowerWhereUniqueInput
  }

  /**
   * Power findFirst
   */
  export type PowerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter, which Power to fetch.
     */
    where?: PowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Powers to fetch.
     */
    orderBy?: PowerOrderByWithRelationInput | PowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Powers.
     */
    cursor?: PowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Powers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Powers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Powers.
     */
    distinct?: PowerScalarFieldEnum | PowerScalarFieldEnum[]
  }

  /**
   * Power findFirstOrThrow
   */
  export type PowerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter, which Power to fetch.
     */
    where?: PowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Powers to fetch.
     */
    orderBy?: PowerOrderByWithRelationInput | PowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Powers.
     */
    cursor?: PowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Powers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Powers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Powers.
     */
    distinct?: PowerScalarFieldEnum | PowerScalarFieldEnum[]
  }

  /**
   * Power findMany
   */
  export type PowerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter, which Powers to fetch.
     */
    where?: PowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Powers to fetch.
     */
    orderBy?: PowerOrderByWithRelationInput | PowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Powers.
     */
    cursor?: PowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Powers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Powers.
     */
    skip?: number
    distinct?: PowerScalarFieldEnum | PowerScalarFieldEnum[]
  }

  /**
   * Power create
   */
  export type PowerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * The data needed to create a Power.
     */
    data: XOR<PowerCreateInput, PowerUncheckedCreateInput>
  }

  /**
   * Power createMany
   */
  export type PowerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Powers.
     */
    data: PowerCreateManyInput | PowerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Power createManyAndReturn
   */
  export type PowerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * The data used to create many Powers.
     */
    data: PowerCreateManyInput | PowerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Power update
   */
  export type PowerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * The data needed to update a Power.
     */
    data: XOR<PowerUpdateInput, PowerUncheckedUpdateInput>
    /**
     * Choose, which Power to update.
     */
    where: PowerWhereUniqueInput
  }

  /**
   * Power updateMany
   */
  export type PowerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Powers.
     */
    data: XOR<PowerUpdateManyMutationInput, PowerUncheckedUpdateManyInput>
    /**
     * Filter which Powers to update
     */
    where?: PowerWhereInput
    /**
     * Limit how many Powers to update.
     */
    limit?: number
  }

  /**
   * Power updateManyAndReturn
   */
  export type PowerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * The data used to update Powers.
     */
    data: XOR<PowerUpdateManyMutationInput, PowerUncheckedUpdateManyInput>
    /**
     * Filter which Powers to update
     */
    where?: PowerWhereInput
    /**
     * Limit how many Powers to update.
     */
    limit?: number
  }

  /**
   * Power upsert
   */
  export type PowerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * The filter to search for the Power to update in case it exists.
     */
    where: PowerWhereUniqueInput
    /**
     * In case the Power found by the `where` argument doesn't exist, create a new Power with this data.
     */
    create: XOR<PowerCreateInput, PowerUncheckedCreateInput>
    /**
     * In case the Power was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PowerUpdateInput, PowerUncheckedUpdateInput>
  }

  /**
   * Power delete
   */
  export type PowerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter which Power to delete.
     */
    where: PowerWhereUniqueInput
  }

  /**
   * Power deleteMany
   */
  export type PowerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Powers to delete
     */
    where?: PowerWhereInput
    /**
     * Limit how many Powers to delete.
     */
    limit?: number
  }

  /**
   * Power.tools
   */
  export type Power$toolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    where?: ToolWhereInput
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    cursor?: ToolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Power without action
   */
  export type PowerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
  }


  /**
   * Model Tool
   */

  export type AggregateTool = {
    _count: ToolCountAggregateOutputType | null
    _avg: ToolAvgAggregateOutputType | null
    _sum: ToolSumAggregateOutputType | null
    _min: ToolMinAggregateOutputType | null
    _max: ToolMaxAggregateOutputType | null
  }

  export type ToolAvgAggregateOutputType = {
    price: Decimal | null
    quantity: number | null
  }

  export type ToolSumAggregateOutputType = {
    price: Decimal | null
    quantity: number | null
  }

  export type ToolMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    descriptionUz: string | null
    descriptionRu: string | null
    descriptionEn: string | null
    price: Decimal | null
    quantity: number | null
    code: string | null
    brandId: string | null
    powerId: string | null
    sizeId: string | null
    img: string | null
    isAvailable: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ToolMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    descriptionUz: string | null
    descriptionRu: string | null
    descriptionEn: string | null
    price: Decimal | null
    quantity: number | null
    code: string | null
    brandId: string | null
    powerId: string | null
    sizeId: string | null
    img: string | null
    isAvailable: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ToolCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRu: number
    nameEn: number
    descriptionUz: number
    descriptionRu: number
    descriptionEn: number
    price: number
    quantity: number
    code: number
    brandId: number
    powerId: number
    sizeId: number
    img: number
    isAvailable: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ToolAvgAggregateInputType = {
    price?: true
    quantity?: true
  }

  export type ToolSumAggregateInputType = {
    price?: true
    quantity?: true
  }

  export type ToolMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    descriptionUz?: true
    descriptionRu?: true
    descriptionEn?: true
    price?: true
    quantity?: true
    code?: true
    brandId?: true
    powerId?: true
    sizeId?: true
    img?: true
    isAvailable?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ToolMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    descriptionUz?: true
    descriptionRu?: true
    descriptionEn?: true
    price?: true
    quantity?: true
    code?: true
    brandId?: true
    powerId?: true
    sizeId?: true
    img?: true
    isAvailable?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ToolCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    descriptionUz?: true
    descriptionRu?: true
    descriptionEn?: true
    price?: true
    quantity?: true
    code?: true
    brandId?: true
    powerId?: true
    sizeId?: true
    img?: true
    isAvailable?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ToolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tool to aggregate.
     */
    where?: ToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tools
    **/
    _count?: true | ToolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ToolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ToolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ToolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ToolMaxAggregateInputType
  }

  export type GetToolAggregateType<T extends ToolAggregateArgs> = {
        [P in keyof T & keyof AggregateTool]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTool[P]>
      : GetScalarType<T[P], AggregateTool[P]>
  }




  export type ToolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolWhereInput
    orderBy?: ToolOrderByWithAggregationInput | ToolOrderByWithAggregationInput[]
    by: ToolScalarFieldEnum[] | ToolScalarFieldEnum
    having?: ToolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ToolCountAggregateInputType | true
    _avg?: ToolAvgAggregateInputType
    _sum?: ToolSumAggregateInputType
    _min?: ToolMinAggregateInputType
    _max?: ToolMaxAggregateInputType
  }

  export type ToolGroupByOutputType = {
    id: string
    nameUz: string
    nameRu: string | null
    nameEn: string | null
    descriptionUz: string
    descriptionRu: string | null
    descriptionEn: string | null
    price: Decimal
    quantity: number
    code: string
    brandId: string | null
    powerId: string | null
    sizeId: string | null
    img: string
    isAvailable: boolean
    createdAt: Date
    updatedAt: Date
    _count: ToolCountAggregateOutputType | null
    _avg: ToolAvgAggregateOutputType | null
    _sum: ToolSumAggregateOutputType | null
    _min: ToolMinAggregateOutputType | null
    _max: ToolMaxAggregateOutputType | null
  }

  type GetToolGroupByPayload<T extends ToolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ToolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ToolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ToolGroupByOutputType[P]>
            : GetScalarType<T[P], ToolGroupByOutputType[P]>
        }
      >
    >


  export type ToolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    descriptionUz?: boolean
    descriptionRu?: boolean
    descriptionEn?: boolean
    price?: boolean
    quantity?: boolean
    code?: boolean
    brandId?: boolean
    powerId?: boolean
    sizeId?: boolean
    img?: boolean
    isAvailable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | Tool$brandArgs<ExtArgs>
    power?: boolean | Tool$powerArgs<ExtArgs>
    size?: boolean | Tool$sizeArgs<ExtArgs>
    professionTools?: boolean | Tool$professionToolsArgs<ExtArgs>
    orderProducts?: boolean | Tool$orderProductsArgs<ExtArgs>
    basket?: boolean | Tool$basketArgs<ExtArgs>
    _count?: boolean | ToolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tool"]>

  export type ToolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    descriptionUz?: boolean
    descriptionRu?: boolean
    descriptionEn?: boolean
    price?: boolean
    quantity?: boolean
    code?: boolean
    brandId?: boolean
    powerId?: boolean
    sizeId?: boolean
    img?: boolean
    isAvailable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | Tool$brandArgs<ExtArgs>
    power?: boolean | Tool$powerArgs<ExtArgs>
    size?: boolean | Tool$sizeArgs<ExtArgs>
  }, ExtArgs["result"]["tool"]>

  export type ToolSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    descriptionUz?: boolean
    descriptionRu?: boolean
    descriptionEn?: boolean
    price?: boolean
    quantity?: boolean
    code?: boolean
    brandId?: boolean
    powerId?: boolean
    sizeId?: boolean
    img?: boolean
    isAvailable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | Tool$brandArgs<ExtArgs>
    power?: boolean | Tool$powerArgs<ExtArgs>
    size?: boolean | Tool$sizeArgs<ExtArgs>
  }, ExtArgs["result"]["tool"]>

  export type ToolSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    descriptionUz?: boolean
    descriptionRu?: boolean
    descriptionEn?: boolean
    price?: boolean
    quantity?: boolean
    code?: boolean
    brandId?: boolean
    powerId?: boolean
    sizeId?: boolean
    img?: boolean
    isAvailable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ToolOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRu" | "nameEn" | "descriptionUz" | "descriptionRu" | "descriptionEn" | "price" | "quantity" | "code" | "brandId" | "powerId" | "sizeId" | "img" | "isAvailable" | "createdAt" | "updatedAt", ExtArgs["result"]["tool"]>
  export type ToolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | Tool$brandArgs<ExtArgs>
    power?: boolean | Tool$powerArgs<ExtArgs>
    size?: boolean | Tool$sizeArgs<ExtArgs>
    professionTools?: boolean | Tool$professionToolsArgs<ExtArgs>
    orderProducts?: boolean | Tool$orderProductsArgs<ExtArgs>
    basket?: boolean | Tool$basketArgs<ExtArgs>
    _count?: boolean | ToolCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ToolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | Tool$brandArgs<ExtArgs>
    power?: boolean | Tool$powerArgs<ExtArgs>
    size?: boolean | Tool$sizeArgs<ExtArgs>
  }
  export type ToolIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | Tool$brandArgs<ExtArgs>
    power?: boolean | Tool$powerArgs<ExtArgs>
    size?: boolean | Tool$sizeArgs<ExtArgs>
  }

  export type $ToolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tool"
    objects: {
      brand: Prisma.$BrandPayload<ExtArgs> | null
      power: Prisma.$PowerPayload<ExtArgs> | null
      size: Prisma.$SizePayload<ExtArgs> | null
      professionTools: Prisma.$ProfessionToolPayload<ExtArgs>[]
      orderProducts: Prisma.$OrderProductPayload<ExtArgs>[]
      basket: Prisma.$BasketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRu: string | null
      nameEn: string | null
      descriptionUz: string
      descriptionRu: string | null
      descriptionEn: string | null
      price: Prisma.Decimal
      quantity: number
      code: string
      brandId: string | null
      powerId: string | null
      sizeId: string | null
      img: string
      isAvailable: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tool"]>
    composites: {}
  }

  type ToolGetPayload<S extends boolean | null | undefined | ToolDefaultArgs> = $Result.GetResult<Prisma.$ToolPayload, S>

  type ToolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ToolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ToolCountAggregateInputType | true
    }

  export interface ToolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tool'], meta: { name: 'Tool' } }
    /**
     * Find zero or one Tool that matches the filter.
     * @param {ToolFindUniqueArgs} args - Arguments to find a Tool
     * @example
     * // Get one Tool
     * const tool = await prisma.tool.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ToolFindUniqueArgs>(args: SelectSubset<T, ToolFindUniqueArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tool that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ToolFindUniqueOrThrowArgs} args - Arguments to find a Tool
     * @example
     * // Get one Tool
     * const tool = await prisma.tool.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ToolFindUniqueOrThrowArgs>(args: SelectSubset<T, ToolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tool that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolFindFirstArgs} args - Arguments to find a Tool
     * @example
     * // Get one Tool
     * const tool = await prisma.tool.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ToolFindFirstArgs>(args?: SelectSubset<T, ToolFindFirstArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tool that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolFindFirstOrThrowArgs} args - Arguments to find a Tool
     * @example
     * // Get one Tool
     * const tool = await prisma.tool.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ToolFindFirstOrThrowArgs>(args?: SelectSubset<T, ToolFindFirstOrThrowArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tools
     * const tools = await prisma.tool.findMany()
     * 
     * // Get first 10 Tools
     * const tools = await prisma.tool.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const toolWithIdOnly = await prisma.tool.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ToolFindManyArgs>(args?: SelectSubset<T, ToolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tool.
     * @param {ToolCreateArgs} args - Arguments to create a Tool.
     * @example
     * // Create one Tool
     * const Tool = await prisma.tool.create({
     *   data: {
     *     // ... data to create a Tool
     *   }
     * })
     * 
     */
    create<T extends ToolCreateArgs>(args: SelectSubset<T, ToolCreateArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tools.
     * @param {ToolCreateManyArgs} args - Arguments to create many Tools.
     * @example
     * // Create many Tools
     * const tool = await prisma.tool.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ToolCreateManyArgs>(args?: SelectSubset<T, ToolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tools and returns the data saved in the database.
     * @param {ToolCreateManyAndReturnArgs} args - Arguments to create many Tools.
     * @example
     * // Create many Tools
     * const tool = await prisma.tool.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tools and only return the `id`
     * const toolWithIdOnly = await prisma.tool.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ToolCreateManyAndReturnArgs>(args?: SelectSubset<T, ToolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tool.
     * @param {ToolDeleteArgs} args - Arguments to delete one Tool.
     * @example
     * // Delete one Tool
     * const Tool = await prisma.tool.delete({
     *   where: {
     *     // ... filter to delete one Tool
     *   }
     * })
     * 
     */
    delete<T extends ToolDeleteArgs>(args: SelectSubset<T, ToolDeleteArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tool.
     * @param {ToolUpdateArgs} args - Arguments to update one Tool.
     * @example
     * // Update one Tool
     * const tool = await prisma.tool.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ToolUpdateArgs>(args: SelectSubset<T, ToolUpdateArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tools.
     * @param {ToolDeleteManyArgs} args - Arguments to filter Tools to delete.
     * @example
     * // Delete a few Tools
     * const { count } = await prisma.tool.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ToolDeleteManyArgs>(args?: SelectSubset<T, ToolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tools
     * const tool = await prisma.tool.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ToolUpdateManyArgs>(args: SelectSubset<T, ToolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tools and returns the data updated in the database.
     * @param {ToolUpdateManyAndReturnArgs} args - Arguments to update many Tools.
     * @example
     * // Update many Tools
     * const tool = await prisma.tool.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tools and only return the `id`
     * const toolWithIdOnly = await prisma.tool.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ToolUpdateManyAndReturnArgs>(args: SelectSubset<T, ToolUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tool.
     * @param {ToolUpsertArgs} args - Arguments to update or create a Tool.
     * @example
     * // Update or create a Tool
     * const tool = await prisma.tool.upsert({
     *   create: {
     *     // ... data to create a Tool
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tool we want to update
     *   }
     * })
     */
    upsert<T extends ToolUpsertArgs>(args: SelectSubset<T, ToolUpsertArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolCountArgs} args - Arguments to filter Tools to count.
     * @example
     * // Count the number of Tools
     * const count = await prisma.tool.count({
     *   where: {
     *     // ... the filter for the Tools we want to count
     *   }
     * })
    **/
    count<T extends ToolCountArgs>(
      args?: Subset<T, ToolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ToolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tool.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ToolAggregateArgs>(args: Subset<T, ToolAggregateArgs>): Prisma.PrismaPromise<GetToolAggregateType<T>>

    /**
     * Group by Tool.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ToolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ToolGroupByArgs['orderBy'] }
        : { orderBy?: ToolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ToolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetToolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tool model
   */
  readonly fields: ToolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tool.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ToolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brand<T extends Tool$brandArgs<ExtArgs> = {}>(args?: Subset<T, Tool$brandArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    power<T extends Tool$powerArgs<ExtArgs> = {}>(args?: Subset<T, Tool$powerArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    size<T extends Tool$sizeArgs<ExtArgs> = {}>(args?: Subset<T, Tool$sizeArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    professionTools<T extends Tool$professionToolsArgs<ExtArgs> = {}>(args?: Subset<T, Tool$professionToolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orderProducts<T extends Tool$orderProductsArgs<ExtArgs> = {}>(args?: Subset<T, Tool$orderProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    basket<T extends Tool$basketArgs<ExtArgs> = {}>(args?: Subset<T, Tool$basketArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tool model
   */
  interface ToolFieldRefs {
    readonly id: FieldRef<"Tool", 'String'>
    readonly nameUz: FieldRef<"Tool", 'String'>
    readonly nameRu: FieldRef<"Tool", 'String'>
    readonly nameEn: FieldRef<"Tool", 'String'>
    readonly descriptionUz: FieldRef<"Tool", 'String'>
    readonly descriptionRu: FieldRef<"Tool", 'String'>
    readonly descriptionEn: FieldRef<"Tool", 'String'>
    readonly price: FieldRef<"Tool", 'Decimal'>
    readonly quantity: FieldRef<"Tool", 'Int'>
    readonly code: FieldRef<"Tool", 'String'>
    readonly brandId: FieldRef<"Tool", 'String'>
    readonly powerId: FieldRef<"Tool", 'String'>
    readonly sizeId: FieldRef<"Tool", 'String'>
    readonly img: FieldRef<"Tool", 'String'>
    readonly isAvailable: FieldRef<"Tool", 'Boolean'>
    readonly createdAt: FieldRef<"Tool", 'DateTime'>
    readonly updatedAt: FieldRef<"Tool", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tool findUnique
   */
  export type ToolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter, which Tool to fetch.
     */
    where: ToolWhereUniqueInput
  }

  /**
   * Tool findUniqueOrThrow
   */
  export type ToolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter, which Tool to fetch.
     */
    where: ToolWhereUniqueInput
  }

  /**
   * Tool findFirst
   */
  export type ToolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter, which Tool to fetch.
     */
    where?: ToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tools.
     */
    cursor?: ToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tools.
     */
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Tool findFirstOrThrow
   */
  export type ToolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter, which Tool to fetch.
     */
    where?: ToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tools.
     */
    cursor?: ToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tools.
     */
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Tool findMany
   */
  export type ToolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter, which Tools to fetch.
     */
    where?: ToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tools.
     */
    cursor?: ToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Tool create
   */
  export type ToolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * The data needed to create a Tool.
     */
    data: XOR<ToolCreateInput, ToolUncheckedCreateInput>
  }

  /**
   * Tool createMany
   */
  export type ToolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tools.
     */
    data: ToolCreateManyInput | ToolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tool createManyAndReturn
   */
  export type ToolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * The data used to create many Tools.
     */
    data: ToolCreateManyInput | ToolCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tool update
   */
  export type ToolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * The data needed to update a Tool.
     */
    data: XOR<ToolUpdateInput, ToolUncheckedUpdateInput>
    /**
     * Choose, which Tool to update.
     */
    where: ToolWhereUniqueInput
  }

  /**
   * Tool updateMany
   */
  export type ToolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tools.
     */
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyInput>
    /**
     * Filter which Tools to update
     */
    where?: ToolWhereInput
    /**
     * Limit how many Tools to update.
     */
    limit?: number
  }

  /**
   * Tool updateManyAndReturn
   */
  export type ToolUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * The data used to update Tools.
     */
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyInput>
    /**
     * Filter which Tools to update
     */
    where?: ToolWhereInput
    /**
     * Limit how many Tools to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tool upsert
   */
  export type ToolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * The filter to search for the Tool to update in case it exists.
     */
    where: ToolWhereUniqueInput
    /**
     * In case the Tool found by the `where` argument doesn't exist, create a new Tool with this data.
     */
    create: XOR<ToolCreateInput, ToolUncheckedCreateInput>
    /**
     * In case the Tool was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ToolUpdateInput, ToolUncheckedUpdateInput>
  }

  /**
   * Tool delete
   */
  export type ToolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter which Tool to delete.
     */
    where: ToolWhereUniqueInput
  }

  /**
   * Tool deleteMany
   */
  export type ToolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tools to delete
     */
    where?: ToolWhereInput
    /**
     * Limit how many Tools to delete.
     */
    limit?: number
  }

  /**
   * Tool.brand
   */
  export type Tool$brandArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
  }

  /**
   * Tool.power
   */
  export type Tool$powerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    where?: PowerWhereInput
  }

  /**
   * Tool.size
   */
  export type Tool$sizeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    where?: SizeWhereInput
  }

  /**
   * Tool.professionTools
   */
  export type Tool$professionToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionTool
     */
    select?: ProfessionToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionTool
     */
    omit?: ProfessionToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionToolInclude<ExtArgs> | null
    where?: ProfessionToolWhereInput
    orderBy?: ProfessionToolOrderByWithRelationInput | ProfessionToolOrderByWithRelationInput[]
    cursor?: ProfessionToolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionToolScalarFieldEnum | ProfessionToolScalarFieldEnum[]
  }

  /**
   * Tool.orderProducts
   */
  export type Tool$orderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null
    where?: OrderProductWhereInput
    orderBy?: OrderProductOrderByWithRelationInput | OrderProductOrderByWithRelationInput[]
    cursor?: OrderProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[]
  }

  /**
   * Tool.basket
   */
  export type Tool$basketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    cursor?: BasketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Tool without action
   */
  export type ToolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
  }


  /**
   * Model Master
   */

  export type AggregateMaster = {
    _count: MasterCountAggregateOutputType | null
    _avg: MasterAvgAggregateOutputType | null
    _sum: MasterSumAggregateOutputType | null
    _min: MasterMinAggregateOutputType | null
    _max: MasterMaxAggregateOutputType | null
  }

  export type MasterAvgAggregateOutputType = {
    birthYear: number | null
  }

  export type MasterSumAggregateOutputType = {
    birthYear: number | null
  }

  export type MasterMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    isActive: boolean | null
    birthYear: number | null
    img: string | null
    passportImg: string | null
    about: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MasterMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    isActive: boolean | null
    birthYear: number | null
    img: string | null
    passportImg: string | null
    about: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MasterCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    phoneNumber: number
    isActive: number
    birthYear: number
    img: number
    passportImg: number
    about: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MasterAvgAggregateInputType = {
    birthYear?: true
  }

  export type MasterSumAggregateInputType = {
    birthYear?: true
  }

  export type MasterMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    isActive?: true
    birthYear?: true
    img?: true
    passportImg?: true
    about?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MasterMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    isActive?: true
    birthYear?: true
    img?: true
    passportImg?: true
    about?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MasterCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    isActive?: true
    birthYear?: true
    img?: true
    passportImg?: true
    about?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Master to aggregate.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Masters
    **/
    _count?: true | MasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterMaxAggregateInputType
  }

  export type GetMasterAggregateType<T extends MasterAggregateArgs> = {
        [P in keyof T & keyof AggregateMaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaster[P]>
      : GetScalarType<T[P], AggregateMaster[P]>
  }




  export type MasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterWhereInput
    orderBy?: MasterOrderByWithAggregationInput | MasterOrderByWithAggregationInput[]
    by: MasterScalarFieldEnum[] | MasterScalarFieldEnum
    having?: MasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterCountAggregateInputType | true
    _avg?: MasterAvgAggregateInputType
    _sum?: MasterSumAggregateInputType
    _min?: MasterMinAggregateInputType
    _max?: MasterMaxAggregateInputType
  }

  export type MasterGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    phoneNumber: string
    isActive: boolean
    birthYear: number
    img: string
    passportImg: string
    about: string
    createdAt: Date
    updatedAt: Date
    _count: MasterCountAggregateOutputType | null
    _avg: MasterAvgAggregateOutputType | null
    _sum: MasterSumAggregateOutputType | null
    _min: MasterMinAggregateOutputType | null
    _max: MasterMaxAggregateOutputType | null
  }

  type GetMasterGroupByPayload<T extends MasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterGroupByOutputType[P]>
            : GetScalarType<T[P], MasterGroupByOutputType[P]>
        }
      >
    >


  export type MasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    isActive?: boolean
    birthYear?: boolean
    img?: boolean
    passportImg?: boolean
    about?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    masterProfessions?: boolean | Master$masterProfessionsArgs<ExtArgs>
    ordermasters?: boolean | Master$ordermastersArgs<ExtArgs>
    masterRating?: boolean | Master$masterRatingArgs<ExtArgs>
    _count?: boolean | MasterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["master"]>

  export type MasterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    isActive?: boolean
    birthYear?: boolean
    img?: boolean
    passportImg?: boolean
    about?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["master"]>

  export type MasterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    isActive?: boolean
    birthYear?: boolean
    img?: boolean
    passportImg?: boolean
    about?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["master"]>

  export type MasterSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    isActive?: boolean
    birthYear?: boolean
    img?: boolean
    passportImg?: boolean
    about?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MasterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "phoneNumber" | "isActive" | "birthYear" | "img" | "passportImg" | "about" | "createdAt" | "updatedAt", ExtArgs["result"]["master"]>
  export type MasterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    masterProfessions?: boolean | Master$masterProfessionsArgs<ExtArgs>
    ordermasters?: boolean | Master$ordermastersArgs<ExtArgs>
    masterRating?: boolean | Master$masterRatingArgs<ExtArgs>
    _count?: boolean | MasterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MasterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MasterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Master"
    objects: {
      masterProfessions: Prisma.$MasterProfessionPayload<ExtArgs>[]
      ordermasters: Prisma.$OrderMasterPayload<ExtArgs>[]
      masterRating: Prisma.$MasterRatingsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      phoneNumber: string
      isActive: boolean
      birthYear: number
      img: string
      passportImg: string
      about: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["master"]>
    composites: {}
  }

  type MasterGetPayload<S extends boolean | null | undefined | MasterDefaultArgs> = $Result.GetResult<Prisma.$MasterPayload, S>

  type MasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MasterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MasterCountAggregateInputType | true
    }

  export interface MasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Master'], meta: { name: 'Master' } }
    /**
     * Find zero or one Master that matches the filter.
     * @param {MasterFindUniqueArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterFindUniqueArgs>(args: SelectSubset<T, MasterFindUniqueArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Master that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MasterFindUniqueOrThrowArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Master that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterFindFirstArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterFindFirstArgs>(args?: SelectSubset<T, MasterFindFirstArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Master that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterFindFirstOrThrowArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Masters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Masters
     * const masters = await prisma.master.findMany()
     * 
     * // Get first 10 Masters
     * const masters = await prisma.master.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterWithIdOnly = await prisma.master.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterFindManyArgs>(args?: SelectSubset<T, MasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Master.
     * @param {MasterCreateArgs} args - Arguments to create a Master.
     * @example
     * // Create one Master
     * const Master = await prisma.master.create({
     *   data: {
     *     // ... data to create a Master
     *   }
     * })
     * 
     */
    create<T extends MasterCreateArgs>(args: SelectSubset<T, MasterCreateArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Masters.
     * @param {MasterCreateManyArgs} args - Arguments to create many Masters.
     * @example
     * // Create many Masters
     * const master = await prisma.master.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterCreateManyArgs>(args?: SelectSubset<T, MasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Masters and returns the data saved in the database.
     * @param {MasterCreateManyAndReturnArgs} args - Arguments to create many Masters.
     * @example
     * // Create many Masters
     * const master = await prisma.master.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Masters and only return the `id`
     * const masterWithIdOnly = await prisma.master.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MasterCreateManyAndReturnArgs>(args?: SelectSubset<T, MasterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Master.
     * @param {MasterDeleteArgs} args - Arguments to delete one Master.
     * @example
     * // Delete one Master
     * const Master = await prisma.master.delete({
     *   where: {
     *     // ... filter to delete one Master
     *   }
     * })
     * 
     */
    delete<T extends MasterDeleteArgs>(args: SelectSubset<T, MasterDeleteArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Master.
     * @param {MasterUpdateArgs} args - Arguments to update one Master.
     * @example
     * // Update one Master
     * const master = await prisma.master.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterUpdateArgs>(args: SelectSubset<T, MasterUpdateArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Masters.
     * @param {MasterDeleteManyArgs} args - Arguments to filter Masters to delete.
     * @example
     * // Delete a few Masters
     * const { count } = await prisma.master.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterDeleteManyArgs>(args?: SelectSubset<T, MasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Masters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Masters
     * const master = await prisma.master.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterUpdateManyArgs>(args: SelectSubset<T, MasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Masters and returns the data updated in the database.
     * @param {MasterUpdateManyAndReturnArgs} args - Arguments to update many Masters.
     * @example
     * // Update many Masters
     * const master = await prisma.master.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Masters and only return the `id`
     * const masterWithIdOnly = await prisma.master.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MasterUpdateManyAndReturnArgs>(args: SelectSubset<T, MasterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Master.
     * @param {MasterUpsertArgs} args - Arguments to update or create a Master.
     * @example
     * // Update or create a Master
     * const master = await prisma.master.upsert({
     *   create: {
     *     // ... data to create a Master
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Master we want to update
     *   }
     * })
     */
    upsert<T extends MasterUpsertArgs>(args: SelectSubset<T, MasterUpsertArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Masters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterCountArgs} args - Arguments to filter Masters to count.
     * @example
     * // Count the number of Masters
     * const count = await prisma.master.count({
     *   where: {
     *     // ... the filter for the Masters we want to count
     *   }
     * })
    **/
    count<T extends MasterCountArgs>(
      args?: Subset<T, MasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Master.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterAggregateArgs>(args: Subset<T, MasterAggregateArgs>): Prisma.PrismaPromise<GetMasterAggregateType<T>>

    /**
     * Group by Master.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterGroupByArgs['orderBy'] }
        : { orderBy?: MasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Master model
   */
  readonly fields: MasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Master.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    masterProfessions<T extends Master$masterProfessionsArgs<ExtArgs> = {}>(args?: Subset<T, Master$masterProfessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterProfessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ordermasters<T extends Master$ordermastersArgs<ExtArgs> = {}>(args?: Subset<T, Master$ordermastersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderMasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    masterRating<T extends Master$masterRatingArgs<ExtArgs> = {}>(args?: Subset<T, Master$masterRatingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Master model
   */
  interface MasterFieldRefs {
    readonly id: FieldRef<"Master", 'String'>
    readonly firstName: FieldRef<"Master", 'String'>
    readonly lastName: FieldRef<"Master", 'String'>
    readonly phoneNumber: FieldRef<"Master", 'String'>
    readonly isActive: FieldRef<"Master", 'Boolean'>
    readonly birthYear: FieldRef<"Master", 'Int'>
    readonly img: FieldRef<"Master", 'String'>
    readonly passportImg: FieldRef<"Master", 'String'>
    readonly about: FieldRef<"Master", 'String'>
    readonly createdAt: FieldRef<"Master", 'DateTime'>
    readonly updatedAt: FieldRef<"Master", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Master findUnique
   */
  export type MasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master findUniqueOrThrow
   */
  export type MasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master findFirst
   */
  export type MasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Masters.
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Masters.
     */
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Master findFirstOrThrow
   */
  export type MasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Masters.
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Masters.
     */
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Master findMany
   */
  export type MasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Masters to fetch.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Masters.
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Master create
   */
  export type MasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * The data needed to create a Master.
     */
    data: XOR<MasterCreateInput, MasterUncheckedCreateInput>
  }

  /**
   * Master createMany
   */
  export type MasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Masters.
     */
    data: MasterCreateManyInput | MasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Master createManyAndReturn
   */
  export type MasterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * The data used to create many Masters.
     */
    data: MasterCreateManyInput | MasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Master update
   */
  export type MasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * The data needed to update a Master.
     */
    data: XOR<MasterUpdateInput, MasterUncheckedUpdateInput>
    /**
     * Choose, which Master to update.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master updateMany
   */
  export type MasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Masters.
     */
    data: XOR<MasterUpdateManyMutationInput, MasterUncheckedUpdateManyInput>
    /**
     * Filter which Masters to update
     */
    where?: MasterWhereInput
    /**
     * Limit how many Masters to update.
     */
    limit?: number
  }

  /**
   * Master updateManyAndReturn
   */
  export type MasterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * The data used to update Masters.
     */
    data: XOR<MasterUpdateManyMutationInput, MasterUncheckedUpdateManyInput>
    /**
     * Filter which Masters to update
     */
    where?: MasterWhereInput
    /**
     * Limit how many Masters to update.
     */
    limit?: number
  }

  /**
   * Master upsert
   */
  export type MasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * The filter to search for the Master to update in case it exists.
     */
    where: MasterWhereUniqueInput
    /**
     * In case the Master found by the `where` argument doesn't exist, create a new Master with this data.
     */
    create: XOR<MasterCreateInput, MasterUncheckedCreateInput>
    /**
     * In case the Master was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterUpdateInput, MasterUncheckedUpdateInput>
  }

  /**
   * Master delete
   */
  export type MasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter which Master to delete.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master deleteMany
   */
  export type MasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Masters to delete
     */
    where?: MasterWhereInput
    /**
     * Limit how many Masters to delete.
     */
    limit?: number
  }

  /**
   * Master.masterProfessions
   */
  export type Master$masterProfessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProfession
     */
    select?: MasterProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProfession
     */
    omit?: MasterProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProfessionInclude<ExtArgs> | null
    where?: MasterProfessionWhereInput
    orderBy?: MasterProfessionOrderByWithRelationInput | MasterProfessionOrderByWithRelationInput[]
    cursor?: MasterProfessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterProfessionScalarFieldEnum | MasterProfessionScalarFieldEnum[]
  }

  /**
   * Master.ordermasters
   */
  export type Master$ordermastersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMaster
     */
    select?: OrderMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMaster
     */
    omit?: OrderMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMasterInclude<ExtArgs> | null
    where?: OrderMasterWhereInput
    orderBy?: OrderMasterOrderByWithRelationInput | OrderMasterOrderByWithRelationInput[]
    cursor?: OrderMasterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderMasterScalarFieldEnum | OrderMasterScalarFieldEnum[]
  }

  /**
   * Master.masterRating
   */
  export type Master$masterRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    where?: MasterRatingsWhereInput
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    cursor?: MasterRatingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterRatingsScalarFieldEnum | MasterRatingsScalarFieldEnum[]
  }

  /**
   * Master without action
   */
  export type MasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
  }


  /**
   * Model MasterProfession
   */

  export type AggregateMasterProfession = {
    _count: MasterProfessionCountAggregateOutputType | null
    _avg: MasterProfessionAvgAggregateOutputType | null
    _sum: MasterProfessionSumAggregateOutputType | null
    _min: MasterProfessionMinAggregateOutputType | null
    _max: MasterProfessionMaxAggregateOutputType | null
  }

  export type MasterProfessionAvgAggregateOutputType = {
    minWorkingHours: number | null
    priceHourly: Decimal | null
    priceDaily: Decimal | null
    experience: number | null
  }

  export type MasterProfessionSumAggregateOutputType = {
    minWorkingHours: number | null
    priceHourly: Decimal | null
    priceDaily: Decimal | null
    experience: number | null
  }

  export type MasterProfessionMinAggregateOutputType = {
    id: string | null
    professionId: string | null
    minWorkingHours: number | null
    levelId: string | null
    priceHourly: Decimal | null
    priceDaily: Decimal | null
    experience: number | null
    masterId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MasterProfessionMaxAggregateOutputType = {
    id: string | null
    professionId: string | null
    minWorkingHours: number | null
    levelId: string | null
    priceHourly: Decimal | null
    priceDaily: Decimal | null
    experience: number | null
    masterId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MasterProfessionCountAggregateOutputType = {
    id: number
    professionId: number
    minWorkingHours: number
    levelId: number
    priceHourly: number
    priceDaily: number
    experience: number
    masterId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MasterProfessionAvgAggregateInputType = {
    minWorkingHours?: true
    priceHourly?: true
    priceDaily?: true
    experience?: true
  }

  export type MasterProfessionSumAggregateInputType = {
    minWorkingHours?: true
    priceHourly?: true
    priceDaily?: true
    experience?: true
  }

  export type MasterProfessionMinAggregateInputType = {
    id?: true
    professionId?: true
    minWorkingHours?: true
    levelId?: true
    priceHourly?: true
    priceDaily?: true
    experience?: true
    masterId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MasterProfessionMaxAggregateInputType = {
    id?: true
    professionId?: true
    minWorkingHours?: true
    levelId?: true
    priceHourly?: true
    priceDaily?: true
    experience?: true
    masterId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MasterProfessionCountAggregateInputType = {
    id?: true
    professionId?: true
    minWorkingHours?: true
    levelId?: true
    priceHourly?: true
    priceDaily?: true
    experience?: true
    masterId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MasterProfessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterProfession to aggregate.
     */
    where?: MasterProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterProfessions to fetch.
     */
    orderBy?: MasterProfessionOrderByWithRelationInput | MasterProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterProfessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterProfessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MasterProfessions
    **/
    _count?: true | MasterProfessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterProfessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterProfessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterProfessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterProfessionMaxAggregateInputType
  }

  export type GetMasterProfessionAggregateType<T extends MasterProfessionAggregateArgs> = {
        [P in keyof T & keyof AggregateMasterProfession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMasterProfession[P]>
      : GetScalarType<T[P], AggregateMasterProfession[P]>
  }




  export type MasterProfessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterProfessionWhereInput
    orderBy?: MasterProfessionOrderByWithAggregationInput | MasterProfessionOrderByWithAggregationInput[]
    by: MasterProfessionScalarFieldEnum[] | MasterProfessionScalarFieldEnum
    having?: MasterProfessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterProfessionCountAggregateInputType | true
    _avg?: MasterProfessionAvgAggregateInputType
    _sum?: MasterProfessionSumAggregateInputType
    _min?: MasterProfessionMinAggregateInputType
    _max?: MasterProfessionMaxAggregateInputType
  }

  export type MasterProfessionGroupByOutputType = {
    id: string
    professionId: string | null
    minWorkingHours: number | null
    levelId: string | null
    priceHourly: Decimal
    priceDaily: Decimal
    experience: number
    masterId: string | null
    createdAt: Date
    updatedAt: Date
    _count: MasterProfessionCountAggregateOutputType | null
    _avg: MasterProfessionAvgAggregateOutputType | null
    _sum: MasterProfessionSumAggregateOutputType | null
    _min: MasterProfessionMinAggregateOutputType | null
    _max: MasterProfessionMaxAggregateOutputType | null
  }

  type GetMasterProfessionGroupByPayload<T extends MasterProfessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterProfessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterProfessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterProfessionGroupByOutputType[P]>
            : GetScalarType<T[P], MasterProfessionGroupByOutputType[P]>
        }
      >
    >


  export type MasterProfessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionId?: boolean
    minWorkingHours?: boolean
    levelId?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    experience?: boolean
    masterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profession?: boolean | MasterProfession$professionArgs<ExtArgs>
    level?: boolean | MasterProfession$levelArgs<ExtArgs>
    master?: boolean | MasterProfession$masterArgs<ExtArgs>
  }, ExtArgs["result"]["masterProfession"]>

  export type MasterProfessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionId?: boolean
    minWorkingHours?: boolean
    levelId?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    experience?: boolean
    masterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profession?: boolean | MasterProfession$professionArgs<ExtArgs>
    level?: boolean | MasterProfession$levelArgs<ExtArgs>
    master?: boolean | MasterProfession$masterArgs<ExtArgs>
  }, ExtArgs["result"]["masterProfession"]>

  export type MasterProfessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionId?: boolean
    minWorkingHours?: boolean
    levelId?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    experience?: boolean
    masterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profession?: boolean | MasterProfession$professionArgs<ExtArgs>
    level?: boolean | MasterProfession$levelArgs<ExtArgs>
    master?: boolean | MasterProfession$masterArgs<ExtArgs>
  }, ExtArgs["result"]["masterProfession"]>

  export type MasterProfessionSelectScalar = {
    id?: boolean
    professionId?: boolean
    minWorkingHours?: boolean
    levelId?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    experience?: boolean
    masterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MasterProfessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "professionId" | "minWorkingHours" | "levelId" | "priceHourly" | "priceDaily" | "experience" | "masterId" | "createdAt" | "updatedAt", ExtArgs["result"]["masterProfession"]>
  export type MasterProfessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profession?: boolean | MasterProfession$professionArgs<ExtArgs>
    level?: boolean | MasterProfession$levelArgs<ExtArgs>
    master?: boolean | MasterProfession$masterArgs<ExtArgs>
  }
  export type MasterProfessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profession?: boolean | MasterProfession$professionArgs<ExtArgs>
    level?: boolean | MasterProfession$levelArgs<ExtArgs>
    master?: boolean | MasterProfession$masterArgs<ExtArgs>
  }
  export type MasterProfessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profession?: boolean | MasterProfession$professionArgs<ExtArgs>
    level?: boolean | MasterProfession$levelArgs<ExtArgs>
    master?: boolean | MasterProfession$masterArgs<ExtArgs>
  }

  export type $MasterProfessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MasterProfession"
    objects: {
      profession: Prisma.$ProfessionPayload<ExtArgs> | null
      level: Prisma.$LevelPayload<ExtArgs> | null
      master: Prisma.$MasterPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      professionId: string | null
      minWorkingHours: number | null
      levelId: string | null
      priceHourly: Prisma.Decimal
      priceDaily: Prisma.Decimal
      experience: number
      masterId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["masterProfession"]>
    composites: {}
  }

  type MasterProfessionGetPayload<S extends boolean | null | undefined | MasterProfessionDefaultArgs> = $Result.GetResult<Prisma.$MasterProfessionPayload, S>

  type MasterProfessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MasterProfessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MasterProfessionCountAggregateInputType | true
    }

  export interface MasterProfessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MasterProfession'], meta: { name: 'MasterProfession' } }
    /**
     * Find zero or one MasterProfession that matches the filter.
     * @param {MasterProfessionFindUniqueArgs} args - Arguments to find a MasterProfession
     * @example
     * // Get one MasterProfession
     * const masterProfession = await prisma.masterProfession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterProfessionFindUniqueArgs>(args: SelectSubset<T, MasterProfessionFindUniqueArgs<ExtArgs>>): Prisma__MasterProfessionClient<$Result.GetResult<Prisma.$MasterProfessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MasterProfession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MasterProfessionFindUniqueOrThrowArgs} args - Arguments to find a MasterProfession
     * @example
     * // Get one MasterProfession
     * const masterProfession = await prisma.masterProfession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterProfessionFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterProfessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterProfessionClient<$Result.GetResult<Prisma.$MasterProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterProfession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterProfessionFindFirstArgs} args - Arguments to find a MasterProfession
     * @example
     * // Get one MasterProfession
     * const masterProfession = await prisma.masterProfession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterProfessionFindFirstArgs>(args?: SelectSubset<T, MasterProfessionFindFirstArgs<ExtArgs>>): Prisma__MasterProfessionClient<$Result.GetResult<Prisma.$MasterProfessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterProfession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterProfessionFindFirstOrThrowArgs} args - Arguments to find a MasterProfession
     * @example
     * // Get one MasterProfession
     * const masterProfession = await prisma.masterProfession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterProfessionFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterProfessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterProfessionClient<$Result.GetResult<Prisma.$MasterProfessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MasterProfessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterProfessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MasterProfessions
     * const masterProfessions = await prisma.masterProfession.findMany()
     * 
     * // Get first 10 MasterProfessions
     * const masterProfessions = await prisma.masterProfession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterProfessionWithIdOnly = await prisma.masterProfession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterProfessionFindManyArgs>(args?: SelectSubset<T, MasterProfessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterProfessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MasterProfession.
     * @param {MasterProfessionCreateArgs} args - Arguments to create a MasterProfession.
     * @example
     * // Create one MasterProfession
     * const MasterProfession = await prisma.masterProfession.create({
     *   data: {
     *     // ... data to create a MasterProfession
     *   }
     * })
     * 
     */
    create<T extends MasterProfessionCreateArgs>(args: SelectSubset<T, MasterProfessionCreateArgs<ExtArgs>>): Prisma__MasterProfessionClient<$Result.GetResult<Prisma.$MasterProfessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MasterProfessions.
     * @param {MasterProfessionCreateManyArgs} args - Arguments to create many MasterProfessions.
     * @example
     * // Create many MasterProfessions
     * const masterProfession = await prisma.masterProfession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterProfessionCreateManyArgs>(args?: SelectSubset<T, MasterProfessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MasterProfessions and returns the data saved in the database.
     * @param {MasterProfessionCreateManyAndReturnArgs} args - Arguments to create many MasterProfessions.
     * @example
     * // Create many MasterProfessions
     * const masterProfession = await prisma.masterProfession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MasterProfessions and only return the `id`
     * const masterProfessionWithIdOnly = await prisma.masterProfession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MasterProfessionCreateManyAndReturnArgs>(args?: SelectSubset<T, MasterProfessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterProfessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MasterProfession.
     * @param {MasterProfessionDeleteArgs} args - Arguments to delete one MasterProfession.
     * @example
     * // Delete one MasterProfession
     * const MasterProfession = await prisma.masterProfession.delete({
     *   where: {
     *     // ... filter to delete one MasterProfession
     *   }
     * })
     * 
     */
    delete<T extends MasterProfessionDeleteArgs>(args: SelectSubset<T, MasterProfessionDeleteArgs<ExtArgs>>): Prisma__MasterProfessionClient<$Result.GetResult<Prisma.$MasterProfessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MasterProfession.
     * @param {MasterProfessionUpdateArgs} args - Arguments to update one MasterProfession.
     * @example
     * // Update one MasterProfession
     * const masterProfession = await prisma.masterProfession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterProfessionUpdateArgs>(args: SelectSubset<T, MasterProfessionUpdateArgs<ExtArgs>>): Prisma__MasterProfessionClient<$Result.GetResult<Prisma.$MasterProfessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MasterProfessions.
     * @param {MasterProfessionDeleteManyArgs} args - Arguments to filter MasterProfessions to delete.
     * @example
     * // Delete a few MasterProfessions
     * const { count } = await prisma.masterProfession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterProfessionDeleteManyArgs>(args?: SelectSubset<T, MasterProfessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterProfessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterProfessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MasterProfessions
     * const masterProfession = await prisma.masterProfession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterProfessionUpdateManyArgs>(args: SelectSubset<T, MasterProfessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterProfessions and returns the data updated in the database.
     * @param {MasterProfessionUpdateManyAndReturnArgs} args - Arguments to update many MasterProfessions.
     * @example
     * // Update many MasterProfessions
     * const masterProfession = await prisma.masterProfession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MasterProfessions and only return the `id`
     * const masterProfessionWithIdOnly = await prisma.masterProfession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MasterProfessionUpdateManyAndReturnArgs>(args: SelectSubset<T, MasterProfessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterProfessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MasterProfession.
     * @param {MasterProfessionUpsertArgs} args - Arguments to update or create a MasterProfession.
     * @example
     * // Update or create a MasterProfession
     * const masterProfession = await prisma.masterProfession.upsert({
     *   create: {
     *     // ... data to create a MasterProfession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MasterProfession we want to update
     *   }
     * })
     */
    upsert<T extends MasterProfessionUpsertArgs>(args: SelectSubset<T, MasterProfessionUpsertArgs<ExtArgs>>): Prisma__MasterProfessionClient<$Result.GetResult<Prisma.$MasterProfessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MasterProfessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterProfessionCountArgs} args - Arguments to filter MasterProfessions to count.
     * @example
     * // Count the number of MasterProfessions
     * const count = await prisma.masterProfession.count({
     *   where: {
     *     // ... the filter for the MasterProfessions we want to count
     *   }
     * })
    **/
    count<T extends MasterProfessionCountArgs>(
      args?: Subset<T, MasterProfessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterProfessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MasterProfession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterProfessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterProfessionAggregateArgs>(args: Subset<T, MasterProfessionAggregateArgs>): Prisma.PrismaPromise<GetMasterProfessionAggregateType<T>>

    /**
     * Group by MasterProfession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterProfessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterProfessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterProfessionGroupByArgs['orderBy'] }
        : { orderBy?: MasterProfessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterProfessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterProfessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MasterProfession model
   */
  readonly fields: MasterProfessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MasterProfession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterProfessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profession<T extends MasterProfession$professionArgs<ExtArgs> = {}>(args?: Subset<T, MasterProfession$professionArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    level<T extends MasterProfession$levelArgs<ExtArgs> = {}>(args?: Subset<T, MasterProfession$levelArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    master<T extends MasterProfession$masterArgs<ExtArgs> = {}>(args?: Subset<T, MasterProfession$masterArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MasterProfession model
   */
  interface MasterProfessionFieldRefs {
    readonly id: FieldRef<"MasterProfession", 'String'>
    readonly professionId: FieldRef<"MasterProfession", 'String'>
    readonly minWorkingHours: FieldRef<"MasterProfession", 'Int'>
    readonly levelId: FieldRef<"MasterProfession", 'String'>
    readonly priceHourly: FieldRef<"MasterProfession", 'Decimal'>
    readonly priceDaily: FieldRef<"MasterProfession", 'Decimal'>
    readonly experience: FieldRef<"MasterProfession", 'Float'>
    readonly masterId: FieldRef<"MasterProfession", 'String'>
    readonly createdAt: FieldRef<"MasterProfession", 'DateTime'>
    readonly updatedAt: FieldRef<"MasterProfession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MasterProfession findUnique
   */
  export type MasterProfessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProfession
     */
    select?: MasterProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProfession
     */
    omit?: MasterProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProfessionInclude<ExtArgs> | null
    /**
     * Filter, which MasterProfession to fetch.
     */
    where: MasterProfessionWhereUniqueInput
  }

  /**
   * MasterProfession findUniqueOrThrow
   */
  export type MasterProfessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProfession
     */
    select?: MasterProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProfession
     */
    omit?: MasterProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProfessionInclude<ExtArgs> | null
    /**
     * Filter, which MasterProfession to fetch.
     */
    where: MasterProfessionWhereUniqueInput
  }

  /**
   * MasterProfession findFirst
   */
  export type MasterProfessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProfession
     */
    select?: MasterProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProfession
     */
    omit?: MasterProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProfessionInclude<ExtArgs> | null
    /**
     * Filter, which MasterProfession to fetch.
     */
    where?: MasterProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterProfessions to fetch.
     */
    orderBy?: MasterProfessionOrderByWithRelationInput | MasterProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterProfessions.
     */
    cursor?: MasterProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterProfessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterProfessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterProfessions.
     */
    distinct?: MasterProfessionScalarFieldEnum | MasterProfessionScalarFieldEnum[]
  }

  /**
   * MasterProfession findFirstOrThrow
   */
  export type MasterProfessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProfession
     */
    select?: MasterProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProfession
     */
    omit?: MasterProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProfessionInclude<ExtArgs> | null
    /**
     * Filter, which MasterProfession to fetch.
     */
    where?: MasterProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterProfessions to fetch.
     */
    orderBy?: MasterProfessionOrderByWithRelationInput | MasterProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterProfessions.
     */
    cursor?: MasterProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterProfessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterProfessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterProfessions.
     */
    distinct?: MasterProfessionScalarFieldEnum | MasterProfessionScalarFieldEnum[]
  }

  /**
   * MasterProfession findMany
   */
  export type MasterProfessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProfession
     */
    select?: MasterProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProfession
     */
    omit?: MasterProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProfessionInclude<ExtArgs> | null
    /**
     * Filter, which MasterProfessions to fetch.
     */
    where?: MasterProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterProfessions to fetch.
     */
    orderBy?: MasterProfessionOrderByWithRelationInput | MasterProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MasterProfessions.
     */
    cursor?: MasterProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterProfessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterProfessions.
     */
    skip?: number
    distinct?: MasterProfessionScalarFieldEnum | MasterProfessionScalarFieldEnum[]
  }

  /**
   * MasterProfession create
   */
  export type MasterProfessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProfession
     */
    select?: MasterProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProfession
     */
    omit?: MasterProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProfessionInclude<ExtArgs> | null
    /**
     * The data needed to create a MasterProfession.
     */
    data: XOR<MasterProfessionCreateInput, MasterProfessionUncheckedCreateInput>
  }

  /**
   * MasterProfession createMany
   */
  export type MasterProfessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MasterProfessions.
     */
    data: MasterProfessionCreateManyInput | MasterProfessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MasterProfession createManyAndReturn
   */
  export type MasterProfessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProfession
     */
    select?: MasterProfessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProfession
     */
    omit?: MasterProfessionOmit<ExtArgs> | null
    /**
     * The data used to create many MasterProfessions.
     */
    data: MasterProfessionCreateManyInput | MasterProfessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProfessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterProfession update
   */
  export type MasterProfessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProfession
     */
    select?: MasterProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProfession
     */
    omit?: MasterProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProfessionInclude<ExtArgs> | null
    /**
     * The data needed to update a MasterProfession.
     */
    data: XOR<MasterProfessionUpdateInput, MasterProfessionUncheckedUpdateInput>
    /**
     * Choose, which MasterProfession to update.
     */
    where: MasterProfessionWhereUniqueInput
  }

  /**
   * MasterProfession updateMany
   */
  export type MasterProfessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MasterProfessions.
     */
    data: XOR<MasterProfessionUpdateManyMutationInput, MasterProfessionUncheckedUpdateManyInput>
    /**
     * Filter which MasterProfessions to update
     */
    where?: MasterProfessionWhereInput
    /**
     * Limit how many MasterProfessions to update.
     */
    limit?: number
  }

  /**
   * MasterProfession updateManyAndReturn
   */
  export type MasterProfessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProfession
     */
    select?: MasterProfessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProfession
     */
    omit?: MasterProfessionOmit<ExtArgs> | null
    /**
     * The data used to update MasterProfessions.
     */
    data: XOR<MasterProfessionUpdateManyMutationInput, MasterProfessionUncheckedUpdateManyInput>
    /**
     * Filter which MasterProfessions to update
     */
    where?: MasterProfessionWhereInput
    /**
     * Limit how many MasterProfessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProfessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterProfession upsert
   */
  export type MasterProfessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProfession
     */
    select?: MasterProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProfession
     */
    omit?: MasterProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProfessionInclude<ExtArgs> | null
    /**
     * The filter to search for the MasterProfession to update in case it exists.
     */
    where: MasterProfessionWhereUniqueInput
    /**
     * In case the MasterProfession found by the `where` argument doesn't exist, create a new MasterProfession with this data.
     */
    create: XOR<MasterProfessionCreateInput, MasterProfessionUncheckedCreateInput>
    /**
     * In case the MasterProfession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterProfessionUpdateInput, MasterProfessionUncheckedUpdateInput>
  }

  /**
   * MasterProfession delete
   */
  export type MasterProfessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProfession
     */
    select?: MasterProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProfession
     */
    omit?: MasterProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProfessionInclude<ExtArgs> | null
    /**
     * Filter which MasterProfession to delete.
     */
    where: MasterProfessionWhereUniqueInput
  }

  /**
   * MasterProfession deleteMany
   */
  export type MasterProfessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterProfessions to delete
     */
    where?: MasterProfessionWhereInput
    /**
     * Limit how many MasterProfessions to delete.
     */
    limit?: number
  }

  /**
   * MasterProfession.profession
   */
  export type MasterProfession$professionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    where?: ProfessionWhereInput
  }

  /**
   * MasterProfession.level
   */
  export type MasterProfession$levelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    where?: LevelWhereInput
  }

  /**
   * MasterProfession.master
   */
  export type MasterProfession$masterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    where?: MasterWhereInput
  }

  /**
   * MasterProfession without action
   */
  export type MasterProfessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProfession
     */
    select?: MasterProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProfession
     */
    omit?: MasterProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProfessionInclude<ExtArgs> | null
  }


  /**
   * Model Level
   */

  export type AggregateLevel = {
    _count: LevelCountAggregateOutputType | null
    _min: LevelMinAggregateOutputType | null
    _max: LevelMaxAggregateOutputType | null
  }

  export type LevelMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LevelMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LevelCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRu: number
    nameEn: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LevelMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LevelMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LevelCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Level to aggregate.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Levels
    **/
    _count?: true | LevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LevelMaxAggregateInputType
  }

  export type GetLevelAggregateType<T extends LevelAggregateArgs> = {
        [P in keyof T & keyof AggregateLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLevel[P]>
      : GetScalarType<T[P], AggregateLevel[P]>
  }




  export type LevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LevelWhereInput
    orderBy?: LevelOrderByWithAggregationInput | LevelOrderByWithAggregationInput[]
    by: LevelScalarFieldEnum[] | LevelScalarFieldEnum
    having?: LevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LevelCountAggregateInputType | true
    _min?: LevelMinAggregateInputType
    _max?: LevelMaxAggregateInputType
  }

  export type LevelGroupByOutputType = {
    id: string
    nameUz: string
    nameRu: string | null
    nameEn: string | null
    createdAt: Date
    updatedAt: Date
    _count: LevelCountAggregateOutputType | null
    _min: LevelMinAggregateOutputType | null
    _max: LevelMaxAggregateOutputType | null
  }

  type GetLevelGroupByPayload<T extends LevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LevelGroupByOutputType[P]>
            : GetScalarType<T[P], LevelGroupByOutputType[P]>
        }
      >
    >


  export type LevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    masterProfessions?: boolean | Level$masterProfessionsArgs<ExtArgs>
    professionLevels?: boolean | Level$professionLevelsArgs<ExtArgs>
    orderProductLevel?: boolean | Level$orderProductLevelArgs<ExtArgs>
    basket?: boolean | Level$basketArgs<ExtArgs>
    _count?: boolean | LevelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["level"]>

  export type LevelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["level"]>

  export type LevelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["level"]>

  export type LevelSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LevelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRu" | "nameEn" | "createdAt" | "updatedAt", ExtArgs["result"]["level"]>
  export type LevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    masterProfessions?: boolean | Level$masterProfessionsArgs<ExtArgs>
    professionLevels?: boolean | Level$professionLevelsArgs<ExtArgs>
    orderProductLevel?: boolean | Level$orderProductLevelArgs<ExtArgs>
    basket?: boolean | Level$basketArgs<ExtArgs>
    _count?: boolean | LevelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LevelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LevelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Level"
    objects: {
      masterProfessions: Prisma.$MasterProfessionPayload<ExtArgs>[]
      professionLevels: Prisma.$ProfessionLevelPayload<ExtArgs>[]
      orderProductLevel: Prisma.$OrderProductPayload<ExtArgs>[]
      basket: Prisma.$BasketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRu: string | null
      nameEn: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["level"]>
    composites: {}
  }

  type LevelGetPayload<S extends boolean | null | undefined | LevelDefaultArgs> = $Result.GetResult<Prisma.$LevelPayload, S>

  type LevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LevelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LevelCountAggregateInputType | true
    }

  export interface LevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Level'], meta: { name: 'Level' } }
    /**
     * Find zero or one Level that matches the filter.
     * @param {LevelFindUniqueArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LevelFindUniqueArgs>(args: SelectSubset<T, LevelFindUniqueArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Level that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LevelFindUniqueOrThrowArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LevelFindUniqueOrThrowArgs>(args: SelectSubset<T, LevelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Level that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelFindFirstArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LevelFindFirstArgs>(args?: SelectSubset<T, LevelFindFirstArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Level that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelFindFirstOrThrowArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LevelFindFirstOrThrowArgs>(args?: SelectSubset<T, LevelFindFirstOrThrowArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Levels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Levels
     * const levels = await prisma.level.findMany()
     * 
     * // Get first 10 Levels
     * const levels = await prisma.level.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const levelWithIdOnly = await prisma.level.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LevelFindManyArgs>(args?: SelectSubset<T, LevelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Level.
     * @param {LevelCreateArgs} args - Arguments to create a Level.
     * @example
     * // Create one Level
     * const Level = await prisma.level.create({
     *   data: {
     *     // ... data to create a Level
     *   }
     * })
     * 
     */
    create<T extends LevelCreateArgs>(args: SelectSubset<T, LevelCreateArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Levels.
     * @param {LevelCreateManyArgs} args - Arguments to create many Levels.
     * @example
     * // Create many Levels
     * const level = await prisma.level.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LevelCreateManyArgs>(args?: SelectSubset<T, LevelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Levels and returns the data saved in the database.
     * @param {LevelCreateManyAndReturnArgs} args - Arguments to create many Levels.
     * @example
     * // Create many Levels
     * const level = await prisma.level.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Levels and only return the `id`
     * const levelWithIdOnly = await prisma.level.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LevelCreateManyAndReturnArgs>(args?: SelectSubset<T, LevelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Level.
     * @param {LevelDeleteArgs} args - Arguments to delete one Level.
     * @example
     * // Delete one Level
     * const Level = await prisma.level.delete({
     *   where: {
     *     // ... filter to delete one Level
     *   }
     * })
     * 
     */
    delete<T extends LevelDeleteArgs>(args: SelectSubset<T, LevelDeleteArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Level.
     * @param {LevelUpdateArgs} args - Arguments to update one Level.
     * @example
     * // Update one Level
     * const level = await prisma.level.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LevelUpdateArgs>(args: SelectSubset<T, LevelUpdateArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Levels.
     * @param {LevelDeleteManyArgs} args - Arguments to filter Levels to delete.
     * @example
     * // Delete a few Levels
     * const { count } = await prisma.level.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LevelDeleteManyArgs>(args?: SelectSubset<T, LevelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Levels
     * const level = await prisma.level.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LevelUpdateManyArgs>(args: SelectSubset<T, LevelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Levels and returns the data updated in the database.
     * @param {LevelUpdateManyAndReturnArgs} args - Arguments to update many Levels.
     * @example
     * // Update many Levels
     * const level = await prisma.level.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Levels and only return the `id`
     * const levelWithIdOnly = await prisma.level.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LevelUpdateManyAndReturnArgs>(args: SelectSubset<T, LevelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Level.
     * @param {LevelUpsertArgs} args - Arguments to update or create a Level.
     * @example
     * // Update or create a Level
     * const level = await prisma.level.upsert({
     *   create: {
     *     // ... data to create a Level
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Level we want to update
     *   }
     * })
     */
    upsert<T extends LevelUpsertArgs>(args: SelectSubset<T, LevelUpsertArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelCountArgs} args - Arguments to filter Levels to count.
     * @example
     * // Count the number of Levels
     * const count = await prisma.level.count({
     *   where: {
     *     // ... the filter for the Levels we want to count
     *   }
     * })
    **/
    count<T extends LevelCountArgs>(
      args?: Subset<T, LevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Level.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LevelAggregateArgs>(args: Subset<T, LevelAggregateArgs>): Prisma.PrismaPromise<GetLevelAggregateType<T>>

    /**
     * Group by Level.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LevelGroupByArgs['orderBy'] }
        : { orderBy?: LevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Level model
   */
  readonly fields: LevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Level.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    masterProfessions<T extends Level$masterProfessionsArgs<ExtArgs> = {}>(args?: Subset<T, Level$masterProfessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterProfessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    professionLevels<T extends Level$professionLevelsArgs<ExtArgs> = {}>(args?: Subset<T, Level$professionLevelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orderProductLevel<T extends Level$orderProductLevelArgs<ExtArgs> = {}>(args?: Subset<T, Level$orderProductLevelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    basket<T extends Level$basketArgs<ExtArgs> = {}>(args?: Subset<T, Level$basketArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Level model
   */
  interface LevelFieldRefs {
    readonly id: FieldRef<"Level", 'String'>
    readonly nameUz: FieldRef<"Level", 'String'>
    readonly nameRu: FieldRef<"Level", 'String'>
    readonly nameEn: FieldRef<"Level", 'String'>
    readonly createdAt: FieldRef<"Level", 'DateTime'>
    readonly updatedAt: FieldRef<"Level", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Level findUnique
   */
  export type LevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level findUniqueOrThrow
   */
  export type LevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level findFirst
   */
  export type LevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Levels.
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Levels.
     */
    distinct?: LevelScalarFieldEnum | LevelScalarFieldEnum[]
  }

  /**
   * Level findFirstOrThrow
   */
  export type LevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Levels.
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Levels.
     */
    distinct?: LevelScalarFieldEnum | LevelScalarFieldEnum[]
  }

  /**
   * Level findMany
   */
  export type LevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Levels to fetch.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Levels.
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    distinct?: LevelScalarFieldEnum | LevelScalarFieldEnum[]
  }

  /**
   * Level create
   */
  export type LevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * The data needed to create a Level.
     */
    data: XOR<LevelCreateInput, LevelUncheckedCreateInput>
  }

  /**
   * Level createMany
   */
  export type LevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Levels.
     */
    data: LevelCreateManyInput | LevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Level createManyAndReturn
   */
  export type LevelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * The data used to create many Levels.
     */
    data: LevelCreateManyInput | LevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Level update
   */
  export type LevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * The data needed to update a Level.
     */
    data: XOR<LevelUpdateInput, LevelUncheckedUpdateInput>
    /**
     * Choose, which Level to update.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level updateMany
   */
  export type LevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Levels.
     */
    data: XOR<LevelUpdateManyMutationInput, LevelUncheckedUpdateManyInput>
    /**
     * Filter which Levels to update
     */
    where?: LevelWhereInput
    /**
     * Limit how many Levels to update.
     */
    limit?: number
  }

  /**
   * Level updateManyAndReturn
   */
  export type LevelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * The data used to update Levels.
     */
    data: XOR<LevelUpdateManyMutationInput, LevelUncheckedUpdateManyInput>
    /**
     * Filter which Levels to update
     */
    where?: LevelWhereInput
    /**
     * Limit how many Levels to update.
     */
    limit?: number
  }

  /**
   * Level upsert
   */
  export type LevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * The filter to search for the Level to update in case it exists.
     */
    where: LevelWhereUniqueInput
    /**
     * In case the Level found by the `where` argument doesn't exist, create a new Level with this data.
     */
    create: XOR<LevelCreateInput, LevelUncheckedCreateInput>
    /**
     * In case the Level was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LevelUpdateInput, LevelUncheckedUpdateInput>
  }

  /**
   * Level delete
   */
  export type LevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter which Level to delete.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level deleteMany
   */
  export type LevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Levels to delete
     */
    where?: LevelWhereInput
    /**
     * Limit how many Levels to delete.
     */
    limit?: number
  }

  /**
   * Level.masterProfessions
   */
  export type Level$masterProfessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProfession
     */
    select?: MasterProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProfession
     */
    omit?: MasterProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProfessionInclude<ExtArgs> | null
    where?: MasterProfessionWhereInput
    orderBy?: MasterProfessionOrderByWithRelationInput | MasterProfessionOrderByWithRelationInput[]
    cursor?: MasterProfessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterProfessionScalarFieldEnum | MasterProfessionScalarFieldEnum[]
  }

  /**
   * Level.professionLevels
   */
  export type Level$professionLevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionLevel
     */
    select?: ProfessionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionLevel
     */
    omit?: ProfessionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionLevelInclude<ExtArgs> | null
    where?: ProfessionLevelWhereInput
    orderBy?: ProfessionLevelOrderByWithRelationInput | ProfessionLevelOrderByWithRelationInput[]
    cursor?: ProfessionLevelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionLevelScalarFieldEnum | ProfessionLevelScalarFieldEnum[]
  }

  /**
   * Level.orderProductLevel
   */
  export type Level$orderProductLevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null
    where?: OrderProductWhereInput
    orderBy?: OrderProductOrderByWithRelationInput | OrderProductOrderByWithRelationInput[]
    cursor?: OrderProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[]
  }

  /**
   * Level.basket
   */
  export type Level$basketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    cursor?: BasketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Level without action
   */
  export type LevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
  }


  /**
   * Model Profession
   */

  export type AggregateProfession = {
    _count: ProfessionCountAggregateOutputType | null
    _min: ProfessionMinAggregateOutputType | null
    _max: ProfessionMaxAggregateOutputType | null
  }

  export type ProfessionMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    img: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessionMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    img: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessionCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRu: number
    nameEn: number
    img: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfessionMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    img?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessionMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    img?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessionCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    img?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profession to aggregate.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Professions
    **/
    _count?: true | ProfessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionMaxAggregateInputType
  }

  export type GetProfessionAggregateType<T extends ProfessionAggregateArgs> = {
        [P in keyof T & keyof AggregateProfession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfession[P]>
      : GetScalarType<T[P], AggregateProfession[P]>
  }




  export type ProfessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionWhereInput
    orderBy?: ProfessionOrderByWithAggregationInput | ProfessionOrderByWithAggregationInput[]
    by: ProfessionScalarFieldEnum[] | ProfessionScalarFieldEnum
    having?: ProfessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionCountAggregateInputType | true
    _min?: ProfessionMinAggregateInputType
    _max?: ProfessionMaxAggregateInputType
  }

  export type ProfessionGroupByOutputType = {
    id: string
    nameUz: string
    nameRu: string | null
    nameEn: string | null
    img: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ProfessionCountAggregateOutputType | null
    _min: ProfessionMinAggregateOutputType | null
    _max: ProfessionMaxAggregateOutputType | null
  }

  type GetProfessionGroupByPayload<T extends ProfessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionGroupByOutputType[P]>
        }
      >
    >


  export type ProfessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    img?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    masterProfessions?: boolean | Profession$masterProfessionsArgs<ExtArgs>
    professionLevels?: boolean | Profession$professionLevelsArgs<ExtArgs>
    professionTools?: boolean | Profession$professionToolsArgs<ExtArgs>
    orderProducts?: boolean | Profession$orderProductsArgs<ExtArgs>
    basket?: boolean | Profession$basketArgs<ExtArgs>
    _count?: boolean | ProfessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profession"]>

  export type ProfessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    img?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["profession"]>

  export type ProfessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    img?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["profession"]>

  export type ProfessionSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    img?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRu" | "nameEn" | "img" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["profession"]>
  export type ProfessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    masterProfessions?: boolean | Profession$masterProfessionsArgs<ExtArgs>
    professionLevels?: boolean | Profession$professionLevelsArgs<ExtArgs>
    professionTools?: boolean | Profession$professionToolsArgs<ExtArgs>
    orderProducts?: boolean | Profession$orderProductsArgs<ExtArgs>
    basket?: boolean | Profession$basketArgs<ExtArgs>
    _count?: boolean | ProfessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProfessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProfessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profession"
    objects: {
      masterProfessions: Prisma.$MasterProfessionPayload<ExtArgs>[]
      professionLevels: Prisma.$ProfessionLevelPayload<ExtArgs>[]
      professionTools: Prisma.$ProfessionToolPayload<ExtArgs>[]
      orderProducts: Prisma.$OrderProductPayload<ExtArgs>[]
      basket: Prisma.$BasketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRu: string | null
      nameEn: string | null
      img: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["profession"]>
    composites: {}
  }

  type ProfessionGetPayload<S extends boolean | null | undefined | ProfessionDefaultArgs> = $Result.GetResult<Prisma.$ProfessionPayload, S>

  type ProfessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessionCountAggregateInputType | true
    }

  export interface ProfessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profession'], meta: { name: 'Profession' } }
    /**
     * Find zero or one Profession that matches the filter.
     * @param {ProfessionFindUniqueArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessionFindUniqueArgs>(args: SelectSubset<T, ProfessionFindUniqueArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfessionFindUniqueOrThrowArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionFindFirstArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessionFindFirstArgs>(args?: SelectSubset<T, ProfessionFindFirstArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionFindFirstOrThrowArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Professions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professions
     * const professions = await prisma.profession.findMany()
     * 
     * // Get first 10 Professions
     * const professions = await prisma.profession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionWithIdOnly = await prisma.profession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessionFindManyArgs>(args?: SelectSubset<T, ProfessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profession.
     * @param {ProfessionCreateArgs} args - Arguments to create a Profession.
     * @example
     * // Create one Profession
     * const Profession = await prisma.profession.create({
     *   data: {
     *     // ... data to create a Profession
     *   }
     * })
     * 
     */
    create<T extends ProfessionCreateArgs>(args: SelectSubset<T, ProfessionCreateArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Professions.
     * @param {ProfessionCreateManyArgs} args - Arguments to create many Professions.
     * @example
     * // Create many Professions
     * const profession = await prisma.profession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessionCreateManyArgs>(args?: SelectSubset<T, ProfessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Professions and returns the data saved in the database.
     * @param {ProfessionCreateManyAndReturnArgs} args - Arguments to create many Professions.
     * @example
     * // Create many Professions
     * const profession = await prisma.profession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Professions and only return the `id`
     * const professionWithIdOnly = await prisma.profession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profession.
     * @param {ProfessionDeleteArgs} args - Arguments to delete one Profession.
     * @example
     * // Delete one Profession
     * const Profession = await prisma.profession.delete({
     *   where: {
     *     // ... filter to delete one Profession
     *   }
     * })
     * 
     */
    delete<T extends ProfessionDeleteArgs>(args: SelectSubset<T, ProfessionDeleteArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profession.
     * @param {ProfessionUpdateArgs} args - Arguments to update one Profession.
     * @example
     * // Update one Profession
     * const profession = await prisma.profession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessionUpdateArgs>(args: SelectSubset<T, ProfessionUpdateArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Professions.
     * @param {ProfessionDeleteManyArgs} args - Arguments to filter Professions to delete.
     * @example
     * // Delete a few Professions
     * const { count } = await prisma.profession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessionDeleteManyArgs>(args?: SelectSubset<T, ProfessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professions
     * const profession = await prisma.profession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessionUpdateManyArgs>(args: SelectSubset<T, ProfessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professions and returns the data updated in the database.
     * @param {ProfessionUpdateManyAndReturnArgs} args - Arguments to update many Professions.
     * @example
     * // Update many Professions
     * const profession = await prisma.profession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Professions and only return the `id`
     * const professionWithIdOnly = await prisma.profession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfessionUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profession.
     * @param {ProfessionUpsertArgs} args - Arguments to update or create a Profession.
     * @example
     * // Update or create a Profession
     * const profession = await prisma.profession.upsert({
     *   create: {
     *     // ... data to create a Profession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profession we want to update
     *   }
     * })
     */
    upsert<T extends ProfessionUpsertArgs>(args: SelectSubset<T, ProfessionUpsertArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Professions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionCountArgs} args - Arguments to filter Professions to count.
     * @example
     * // Count the number of Professions
     * const count = await prisma.profession.count({
     *   where: {
     *     // ... the filter for the Professions we want to count
     *   }
     * })
    **/
    count<T extends ProfessionCountArgs>(
      args?: Subset<T, ProfessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionAggregateArgs>(args: Subset<T, ProfessionAggregateArgs>): Prisma.PrismaPromise<GetProfessionAggregateType<T>>

    /**
     * Group by Profession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessionGroupByArgs['orderBy'] }
        : { orderBy?: ProfessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profession model
   */
  readonly fields: ProfessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    masterProfessions<T extends Profession$masterProfessionsArgs<ExtArgs> = {}>(args?: Subset<T, Profession$masterProfessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterProfessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    professionLevels<T extends Profession$professionLevelsArgs<ExtArgs> = {}>(args?: Subset<T, Profession$professionLevelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    professionTools<T extends Profession$professionToolsArgs<ExtArgs> = {}>(args?: Subset<T, Profession$professionToolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orderProducts<T extends Profession$orderProductsArgs<ExtArgs> = {}>(args?: Subset<T, Profession$orderProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    basket<T extends Profession$basketArgs<ExtArgs> = {}>(args?: Subset<T, Profession$basketArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profession model
   */
  interface ProfessionFieldRefs {
    readonly id: FieldRef<"Profession", 'String'>
    readonly nameUz: FieldRef<"Profession", 'String'>
    readonly nameRu: FieldRef<"Profession", 'String'>
    readonly nameEn: FieldRef<"Profession", 'String'>
    readonly img: FieldRef<"Profession", 'String'>
    readonly isActive: FieldRef<"Profession", 'Boolean'>
    readonly createdAt: FieldRef<"Profession", 'DateTime'>
    readonly updatedAt: FieldRef<"Profession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Profession findUnique
   */
  export type ProfessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession findUniqueOrThrow
   */
  export type ProfessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession findFirst
   */
  export type ProfessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professions.
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professions.
     */
    distinct?: ProfessionScalarFieldEnum | ProfessionScalarFieldEnum[]
  }

  /**
   * Profession findFirstOrThrow
   */
  export type ProfessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professions.
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professions.
     */
    distinct?: ProfessionScalarFieldEnum | ProfessionScalarFieldEnum[]
  }

  /**
   * Profession findMany
   */
  export type ProfessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Professions to fetch.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Professions.
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    distinct?: ProfessionScalarFieldEnum | ProfessionScalarFieldEnum[]
  }

  /**
   * Profession create
   */
  export type ProfessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Profession.
     */
    data: XOR<ProfessionCreateInput, ProfessionUncheckedCreateInput>
  }

  /**
   * Profession createMany
   */
  export type ProfessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Professions.
     */
    data: ProfessionCreateManyInput | ProfessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profession createManyAndReturn
   */
  export type ProfessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * The data used to create many Professions.
     */
    data: ProfessionCreateManyInput | ProfessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profession update
   */
  export type ProfessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Profession.
     */
    data: XOR<ProfessionUpdateInput, ProfessionUncheckedUpdateInput>
    /**
     * Choose, which Profession to update.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession updateMany
   */
  export type ProfessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Professions.
     */
    data: XOR<ProfessionUpdateManyMutationInput, ProfessionUncheckedUpdateManyInput>
    /**
     * Filter which Professions to update
     */
    where?: ProfessionWhereInput
    /**
     * Limit how many Professions to update.
     */
    limit?: number
  }

  /**
   * Profession updateManyAndReturn
   */
  export type ProfessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * The data used to update Professions.
     */
    data: XOR<ProfessionUpdateManyMutationInput, ProfessionUncheckedUpdateManyInput>
    /**
     * Filter which Professions to update
     */
    where?: ProfessionWhereInput
    /**
     * Limit how many Professions to update.
     */
    limit?: number
  }

  /**
   * Profession upsert
   */
  export type ProfessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Profession to update in case it exists.
     */
    where: ProfessionWhereUniqueInput
    /**
     * In case the Profession found by the `where` argument doesn't exist, create a new Profession with this data.
     */
    create: XOR<ProfessionCreateInput, ProfessionUncheckedCreateInput>
    /**
     * In case the Profession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessionUpdateInput, ProfessionUncheckedUpdateInput>
  }

  /**
   * Profession delete
   */
  export type ProfessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter which Profession to delete.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession deleteMany
   */
  export type ProfessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professions to delete
     */
    where?: ProfessionWhereInput
    /**
     * Limit how many Professions to delete.
     */
    limit?: number
  }

  /**
   * Profession.masterProfessions
   */
  export type Profession$masterProfessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProfession
     */
    select?: MasterProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProfession
     */
    omit?: MasterProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProfessionInclude<ExtArgs> | null
    where?: MasterProfessionWhereInput
    orderBy?: MasterProfessionOrderByWithRelationInput | MasterProfessionOrderByWithRelationInput[]
    cursor?: MasterProfessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterProfessionScalarFieldEnum | MasterProfessionScalarFieldEnum[]
  }

  /**
   * Profession.professionLevels
   */
  export type Profession$professionLevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionLevel
     */
    select?: ProfessionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionLevel
     */
    omit?: ProfessionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionLevelInclude<ExtArgs> | null
    where?: ProfessionLevelWhereInput
    orderBy?: ProfessionLevelOrderByWithRelationInput | ProfessionLevelOrderByWithRelationInput[]
    cursor?: ProfessionLevelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionLevelScalarFieldEnum | ProfessionLevelScalarFieldEnum[]
  }

  /**
   * Profession.professionTools
   */
  export type Profession$professionToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionTool
     */
    select?: ProfessionToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionTool
     */
    omit?: ProfessionToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionToolInclude<ExtArgs> | null
    where?: ProfessionToolWhereInput
    orderBy?: ProfessionToolOrderByWithRelationInput | ProfessionToolOrderByWithRelationInput[]
    cursor?: ProfessionToolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionToolScalarFieldEnum | ProfessionToolScalarFieldEnum[]
  }

  /**
   * Profession.orderProducts
   */
  export type Profession$orderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null
    where?: OrderProductWhereInput
    orderBy?: OrderProductOrderByWithRelationInput | OrderProductOrderByWithRelationInput[]
    cursor?: OrderProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[]
  }

  /**
   * Profession.basket
   */
  export type Profession$basketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    cursor?: BasketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Profession without action
   */
  export type ProfessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
  }


  /**
   * Model ProfessionLevel
   */

  export type AggregateProfessionLevel = {
    _count: ProfessionLevelCountAggregateOutputType | null
    _avg: ProfessionLevelAvgAggregateOutputType | null
    _sum: ProfessionLevelSumAggregateOutputType | null
    _min: ProfessionLevelMinAggregateOutputType | null
    _max: ProfessionLevelMaxAggregateOutputType | null
  }

  export type ProfessionLevelAvgAggregateOutputType = {
    minWorkingHours: number | null
    priceHourly: Decimal | null
    priceDaily: Decimal | null
  }

  export type ProfessionLevelSumAggregateOutputType = {
    minWorkingHours: number | null
    priceHourly: Decimal | null
    priceDaily: Decimal | null
  }

  export type ProfessionLevelMinAggregateOutputType = {
    id: string | null
    professionId: string | null
    levelId: string | null
    minWorkingHours: number | null
    priceHourly: Decimal | null
    priceDaily: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessionLevelMaxAggregateOutputType = {
    id: string | null
    professionId: string | null
    levelId: string | null
    minWorkingHours: number | null
    priceHourly: Decimal | null
    priceDaily: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessionLevelCountAggregateOutputType = {
    id: number
    professionId: number
    levelId: number
    minWorkingHours: number
    priceHourly: number
    priceDaily: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfessionLevelAvgAggregateInputType = {
    minWorkingHours?: true
    priceHourly?: true
    priceDaily?: true
  }

  export type ProfessionLevelSumAggregateInputType = {
    minWorkingHours?: true
    priceHourly?: true
    priceDaily?: true
  }

  export type ProfessionLevelMinAggregateInputType = {
    id?: true
    professionId?: true
    levelId?: true
    minWorkingHours?: true
    priceHourly?: true
    priceDaily?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessionLevelMaxAggregateInputType = {
    id?: true
    professionId?: true
    levelId?: true
    minWorkingHours?: true
    priceHourly?: true
    priceDaily?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessionLevelCountAggregateInputType = {
    id?: true
    professionId?: true
    levelId?: true
    minWorkingHours?: true
    priceHourly?: true
    priceDaily?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfessionLevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionLevel to aggregate.
     */
    where?: ProfessionLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionLevels to fetch.
     */
    orderBy?: ProfessionLevelOrderByWithRelationInput | ProfessionLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessionLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfessionLevels
    **/
    _count?: true | ProfessionLevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessionLevelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessionLevelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionLevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionLevelMaxAggregateInputType
  }

  export type GetProfessionLevelAggregateType<T extends ProfessionLevelAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessionLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessionLevel[P]>
      : GetScalarType<T[P], AggregateProfessionLevel[P]>
  }




  export type ProfessionLevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionLevelWhereInput
    orderBy?: ProfessionLevelOrderByWithAggregationInput | ProfessionLevelOrderByWithAggregationInput[]
    by: ProfessionLevelScalarFieldEnum[] | ProfessionLevelScalarFieldEnum
    having?: ProfessionLevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionLevelCountAggregateInputType | true
    _avg?: ProfessionLevelAvgAggregateInputType
    _sum?: ProfessionLevelSumAggregateInputType
    _min?: ProfessionLevelMinAggregateInputType
    _max?: ProfessionLevelMaxAggregateInputType
  }

  export type ProfessionLevelGroupByOutputType = {
    id: string
    professionId: string
    levelId: string
    minWorkingHours: number
    priceHourly: Decimal
    priceDaily: Decimal
    createdAt: Date
    updatedAt: Date
    _count: ProfessionLevelCountAggregateOutputType | null
    _avg: ProfessionLevelAvgAggregateOutputType | null
    _sum: ProfessionLevelSumAggregateOutputType | null
    _min: ProfessionLevelMinAggregateOutputType | null
    _max: ProfessionLevelMaxAggregateOutputType | null
  }

  type GetProfessionLevelGroupByPayload<T extends ProfessionLevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionLevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionLevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionLevelGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionLevelGroupByOutputType[P]>
        }
      >
    >


  export type ProfessionLevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionId?: boolean
    levelId?: boolean
    minWorkingHours?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionLevel"]>

  export type ProfessionLevelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionId?: boolean
    levelId?: boolean
    minWorkingHours?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionLevel"]>

  export type ProfessionLevelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionId?: boolean
    levelId?: boolean
    minWorkingHours?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionLevel"]>

  export type ProfessionLevelSelectScalar = {
    id?: boolean
    professionId?: boolean
    levelId?: boolean
    minWorkingHours?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfessionLevelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "professionId" | "levelId" | "minWorkingHours" | "priceHourly" | "priceDaily" | "createdAt" | "updatedAt", ExtArgs["result"]["professionLevel"]>
  export type ProfessionLevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }
  export type ProfessionLevelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }
  export type ProfessionLevelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }

  export type $ProfessionLevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfessionLevel"
    objects: {
      profession: Prisma.$ProfessionPayload<ExtArgs>
      level: Prisma.$LevelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      professionId: string
      levelId: string
      minWorkingHours: number
      priceHourly: Prisma.Decimal
      priceDaily: Prisma.Decimal
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["professionLevel"]>
    composites: {}
  }

  type ProfessionLevelGetPayload<S extends boolean | null | undefined | ProfessionLevelDefaultArgs> = $Result.GetResult<Prisma.$ProfessionLevelPayload, S>

  type ProfessionLevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfessionLevelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessionLevelCountAggregateInputType | true
    }

  export interface ProfessionLevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfessionLevel'], meta: { name: 'ProfessionLevel' } }
    /**
     * Find zero or one ProfessionLevel that matches the filter.
     * @param {ProfessionLevelFindUniqueArgs} args - Arguments to find a ProfessionLevel
     * @example
     * // Get one ProfessionLevel
     * const professionLevel = await prisma.professionLevel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessionLevelFindUniqueArgs>(args: SelectSubset<T, ProfessionLevelFindUniqueArgs<ExtArgs>>): Prisma__ProfessionLevelClient<$Result.GetResult<Prisma.$ProfessionLevelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProfessionLevel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfessionLevelFindUniqueOrThrowArgs} args - Arguments to find a ProfessionLevel
     * @example
     * // Get one ProfessionLevel
     * const professionLevel = await prisma.professionLevel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessionLevelFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessionLevelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessionLevelClient<$Result.GetResult<Prisma.$ProfessionLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessionLevel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionLevelFindFirstArgs} args - Arguments to find a ProfessionLevel
     * @example
     * // Get one ProfessionLevel
     * const professionLevel = await prisma.professionLevel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessionLevelFindFirstArgs>(args?: SelectSubset<T, ProfessionLevelFindFirstArgs<ExtArgs>>): Prisma__ProfessionLevelClient<$Result.GetResult<Prisma.$ProfessionLevelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessionLevel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionLevelFindFirstOrThrowArgs} args - Arguments to find a ProfessionLevel
     * @example
     * // Get one ProfessionLevel
     * const professionLevel = await prisma.professionLevel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessionLevelFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessionLevelFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessionLevelClient<$Result.GetResult<Prisma.$ProfessionLevelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProfessionLevels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionLevelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfessionLevels
     * const professionLevels = await prisma.professionLevel.findMany()
     * 
     * // Get first 10 ProfessionLevels
     * const professionLevels = await prisma.professionLevel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionLevelWithIdOnly = await prisma.professionLevel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessionLevelFindManyArgs>(args?: SelectSubset<T, ProfessionLevelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProfessionLevel.
     * @param {ProfessionLevelCreateArgs} args - Arguments to create a ProfessionLevel.
     * @example
     * // Create one ProfessionLevel
     * const ProfessionLevel = await prisma.professionLevel.create({
     *   data: {
     *     // ... data to create a ProfessionLevel
     *   }
     * })
     * 
     */
    create<T extends ProfessionLevelCreateArgs>(args: SelectSubset<T, ProfessionLevelCreateArgs<ExtArgs>>): Prisma__ProfessionLevelClient<$Result.GetResult<Prisma.$ProfessionLevelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProfessionLevels.
     * @param {ProfessionLevelCreateManyArgs} args - Arguments to create many ProfessionLevels.
     * @example
     * // Create many ProfessionLevels
     * const professionLevel = await prisma.professionLevel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessionLevelCreateManyArgs>(args?: SelectSubset<T, ProfessionLevelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProfessionLevels and returns the data saved in the database.
     * @param {ProfessionLevelCreateManyAndReturnArgs} args - Arguments to create many ProfessionLevels.
     * @example
     * // Create many ProfessionLevels
     * const professionLevel = await prisma.professionLevel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProfessionLevels and only return the `id`
     * const professionLevelWithIdOnly = await prisma.professionLevel.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessionLevelCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessionLevelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionLevelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProfessionLevel.
     * @param {ProfessionLevelDeleteArgs} args - Arguments to delete one ProfessionLevel.
     * @example
     * // Delete one ProfessionLevel
     * const ProfessionLevel = await prisma.professionLevel.delete({
     *   where: {
     *     // ... filter to delete one ProfessionLevel
     *   }
     * })
     * 
     */
    delete<T extends ProfessionLevelDeleteArgs>(args: SelectSubset<T, ProfessionLevelDeleteArgs<ExtArgs>>): Prisma__ProfessionLevelClient<$Result.GetResult<Prisma.$ProfessionLevelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProfessionLevel.
     * @param {ProfessionLevelUpdateArgs} args - Arguments to update one ProfessionLevel.
     * @example
     * // Update one ProfessionLevel
     * const professionLevel = await prisma.professionLevel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessionLevelUpdateArgs>(args: SelectSubset<T, ProfessionLevelUpdateArgs<ExtArgs>>): Prisma__ProfessionLevelClient<$Result.GetResult<Prisma.$ProfessionLevelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProfessionLevels.
     * @param {ProfessionLevelDeleteManyArgs} args - Arguments to filter ProfessionLevels to delete.
     * @example
     * // Delete a few ProfessionLevels
     * const { count } = await prisma.professionLevel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessionLevelDeleteManyArgs>(args?: SelectSubset<T, ProfessionLevelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionLevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfessionLevels
     * const professionLevel = await prisma.professionLevel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessionLevelUpdateManyArgs>(args: SelectSubset<T, ProfessionLevelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionLevels and returns the data updated in the database.
     * @param {ProfessionLevelUpdateManyAndReturnArgs} args - Arguments to update many ProfessionLevels.
     * @example
     * // Update many ProfessionLevels
     * const professionLevel = await prisma.professionLevel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProfessionLevels and only return the `id`
     * const professionLevelWithIdOnly = await prisma.professionLevel.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfessionLevelUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfessionLevelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionLevelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProfessionLevel.
     * @param {ProfessionLevelUpsertArgs} args - Arguments to update or create a ProfessionLevel.
     * @example
     * // Update or create a ProfessionLevel
     * const professionLevel = await prisma.professionLevel.upsert({
     *   create: {
     *     // ... data to create a ProfessionLevel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfessionLevel we want to update
     *   }
     * })
     */
    upsert<T extends ProfessionLevelUpsertArgs>(args: SelectSubset<T, ProfessionLevelUpsertArgs<ExtArgs>>): Prisma__ProfessionLevelClient<$Result.GetResult<Prisma.$ProfessionLevelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProfessionLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionLevelCountArgs} args - Arguments to filter ProfessionLevels to count.
     * @example
     * // Count the number of ProfessionLevels
     * const count = await prisma.professionLevel.count({
     *   where: {
     *     // ... the filter for the ProfessionLevels we want to count
     *   }
     * })
    **/
    count<T extends ProfessionLevelCountArgs>(
      args?: Subset<T, ProfessionLevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionLevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfessionLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionLevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionLevelAggregateArgs>(args: Subset<T, ProfessionLevelAggregateArgs>): Prisma.PrismaPromise<GetProfessionLevelAggregateType<T>>

    /**
     * Group by ProfessionLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionLevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessionLevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessionLevelGroupByArgs['orderBy'] }
        : { orderBy?: ProfessionLevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessionLevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfessionLevel model
   */
  readonly fields: ProfessionLevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfessionLevel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessionLevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profession<T extends ProfessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessionDefaultArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    level<T extends LevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LevelDefaultArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfessionLevel model
   */
  interface ProfessionLevelFieldRefs {
    readonly id: FieldRef<"ProfessionLevel", 'String'>
    readonly professionId: FieldRef<"ProfessionLevel", 'String'>
    readonly levelId: FieldRef<"ProfessionLevel", 'String'>
    readonly minWorkingHours: FieldRef<"ProfessionLevel", 'Int'>
    readonly priceHourly: FieldRef<"ProfessionLevel", 'Decimal'>
    readonly priceDaily: FieldRef<"ProfessionLevel", 'Decimal'>
    readonly createdAt: FieldRef<"ProfessionLevel", 'DateTime'>
    readonly updatedAt: FieldRef<"ProfessionLevel", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProfessionLevel findUnique
   */
  export type ProfessionLevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionLevel
     */
    select?: ProfessionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionLevel
     */
    omit?: ProfessionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionLevelInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionLevel to fetch.
     */
    where: ProfessionLevelWhereUniqueInput
  }

  /**
   * ProfessionLevel findUniqueOrThrow
   */
  export type ProfessionLevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionLevel
     */
    select?: ProfessionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionLevel
     */
    omit?: ProfessionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionLevelInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionLevel to fetch.
     */
    where: ProfessionLevelWhereUniqueInput
  }

  /**
   * ProfessionLevel findFirst
   */
  export type ProfessionLevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionLevel
     */
    select?: ProfessionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionLevel
     */
    omit?: ProfessionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionLevelInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionLevel to fetch.
     */
    where?: ProfessionLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionLevels to fetch.
     */
    orderBy?: ProfessionLevelOrderByWithRelationInput | ProfessionLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionLevels.
     */
    cursor?: ProfessionLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionLevels.
     */
    distinct?: ProfessionLevelScalarFieldEnum | ProfessionLevelScalarFieldEnum[]
  }

  /**
   * ProfessionLevel findFirstOrThrow
   */
  export type ProfessionLevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionLevel
     */
    select?: ProfessionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionLevel
     */
    omit?: ProfessionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionLevelInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionLevel to fetch.
     */
    where?: ProfessionLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionLevels to fetch.
     */
    orderBy?: ProfessionLevelOrderByWithRelationInput | ProfessionLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionLevels.
     */
    cursor?: ProfessionLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionLevels.
     */
    distinct?: ProfessionLevelScalarFieldEnum | ProfessionLevelScalarFieldEnum[]
  }

  /**
   * ProfessionLevel findMany
   */
  export type ProfessionLevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionLevel
     */
    select?: ProfessionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionLevel
     */
    omit?: ProfessionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionLevelInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionLevels to fetch.
     */
    where?: ProfessionLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionLevels to fetch.
     */
    orderBy?: ProfessionLevelOrderByWithRelationInput | ProfessionLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfessionLevels.
     */
    cursor?: ProfessionLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionLevels.
     */
    skip?: number
    distinct?: ProfessionLevelScalarFieldEnum | ProfessionLevelScalarFieldEnum[]
  }

  /**
   * ProfessionLevel create
   */
  export type ProfessionLevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionLevel
     */
    select?: ProfessionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionLevel
     */
    omit?: ProfessionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionLevelInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfessionLevel.
     */
    data: XOR<ProfessionLevelCreateInput, ProfessionLevelUncheckedCreateInput>
  }

  /**
   * ProfessionLevel createMany
   */
  export type ProfessionLevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfessionLevels.
     */
    data: ProfessionLevelCreateManyInput | ProfessionLevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfessionLevel createManyAndReturn
   */
  export type ProfessionLevelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionLevel
     */
    select?: ProfessionLevelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionLevel
     */
    omit?: ProfessionLevelOmit<ExtArgs> | null
    /**
     * The data used to create many ProfessionLevels.
     */
    data: ProfessionLevelCreateManyInput | ProfessionLevelCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionLevelIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfessionLevel update
   */
  export type ProfessionLevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionLevel
     */
    select?: ProfessionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionLevel
     */
    omit?: ProfessionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionLevelInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfessionLevel.
     */
    data: XOR<ProfessionLevelUpdateInput, ProfessionLevelUncheckedUpdateInput>
    /**
     * Choose, which ProfessionLevel to update.
     */
    where: ProfessionLevelWhereUniqueInput
  }

  /**
   * ProfessionLevel updateMany
   */
  export type ProfessionLevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfessionLevels.
     */
    data: XOR<ProfessionLevelUpdateManyMutationInput, ProfessionLevelUncheckedUpdateManyInput>
    /**
     * Filter which ProfessionLevels to update
     */
    where?: ProfessionLevelWhereInput
    /**
     * Limit how many ProfessionLevels to update.
     */
    limit?: number
  }

  /**
   * ProfessionLevel updateManyAndReturn
   */
  export type ProfessionLevelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionLevel
     */
    select?: ProfessionLevelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionLevel
     */
    omit?: ProfessionLevelOmit<ExtArgs> | null
    /**
     * The data used to update ProfessionLevels.
     */
    data: XOR<ProfessionLevelUpdateManyMutationInput, ProfessionLevelUncheckedUpdateManyInput>
    /**
     * Filter which ProfessionLevels to update
     */
    where?: ProfessionLevelWhereInput
    /**
     * Limit how many ProfessionLevels to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionLevelIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfessionLevel upsert
   */
  export type ProfessionLevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionLevel
     */
    select?: ProfessionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionLevel
     */
    omit?: ProfessionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionLevelInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfessionLevel to update in case it exists.
     */
    where: ProfessionLevelWhereUniqueInput
    /**
     * In case the ProfessionLevel found by the `where` argument doesn't exist, create a new ProfessionLevel with this data.
     */
    create: XOR<ProfessionLevelCreateInput, ProfessionLevelUncheckedCreateInput>
    /**
     * In case the ProfessionLevel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessionLevelUpdateInput, ProfessionLevelUncheckedUpdateInput>
  }

  /**
   * ProfessionLevel delete
   */
  export type ProfessionLevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionLevel
     */
    select?: ProfessionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionLevel
     */
    omit?: ProfessionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionLevelInclude<ExtArgs> | null
    /**
     * Filter which ProfessionLevel to delete.
     */
    where: ProfessionLevelWhereUniqueInput
  }

  /**
   * ProfessionLevel deleteMany
   */
  export type ProfessionLevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionLevels to delete
     */
    where?: ProfessionLevelWhereInput
    /**
     * Limit how many ProfessionLevels to delete.
     */
    limit?: number
  }

  /**
   * ProfessionLevel without action
   */
  export type ProfessionLevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionLevel
     */
    select?: ProfessionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionLevel
     */
    omit?: ProfessionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionLevelInclude<ExtArgs> | null
  }


  /**
   * Model ProfessionTool
   */

  export type AggregateProfessionTool = {
    _count: ProfessionToolCountAggregateOutputType | null
    _min: ProfessionToolMinAggregateOutputType | null
    _max: ProfessionToolMaxAggregateOutputType | null
  }

  export type ProfessionToolMinAggregateOutputType = {
    id: string | null
    professionId: string | null
    toolId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessionToolMaxAggregateOutputType = {
    id: string | null
    professionId: string | null
    toolId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessionToolCountAggregateOutputType = {
    id: number
    professionId: number
    toolId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfessionToolMinAggregateInputType = {
    id?: true
    professionId?: true
    toolId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessionToolMaxAggregateInputType = {
    id?: true
    professionId?: true
    toolId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessionToolCountAggregateInputType = {
    id?: true
    professionId?: true
    toolId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfessionToolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionTool to aggregate.
     */
    where?: ProfessionToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionTools to fetch.
     */
    orderBy?: ProfessionToolOrderByWithRelationInput | ProfessionToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessionToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionTools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionTools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfessionTools
    **/
    _count?: true | ProfessionToolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionToolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionToolMaxAggregateInputType
  }

  export type GetProfessionToolAggregateType<T extends ProfessionToolAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessionTool]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessionTool[P]>
      : GetScalarType<T[P], AggregateProfessionTool[P]>
  }




  export type ProfessionToolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionToolWhereInput
    orderBy?: ProfessionToolOrderByWithAggregationInput | ProfessionToolOrderByWithAggregationInput[]
    by: ProfessionToolScalarFieldEnum[] | ProfessionToolScalarFieldEnum
    having?: ProfessionToolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionToolCountAggregateInputType | true
    _min?: ProfessionToolMinAggregateInputType
    _max?: ProfessionToolMaxAggregateInputType
  }

  export type ProfessionToolGroupByOutputType = {
    id: string
    professionId: string
    toolId: string
    createdAt: Date
    updatedAt: Date
    _count: ProfessionToolCountAggregateOutputType | null
    _min: ProfessionToolMinAggregateOutputType | null
    _max: ProfessionToolMaxAggregateOutputType | null
  }

  type GetProfessionToolGroupByPayload<T extends ProfessionToolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionToolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionToolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionToolGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionToolGroupByOutputType[P]>
        }
      >
    >


  export type ProfessionToolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionId?: boolean
    toolId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionTool"]>

  export type ProfessionToolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionId?: boolean
    toolId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionTool"]>

  export type ProfessionToolSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionId?: boolean
    toolId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionTool"]>

  export type ProfessionToolSelectScalar = {
    id?: boolean
    professionId?: boolean
    toolId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfessionToolOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "professionId" | "toolId" | "createdAt" | "updatedAt", ExtArgs["result"]["professionTool"]>
  export type ProfessionToolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
  }
  export type ProfessionToolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
  }
  export type ProfessionToolIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
  }

  export type $ProfessionToolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfessionTool"
    objects: {
      profession: Prisma.$ProfessionPayload<ExtArgs>
      tool: Prisma.$ToolPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      professionId: string
      toolId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["professionTool"]>
    composites: {}
  }

  type ProfessionToolGetPayload<S extends boolean | null | undefined | ProfessionToolDefaultArgs> = $Result.GetResult<Prisma.$ProfessionToolPayload, S>

  type ProfessionToolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfessionToolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessionToolCountAggregateInputType | true
    }

  export interface ProfessionToolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfessionTool'], meta: { name: 'ProfessionTool' } }
    /**
     * Find zero or one ProfessionTool that matches the filter.
     * @param {ProfessionToolFindUniqueArgs} args - Arguments to find a ProfessionTool
     * @example
     * // Get one ProfessionTool
     * const professionTool = await prisma.professionTool.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessionToolFindUniqueArgs>(args: SelectSubset<T, ProfessionToolFindUniqueArgs<ExtArgs>>): Prisma__ProfessionToolClient<$Result.GetResult<Prisma.$ProfessionToolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProfessionTool that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfessionToolFindUniqueOrThrowArgs} args - Arguments to find a ProfessionTool
     * @example
     * // Get one ProfessionTool
     * const professionTool = await prisma.professionTool.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessionToolFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessionToolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessionToolClient<$Result.GetResult<Prisma.$ProfessionToolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessionTool that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionToolFindFirstArgs} args - Arguments to find a ProfessionTool
     * @example
     * // Get one ProfessionTool
     * const professionTool = await prisma.professionTool.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessionToolFindFirstArgs>(args?: SelectSubset<T, ProfessionToolFindFirstArgs<ExtArgs>>): Prisma__ProfessionToolClient<$Result.GetResult<Prisma.$ProfessionToolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessionTool that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionToolFindFirstOrThrowArgs} args - Arguments to find a ProfessionTool
     * @example
     * // Get one ProfessionTool
     * const professionTool = await prisma.professionTool.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessionToolFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessionToolFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessionToolClient<$Result.GetResult<Prisma.$ProfessionToolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProfessionTools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionToolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfessionTools
     * const professionTools = await prisma.professionTool.findMany()
     * 
     * // Get first 10 ProfessionTools
     * const professionTools = await prisma.professionTool.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionToolWithIdOnly = await prisma.professionTool.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessionToolFindManyArgs>(args?: SelectSubset<T, ProfessionToolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProfessionTool.
     * @param {ProfessionToolCreateArgs} args - Arguments to create a ProfessionTool.
     * @example
     * // Create one ProfessionTool
     * const ProfessionTool = await prisma.professionTool.create({
     *   data: {
     *     // ... data to create a ProfessionTool
     *   }
     * })
     * 
     */
    create<T extends ProfessionToolCreateArgs>(args: SelectSubset<T, ProfessionToolCreateArgs<ExtArgs>>): Prisma__ProfessionToolClient<$Result.GetResult<Prisma.$ProfessionToolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProfessionTools.
     * @param {ProfessionToolCreateManyArgs} args - Arguments to create many ProfessionTools.
     * @example
     * // Create many ProfessionTools
     * const professionTool = await prisma.professionTool.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessionToolCreateManyArgs>(args?: SelectSubset<T, ProfessionToolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProfessionTools and returns the data saved in the database.
     * @param {ProfessionToolCreateManyAndReturnArgs} args - Arguments to create many ProfessionTools.
     * @example
     * // Create many ProfessionTools
     * const professionTool = await prisma.professionTool.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProfessionTools and only return the `id`
     * const professionToolWithIdOnly = await prisma.professionTool.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessionToolCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessionToolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionToolPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProfessionTool.
     * @param {ProfessionToolDeleteArgs} args - Arguments to delete one ProfessionTool.
     * @example
     * // Delete one ProfessionTool
     * const ProfessionTool = await prisma.professionTool.delete({
     *   where: {
     *     // ... filter to delete one ProfessionTool
     *   }
     * })
     * 
     */
    delete<T extends ProfessionToolDeleteArgs>(args: SelectSubset<T, ProfessionToolDeleteArgs<ExtArgs>>): Prisma__ProfessionToolClient<$Result.GetResult<Prisma.$ProfessionToolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProfessionTool.
     * @param {ProfessionToolUpdateArgs} args - Arguments to update one ProfessionTool.
     * @example
     * // Update one ProfessionTool
     * const professionTool = await prisma.professionTool.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessionToolUpdateArgs>(args: SelectSubset<T, ProfessionToolUpdateArgs<ExtArgs>>): Prisma__ProfessionToolClient<$Result.GetResult<Prisma.$ProfessionToolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProfessionTools.
     * @param {ProfessionToolDeleteManyArgs} args - Arguments to filter ProfessionTools to delete.
     * @example
     * // Delete a few ProfessionTools
     * const { count } = await prisma.professionTool.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessionToolDeleteManyArgs>(args?: SelectSubset<T, ProfessionToolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionTools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionToolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfessionTools
     * const professionTool = await prisma.professionTool.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessionToolUpdateManyArgs>(args: SelectSubset<T, ProfessionToolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionTools and returns the data updated in the database.
     * @param {ProfessionToolUpdateManyAndReturnArgs} args - Arguments to update many ProfessionTools.
     * @example
     * // Update many ProfessionTools
     * const professionTool = await prisma.professionTool.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProfessionTools and only return the `id`
     * const professionToolWithIdOnly = await prisma.professionTool.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfessionToolUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfessionToolUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionToolPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProfessionTool.
     * @param {ProfessionToolUpsertArgs} args - Arguments to update or create a ProfessionTool.
     * @example
     * // Update or create a ProfessionTool
     * const professionTool = await prisma.professionTool.upsert({
     *   create: {
     *     // ... data to create a ProfessionTool
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfessionTool we want to update
     *   }
     * })
     */
    upsert<T extends ProfessionToolUpsertArgs>(args: SelectSubset<T, ProfessionToolUpsertArgs<ExtArgs>>): Prisma__ProfessionToolClient<$Result.GetResult<Prisma.$ProfessionToolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProfessionTools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionToolCountArgs} args - Arguments to filter ProfessionTools to count.
     * @example
     * // Count the number of ProfessionTools
     * const count = await prisma.professionTool.count({
     *   where: {
     *     // ... the filter for the ProfessionTools we want to count
     *   }
     * })
    **/
    count<T extends ProfessionToolCountArgs>(
      args?: Subset<T, ProfessionToolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionToolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfessionTool.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionToolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionToolAggregateArgs>(args: Subset<T, ProfessionToolAggregateArgs>): Prisma.PrismaPromise<GetProfessionToolAggregateType<T>>

    /**
     * Group by ProfessionTool.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionToolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessionToolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessionToolGroupByArgs['orderBy'] }
        : { orderBy?: ProfessionToolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessionToolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionToolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfessionTool model
   */
  readonly fields: ProfessionToolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfessionTool.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessionToolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profession<T extends ProfessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessionDefaultArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tool<T extends ToolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ToolDefaultArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfessionTool model
   */
  interface ProfessionToolFieldRefs {
    readonly id: FieldRef<"ProfessionTool", 'String'>
    readonly professionId: FieldRef<"ProfessionTool", 'String'>
    readonly toolId: FieldRef<"ProfessionTool", 'String'>
    readonly createdAt: FieldRef<"ProfessionTool", 'DateTime'>
    readonly updatedAt: FieldRef<"ProfessionTool", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProfessionTool findUnique
   */
  export type ProfessionToolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionTool
     */
    select?: ProfessionToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionTool
     */
    omit?: ProfessionToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionToolInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionTool to fetch.
     */
    where: ProfessionToolWhereUniqueInput
  }

  /**
   * ProfessionTool findUniqueOrThrow
   */
  export type ProfessionToolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionTool
     */
    select?: ProfessionToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionTool
     */
    omit?: ProfessionToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionToolInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionTool to fetch.
     */
    where: ProfessionToolWhereUniqueInput
  }

  /**
   * ProfessionTool findFirst
   */
  export type ProfessionToolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionTool
     */
    select?: ProfessionToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionTool
     */
    omit?: ProfessionToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionToolInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionTool to fetch.
     */
    where?: ProfessionToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionTools to fetch.
     */
    orderBy?: ProfessionToolOrderByWithRelationInput | ProfessionToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionTools.
     */
    cursor?: ProfessionToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionTools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionTools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionTools.
     */
    distinct?: ProfessionToolScalarFieldEnum | ProfessionToolScalarFieldEnum[]
  }

  /**
   * ProfessionTool findFirstOrThrow
   */
  export type ProfessionToolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionTool
     */
    select?: ProfessionToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionTool
     */
    omit?: ProfessionToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionToolInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionTool to fetch.
     */
    where?: ProfessionToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionTools to fetch.
     */
    orderBy?: ProfessionToolOrderByWithRelationInput | ProfessionToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionTools.
     */
    cursor?: ProfessionToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionTools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionTools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionTools.
     */
    distinct?: ProfessionToolScalarFieldEnum | ProfessionToolScalarFieldEnum[]
  }

  /**
   * ProfessionTool findMany
   */
  export type ProfessionToolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionTool
     */
    select?: ProfessionToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionTool
     */
    omit?: ProfessionToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionToolInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionTools to fetch.
     */
    where?: ProfessionToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionTools to fetch.
     */
    orderBy?: ProfessionToolOrderByWithRelationInput | ProfessionToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfessionTools.
     */
    cursor?: ProfessionToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionTools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionTools.
     */
    skip?: number
    distinct?: ProfessionToolScalarFieldEnum | ProfessionToolScalarFieldEnum[]
  }

  /**
   * ProfessionTool create
   */
  export type ProfessionToolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionTool
     */
    select?: ProfessionToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionTool
     */
    omit?: ProfessionToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionToolInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfessionTool.
     */
    data: XOR<ProfessionToolCreateInput, ProfessionToolUncheckedCreateInput>
  }

  /**
   * ProfessionTool createMany
   */
  export type ProfessionToolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfessionTools.
     */
    data: ProfessionToolCreateManyInput | ProfessionToolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfessionTool createManyAndReturn
   */
  export type ProfessionToolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionTool
     */
    select?: ProfessionToolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionTool
     */
    omit?: ProfessionToolOmit<ExtArgs> | null
    /**
     * The data used to create many ProfessionTools.
     */
    data: ProfessionToolCreateManyInput | ProfessionToolCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionToolIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfessionTool update
   */
  export type ProfessionToolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionTool
     */
    select?: ProfessionToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionTool
     */
    omit?: ProfessionToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionToolInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfessionTool.
     */
    data: XOR<ProfessionToolUpdateInput, ProfessionToolUncheckedUpdateInput>
    /**
     * Choose, which ProfessionTool to update.
     */
    where: ProfessionToolWhereUniqueInput
  }

  /**
   * ProfessionTool updateMany
   */
  export type ProfessionToolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfessionTools.
     */
    data: XOR<ProfessionToolUpdateManyMutationInput, ProfessionToolUncheckedUpdateManyInput>
    /**
     * Filter which ProfessionTools to update
     */
    where?: ProfessionToolWhereInput
    /**
     * Limit how many ProfessionTools to update.
     */
    limit?: number
  }

  /**
   * ProfessionTool updateManyAndReturn
   */
  export type ProfessionToolUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionTool
     */
    select?: ProfessionToolSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionTool
     */
    omit?: ProfessionToolOmit<ExtArgs> | null
    /**
     * The data used to update ProfessionTools.
     */
    data: XOR<ProfessionToolUpdateManyMutationInput, ProfessionToolUncheckedUpdateManyInput>
    /**
     * Filter which ProfessionTools to update
     */
    where?: ProfessionToolWhereInput
    /**
     * Limit how many ProfessionTools to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionToolIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfessionTool upsert
   */
  export type ProfessionToolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionTool
     */
    select?: ProfessionToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionTool
     */
    omit?: ProfessionToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionToolInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfessionTool to update in case it exists.
     */
    where: ProfessionToolWhereUniqueInput
    /**
     * In case the ProfessionTool found by the `where` argument doesn't exist, create a new ProfessionTool with this data.
     */
    create: XOR<ProfessionToolCreateInput, ProfessionToolUncheckedCreateInput>
    /**
     * In case the ProfessionTool was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessionToolUpdateInput, ProfessionToolUncheckedUpdateInput>
  }

  /**
   * ProfessionTool delete
   */
  export type ProfessionToolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionTool
     */
    select?: ProfessionToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionTool
     */
    omit?: ProfessionToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionToolInclude<ExtArgs> | null
    /**
     * Filter which ProfessionTool to delete.
     */
    where: ProfessionToolWhereUniqueInput
  }

  /**
   * ProfessionTool deleteMany
   */
  export type ProfessionToolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionTools to delete
     */
    where?: ProfessionToolWhereInput
    /**
     * Limit how many ProfessionTools to delete.
     */
    limit?: number
  }

  /**
   * ProfessionTool without action
   */
  export type ProfessionToolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionTool
     */
    select?: ProfessionToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionTool
     */
    omit?: ProfessionToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionToolInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    totalPrice: Decimal | null
  }

  export type OrderSumAggregateOutputType = {
    totalPrice: Decimal | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    ownerId: string | null
    address: string | null
    latitude: string | null
    longitude: string | null
    date: Date | null
    totalPrice: Decimal | null
    isPaid: boolean | null
    paymentType: $Enums.PaymentType | null
    withDelivery: boolean | null
    status: $Enums.OrderStatus | null
    deliveryComment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    ownerId: string | null
    address: string | null
    latitude: string | null
    longitude: string | null
    date: Date | null
    totalPrice: Decimal | null
    isPaid: boolean | null
    paymentType: $Enums.PaymentType | null
    withDelivery: boolean | null
    status: $Enums.OrderStatus | null
    deliveryComment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    ownerId: number
    address: number
    latitude: number
    longitude: number
    date: number
    totalPrice: number
    isPaid: number
    paymentType: number
    withDelivery: number
    status: number
    deliveryComment: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    totalPrice?: true
  }

  export type OrderSumAggregateInputType = {
    totalPrice?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    ownerId?: true
    address?: true
    latitude?: true
    longitude?: true
    date?: true
    totalPrice?: true
    isPaid?: true
    paymentType?: true
    withDelivery?: true
    status?: true
    deliveryComment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    ownerId?: true
    address?: true
    latitude?: true
    longitude?: true
    date?: true
    totalPrice?: true
    isPaid?: true
    paymentType?: true
    withDelivery?: true
    status?: true
    deliveryComment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    ownerId?: true
    address?: true
    latitude?: true
    longitude?: true
    date?: true
    totalPrice?: true
    isPaid?: true
    paymentType?: true
    withDelivery?: true
    status?: true
    deliveryComment?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: string
    ownerId: string
    address: string
    latitude: string
    longitude: string
    date: Date
    totalPrice: Decimal
    isPaid: boolean
    paymentType: $Enums.PaymentType
    withDelivery: boolean
    status: $Enums.OrderStatus
    deliveryComment: string
    createdAt: Date
    updatedAt: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    date?: boolean
    totalPrice?: boolean
    isPaid?: boolean
    paymentType?: boolean
    withDelivery?: boolean
    status?: boolean
    deliveryComment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderProducts?: boolean | Order$orderProductsArgs<ExtArgs>
    comments?: boolean | Order$commentsArgs<ExtArgs>
    masters?: boolean | Order$mastersArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    date?: boolean
    totalPrice?: boolean
    isPaid?: boolean
    paymentType?: boolean
    withDelivery?: boolean
    status?: boolean
    deliveryComment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    date?: boolean
    totalPrice?: boolean
    isPaid?: boolean
    paymentType?: boolean
    withDelivery?: boolean
    status?: boolean
    deliveryComment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    ownerId?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    date?: boolean
    totalPrice?: boolean
    isPaid?: boolean
    paymentType?: boolean
    withDelivery?: boolean
    status?: boolean
    deliveryComment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ownerId" | "address" | "latitude" | "longitude" | "date" | "totalPrice" | "isPaid" | "paymentType" | "withDelivery" | "status" | "deliveryComment" | "createdAt" | "updatedAt", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderProducts?: boolean | Order$orderProductsArgs<ExtArgs>
    comments?: boolean | Order$commentsArgs<ExtArgs>
    masters?: boolean | Order$mastersArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      orderProducts: Prisma.$OrderProductPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      masters: Prisma.$OrderMasterPayload<ExtArgs>[]
      owner: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ownerId: string
      address: string
      latitude: string
      longitude: string
      date: Date
      totalPrice: Prisma.Decimal
      isPaid: boolean
      paymentType: $Enums.PaymentType
      withDelivery: boolean
      status: $Enums.OrderStatus
      deliveryComment: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {OrderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orderProducts<T extends Order$orderProductsArgs<ExtArgs> = {}>(args?: Subset<T, Order$orderProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Order$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Order$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    masters<T extends Order$mastersArgs<ExtArgs> = {}>(args?: Subset<T, Order$mastersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderMasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'String'>
    readonly ownerId: FieldRef<"Order", 'String'>
    readonly address: FieldRef<"Order", 'String'>
    readonly latitude: FieldRef<"Order", 'String'>
    readonly longitude: FieldRef<"Order", 'String'>
    readonly date: FieldRef<"Order", 'DateTime'>
    readonly totalPrice: FieldRef<"Order", 'Decimal'>
    readonly isPaid: FieldRef<"Order", 'Boolean'>
    readonly paymentType: FieldRef<"Order", 'PaymentType'>
    readonly withDelivery: FieldRef<"Order", 'Boolean'>
    readonly status: FieldRef<"Order", 'OrderStatus'>
    readonly deliveryComment: FieldRef<"Order", 'String'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order updateManyAndReturn
   */
  export type OrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.orderProducts
   */
  export type Order$orderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null
    where?: OrderProductWhereInput
    orderBy?: OrderProductOrderByWithRelationInput | OrderProductOrderByWithRelationInput[]
    cursor?: OrderProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[]
  }

  /**
   * Order.comments
   */
  export type Order$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Order.masters
   */
  export type Order$mastersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMaster
     */
    select?: OrderMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMaster
     */
    omit?: OrderMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMasterInclude<ExtArgs> | null
    where?: OrderMasterWhereInput
    orderBy?: OrderMasterOrderByWithRelationInput | OrderMasterOrderByWithRelationInput[]
    cursor?: OrderMasterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderMasterScalarFieldEnum | OrderMasterScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderProduct
   */

  export type AggregateOrderProduct = {
    _count: OrderProductCountAggregateOutputType | null
    _avg: OrderProductAvgAggregateOutputType | null
    _sum: OrderProductSumAggregateOutputType | null
    _min: OrderProductMinAggregateOutputType | null
    _max: OrderProductMaxAggregateOutputType | null
  }

  export type OrderProductAvgAggregateOutputType = {
    quantity: number | null
    workingTime: number | null
    price: Decimal | null
  }

  export type OrderProductSumAggregateOutputType = {
    quantity: number | null
    workingTime: number | null
    price: Decimal | null
  }

  export type OrderProductMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    professionId: string | null
    toolId: string | null
    levelId: string | null
    quantity: number | null
    timeUnit: $Enums.TimeUnit | null
    workingTime: number | null
    price: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderProductMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    professionId: string | null
    toolId: string | null
    levelId: string | null
    quantity: number | null
    timeUnit: $Enums.TimeUnit | null
    workingTime: number | null
    price: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderProductCountAggregateOutputType = {
    id: number
    orderId: number
    professionId: number
    toolId: number
    levelId: number
    quantity: number
    timeUnit: number
    workingTime: number
    price: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderProductAvgAggregateInputType = {
    quantity?: true
    workingTime?: true
    price?: true
  }

  export type OrderProductSumAggregateInputType = {
    quantity?: true
    workingTime?: true
    price?: true
  }

  export type OrderProductMinAggregateInputType = {
    id?: true
    orderId?: true
    professionId?: true
    toolId?: true
    levelId?: true
    quantity?: true
    timeUnit?: true
    workingTime?: true
    price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderProductMaxAggregateInputType = {
    id?: true
    orderId?: true
    professionId?: true
    toolId?: true
    levelId?: true
    quantity?: true
    timeUnit?: true
    workingTime?: true
    price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderProductCountAggregateInputType = {
    id?: true
    orderId?: true
    professionId?: true
    toolId?: true
    levelId?: true
    quantity?: true
    timeUnit?: true
    workingTime?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderProduct to aggregate.
     */
    where?: OrderProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderProducts to fetch.
     */
    orderBy?: OrderProductOrderByWithRelationInput | OrderProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderProducts
    **/
    _count?: true | OrderProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderProductMaxAggregateInputType
  }

  export type GetOrderProductAggregateType<T extends OrderProductAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderProduct[P]>
      : GetScalarType<T[P], AggregateOrderProduct[P]>
  }




  export type OrderProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderProductWhereInput
    orderBy?: OrderProductOrderByWithAggregationInput | OrderProductOrderByWithAggregationInput[]
    by: OrderProductScalarFieldEnum[] | OrderProductScalarFieldEnum
    having?: OrderProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderProductCountAggregateInputType | true
    _avg?: OrderProductAvgAggregateInputType
    _sum?: OrderProductSumAggregateInputType
    _min?: OrderProductMinAggregateInputType
    _max?: OrderProductMaxAggregateInputType
  }

  export type OrderProductGroupByOutputType = {
    id: string
    orderId: string
    professionId: string | null
    toolId: string | null
    levelId: string | null
    quantity: number
    timeUnit: $Enums.TimeUnit | null
    workingTime: number | null
    price: Decimal
    createdAt: Date
    updatedAt: Date
    _count: OrderProductCountAggregateOutputType | null
    _avg: OrderProductAvgAggregateOutputType | null
    _sum: OrderProductSumAggregateOutputType | null
    _min: OrderProductMinAggregateOutputType | null
    _max: OrderProductMaxAggregateOutputType | null
  }

  type GetOrderProductGroupByPayload<T extends OrderProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderProductGroupByOutputType[P]>
            : GetScalarType<T[P], OrderProductGroupByOutputType[P]>
        }
      >
    >


  export type OrderProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    professionId?: boolean
    toolId?: boolean
    levelId?: boolean
    quantity?: boolean
    timeUnit?: boolean
    workingTime?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    profession?: boolean | OrderProduct$professionArgs<ExtArgs>
    tool?: boolean | OrderProduct$toolArgs<ExtArgs>
    level?: boolean | OrderProduct$levelArgs<ExtArgs>
  }, ExtArgs["result"]["orderProduct"]>

  export type OrderProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    professionId?: boolean
    toolId?: boolean
    levelId?: boolean
    quantity?: boolean
    timeUnit?: boolean
    workingTime?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    profession?: boolean | OrderProduct$professionArgs<ExtArgs>
    tool?: boolean | OrderProduct$toolArgs<ExtArgs>
    level?: boolean | OrderProduct$levelArgs<ExtArgs>
  }, ExtArgs["result"]["orderProduct"]>

  export type OrderProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    professionId?: boolean
    toolId?: boolean
    levelId?: boolean
    quantity?: boolean
    timeUnit?: boolean
    workingTime?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    profession?: boolean | OrderProduct$professionArgs<ExtArgs>
    tool?: boolean | OrderProduct$toolArgs<ExtArgs>
    level?: boolean | OrderProduct$levelArgs<ExtArgs>
  }, ExtArgs["result"]["orderProduct"]>

  export type OrderProductSelectScalar = {
    id?: boolean
    orderId?: boolean
    professionId?: boolean
    toolId?: boolean
    levelId?: boolean
    quantity?: boolean
    timeUnit?: boolean
    workingTime?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrderProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "professionId" | "toolId" | "levelId" | "quantity" | "timeUnit" | "workingTime" | "price" | "createdAt" | "updatedAt", ExtArgs["result"]["orderProduct"]>
  export type OrderProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    profession?: boolean | OrderProduct$professionArgs<ExtArgs>
    tool?: boolean | OrderProduct$toolArgs<ExtArgs>
    level?: boolean | OrderProduct$levelArgs<ExtArgs>
  }
  export type OrderProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    profession?: boolean | OrderProduct$professionArgs<ExtArgs>
    tool?: boolean | OrderProduct$toolArgs<ExtArgs>
    level?: boolean | OrderProduct$levelArgs<ExtArgs>
  }
  export type OrderProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    profession?: boolean | OrderProduct$professionArgs<ExtArgs>
    tool?: boolean | OrderProduct$toolArgs<ExtArgs>
    level?: boolean | OrderProduct$levelArgs<ExtArgs>
  }

  export type $OrderProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderProduct"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      profession: Prisma.$ProfessionPayload<ExtArgs> | null
      tool: Prisma.$ToolPayload<ExtArgs> | null
      level: Prisma.$LevelPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderId: string
      professionId: string | null
      toolId: string | null
      levelId: string | null
      quantity: number
      timeUnit: $Enums.TimeUnit | null
      workingTime: number | null
      price: Prisma.Decimal
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["orderProduct"]>
    composites: {}
  }

  type OrderProductGetPayload<S extends boolean | null | undefined | OrderProductDefaultArgs> = $Result.GetResult<Prisma.$OrderProductPayload, S>

  type OrderProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderProductCountAggregateInputType | true
    }

  export interface OrderProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderProduct'], meta: { name: 'OrderProduct' } }
    /**
     * Find zero or one OrderProduct that matches the filter.
     * @param {OrderProductFindUniqueArgs} args - Arguments to find a OrderProduct
     * @example
     * // Get one OrderProduct
     * const orderProduct = await prisma.orderProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderProductFindUniqueArgs>(args: SelectSubset<T, OrderProductFindUniqueArgs<ExtArgs>>): Prisma__OrderProductClient<$Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderProduct that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderProductFindUniqueOrThrowArgs} args - Arguments to find a OrderProduct
     * @example
     * // Get one OrderProduct
     * const orderProduct = await prisma.orderProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderProductFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderProductClient<$Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductFindFirstArgs} args - Arguments to find a OrderProduct
     * @example
     * // Get one OrderProduct
     * const orderProduct = await prisma.orderProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderProductFindFirstArgs>(args?: SelectSubset<T, OrderProductFindFirstArgs<ExtArgs>>): Prisma__OrderProductClient<$Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductFindFirstOrThrowArgs} args - Arguments to find a OrderProduct
     * @example
     * // Get one OrderProduct
     * const orderProduct = await prisma.orderProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderProductFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderProductClient<$Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderProducts
     * const orderProducts = await prisma.orderProduct.findMany()
     * 
     * // Get first 10 OrderProducts
     * const orderProducts = await prisma.orderProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderProductWithIdOnly = await prisma.orderProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderProductFindManyArgs>(args?: SelectSubset<T, OrderProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderProduct.
     * @param {OrderProductCreateArgs} args - Arguments to create a OrderProduct.
     * @example
     * // Create one OrderProduct
     * const OrderProduct = await prisma.orderProduct.create({
     *   data: {
     *     // ... data to create a OrderProduct
     *   }
     * })
     * 
     */
    create<T extends OrderProductCreateArgs>(args: SelectSubset<T, OrderProductCreateArgs<ExtArgs>>): Prisma__OrderProductClient<$Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderProducts.
     * @param {OrderProductCreateManyArgs} args - Arguments to create many OrderProducts.
     * @example
     * // Create many OrderProducts
     * const orderProduct = await prisma.orderProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderProductCreateManyArgs>(args?: SelectSubset<T, OrderProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderProducts and returns the data saved in the database.
     * @param {OrderProductCreateManyAndReturnArgs} args - Arguments to create many OrderProducts.
     * @example
     * // Create many OrderProducts
     * const orderProduct = await prisma.orderProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderProducts and only return the `id`
     * const orderProductWithIdOnly = await prisma.orderProduct.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderProductCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderProduct.
     * @param {OrderProductDeleteArgs} args - Arguments to delete one OrderProduct.
     * @example
     * // Delete one OrderProduct
     * const OrderProduct = await prisma.orderProduct.delete({
     *   where: {
     *     // ... filter to delete one OrderProduct
     *   }
     * })
     * 
     */
    delete<T extends OrderProductDeleteArgs>(args: SelectSubset<T, OrderProductDeleteArgs<ExtArgs>>): Prisma__OrderProductClient<$Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderProduct.
     * @param {OrderProductUpdateArgs} args - Arguments to update one OrderProduct.
     * @example
     * // Update one OrderProduct
     * const orderProduct = await prisma.orderProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderProductUpdateArgs>(args: SelectSubset<T, OrderProductUpdateArgs<ExtArgs>>): Prisma__OrderProductClient<$Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderProducts.
     * @param {OrderProductDeleteManyArgs} args - Arguments to filter OrderProducts to delete.
     * @example
     * // Delete a few OrderProducts
     * const { count } = await prisma.orderProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderProductDeleteManyArgs>(args?: SelectSubset<T, OrderProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderProducts
     * const orderProduct = await prisma.orderProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderProductUpdateManyArgs>(args: SelectSubset<T, OrderProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderProducts and returns the data updated in the database.
     * @param {OrderProductUpdateManyAndReturnArgs} args - Arguments to update many OrderProducts.
     * @example
     * // Update many OrderProducts
     * const orderProduct = await prisma.orderProduct.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderProducts and only return the `id`
     * const orderProductWithIdOnly = await prisma.orderProduct.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderProductUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderProduct.
     * @param {OrderProductUpsertArgs} args - Arguments to update or create a OrderProduct.
     * @example
     * // Update or create a OrderProduct
     * const orderProduct = await prisma.orderProduct.upsert({
     *   create: {
     *     // ... data to create a OrderProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderProduct we want to update
     *   }
     * })
     */
    upsert<T extends OrderProductUpsertArgs>(args: SelectSubset<T, OrderProductUpsertArgs<ExtArgs>>): Prisma__OrderProductClient<$Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductCountArgs} args - Arguments to filter OrderProducts to count.
     * @example
     * // Count the number of OrderProducts
     * const count = await prisma.orderProduct.count({
     *   where: {
     *     // ... the filter for the OrderProducts we want to count
     *   }
     * })
    **/
    count<T extends OrderProductCountArgs>(
      args?: Subset<T, OrderProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderProductAggregateArgs>(args: Subset<T, OrderProductAggregateArgs>): Prisma.PrismaPromise<GetOrderProductAggregateType<T>>

    /**
     * Group by OrderProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderProductGroupByArgs['orderBy'] }
        : { orderBy?: OrderProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderProduct model
   */
  readonly fields: OrderProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profession<T extends OrderProduct$professionArgs<ExtArgs> = {}>(args?: Subset<T, OrderProduct$professionArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tool<T extends OrderProduct$toolArgs<ExtArgs> = {}>(args?: Subset<T, OrderProduct$toolArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    level<T extends OrderProduct$levelArgs<ExtArgs> = {}>(args?: Subset<T, OrderProduct$levelArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderProduct model
   */
  interface OrderProductFieldRefs {
    readonly id: FieldRef<"OrderProduct", 'String'>
    readonly orderId: FieldRef<"OrderProduct", 'String'>
    readonly professionId: FieldRef<"OrderProduct", 'String'>
    readonly toolId: FieldRef<"OrderProduct", 'String'>
    readonly levelId: FieldRef<"OrderProduct", 'String'>
    readonly quantity: FieldRef<"OrderProduct", 'Int'>
    readonly timeUnit: FieldRef<"OrderProduct", 'TimeUnit'>
    readonly workingTime: FieldRef<"OrderProduct", 'Float'>
    readonly price: FieldRef<"OrderProduct", 'Decimal'>
    readonly createdAt: FieldRef<"OrderProduct", 'DateTime'>
    readonly updatedAt: FieldRef<"OrderProduct", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OrderProduct findUnique
   */
  export type OrderProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null
    /**
     * Filter, which OrderProduct to fetch.
     */
    where: OrderProductWhereUniqueInput
  }

  /**
   * OrderProduct findUniqueOrThrow
   */
  export type OrderProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null
    /**
     * Filter, which OrderProduct to fetch.
     */
    where: OrderProductWhereUniqueInput
  }

  /**
   * OrderProduct findFirst
   */
  export type OrderProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null
    /**
     * Filter, which OrderProduct to fetch.
     */
    where?: OrderProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderProducts to fetch.
     */
    orderBy?: OrderProductOrderByWithRelationInput | OrderProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderProducts.
     */
    cursor?: OrderProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderProducts.
     */
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[]
  }

  /**
   * OrderProduct findFirstOrThrow
   */
  export type OrderProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null
    /**
     * Filter, which OrderProduct to fetch.
     */
    where?: OrderProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderProducts to fetch.
     */
    orderBy?: OrderProductOrderByWithRelationInput | OrderProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderProducts.
     */
    cursor?: OrderProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderProducts.
     */
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[]
  }

  /**
   * OrderProduct findMany
   */
  export type OrderProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null
    /**
     * Filter, which OrderProducts to fetch.
     */
    where?: OrderProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderProducts to fetch.
     */
    orderBy?: OrderProductOrderByWithRelationInput | OrderProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderProducts.
     */
    cursor?: OrderProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderProducts.
     */
    skip?: number
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[]
  }

  /**
   * OrderProduct create
   */
  export type OrderProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderProduct.
     */
    data: XOR<OrderProductCreateInput, OrderProductUncheckedCreateInput>
  }

  /**
   * OrderProduct createMany
   */
  export type OrderProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderProducts.
     */
    data: OrderProductCreateManyInput | OrderProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderProduct createManyAndReturn
   */
  export type OrderProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * The data used to create many OrderProducts.
     */
    data: OrderProductCreateManyInput | OrderProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderProduct update
   */
  export type OrderProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderProduct.
     */
    data: XOR<OrderProductUpdateInput, OrderProductUncheckedUpdateInput>
    /**
     * Choose, which OrderProduct to update.
     */
    where: OrderProductWhereUniqueInput
  }

  /**
   * OrderProduct updateMany
   */
  export type OrderProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderProducts.
     */
    data: XOR<OrderProductUpdateManyMutationInput, OrderProductUncheckedUpdateManyInput>
    /**
     * Filter which OrderProducts to update
     */
    where?: OrderProductWhereInput
    /**
     * Limit how many OrderProducts to update.
     */
    limit?: number
  }

  /**
   * OrderProduct updateManyAndReturn
   */
  export type OrderProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * The data used to update OrderProducts.
     */
    data: XOR<OrderProductUpdateManyMutationInput, OrderProductUncheckedUpdateManyInput>
    /**
     * Filter which OrderProducts to update
     */
    where?: OrderProductWhereInput
    /**
     * Limit how many OrderProducts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderProduct upsert
   */
  export type OrderProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderProduct to update in case it exists.
     */
    where: OrderProductWhereUniqueInput
    /**
     * In case the OrderProduct found by the `where` argument doesn't exist, create a new OrderProduct with this data.
     */
    create: XOR<OrderProductCreateInput, OrderProductUncheckedCreateInput>
    /**
     * In case the OrderProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderProductUpdateInput, OrderProductUncheckedUpdateInput>
  }

  /**
   * OrderProduct delete
   */
  export type OrderProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null
    /**
     * Filter which OrderProduct to delete.
     */
    where: OrderProductWhereUniqueInput
  }

  /**
   * OrderProduct deleteMany
   */
  export type OrderProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderProducts to delete
     */
    where?: OrderProductWhereInput
    /**
     * Limit how many OrderProducts to delete.
     */
    limit?: number
  }

  /**
   * OrderProduct.profession
   */
  export type OrderProduct$professionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    where?: ProfessionWhereInput
  }

  /**
   * OrderProduct.tool
   */
  export type OrderProduct$toolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    where?: ToolWhereInput
  }

  /**
   * OrderProduct.level
   */
  export type OrderProduct$levelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    where?: LevelWhereInput
  }

  /**
   * OrderProduct without action
   */
  export type OrderProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProduct
     */
    omit?: OrderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null
  }


  /**
   * Model OrderMaster
   */

  export type AggregateOrderMaster = {
    _count: OrderMasterCountAggregateOutputType | null
    _min: OrderMasterMinAggregateOutputType | null
    _max: OrderMasterMaxAggregateOutputType | null
  }

  export type OrderMasterMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    masterid: string | null
  }

  export type OrderMasterMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    masterid: string | null
  }

  export type OrderMasterCountAggregateOutputType = {
    id: number
    orderId: number
    masterid: number
    _all: number
  }


  export type OrderMasterMinAggregateInputType = {
    id?: true
    orderId?: true
    masterid?: true
  }

  export type OrderMasterMaxAggregateInputType = {
    id?: true
    orderId?: true
    masterid?: true
  }

  export type OrderMasterCountAggregateInputType = {
    id?: true
    orderId?: true
    masterid?: true
    _all?: true
  }

  export type OrderMasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderMaster to aggregate.
     */
    where?: OrderMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderMasters to fetch.
     */
    orderBy?: OrderMasterOrderByWithRelationInput | OrderMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderMasters
    **/
    _count?: true | OrderMasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMasterMaxAggregateInputType
  }

  export type GetOrderMasterAggregateType<T extends OrderMasterAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderMaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderMaster[P]>
      : GetScalarType<T[P], AggregateOrderMaster[P]>
  }




  export type OrderMasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderMasterWhereInput
    orderBy?: OrderMasterOrderByWithAggregationInput | OrderMasterOrderByWithAggregationInput[]
    by: OrderMasterScalarFieldEnum[] | OrderMasterScalarFieldEnum
    having?: OrderMasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderMasterCountAggregateInputType | true
    _min?: OrderMasterMinAggregateInputType
    _max?: OrderMasterMaxAggregateInputType
  }

  export type OrderMasterGroupByOutputType = {
    id: string
    orderId: string
    masterid: string
    _count: OrderMasterCountAggregateOutputType | null
    _min: OrderMasterMinAggregateOutputType | null
    _max: OrderMasterMaxAggregateOutputType | null
  }

  type GetOrderMasterGroupByPayload<T extends OrderMasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderMasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderMasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderMasterGroupByOutputType[P]>
            : GetScalarType<T[P], OrderMasterGroupByOutputType[P]>
        }
      >
    >


  export type OrderMasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    masterid?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderMaster"]>

  export type OrderMasterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    masterid?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderMaster"]>

  export type OrderMasterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    masterid?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderMaster"]>

  export type OrderMasterSelectScalar = {
    id?: boolean
    orderId?: boolean
    masterid?: boolean
  }

  export type OrderMasterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "masterid", ExtArgs["result"]["orderMaster"]>
  export type OrderMasterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }
  export type OrderMasterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }
  export type OrderMasterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }

  export type $OrderMasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderMaster"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      master: Prisma.$MasterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderId: string
      masterid: string
    }, ExtArgs["result"]["orderMaster"]>
    composites: {}
  }

  type OrderMasterGetPayload<S extends boolean | null | undefined | OrderMasterDefaultArgs> = $Result.GetResult<Prisma.$OrderMasterPayload, S>

  type OrderMasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderMasterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderMasterCountAggregateInputType | true
    }

  export interface OrderMasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderMaster'], meta: { name: 'OrderMaster' } }
    /**
     * Find zero or one OrderMaster that matches the filter.
     * @param {OrderMasterFindUniqueArgs} args - Arguments to find a OrderMaster
     * @example
     * // Get one OrderMaster
     * const orderMaster = await prisma.orderMaster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderMasterFindUniqueArgs>(args: SelectSubset<T, OrderMasterFindUniqueArgs<ExtArgs>>): Prisma__OrderMasterClient<$Result.GetResult<Prisma.$OrderMasterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderMaster that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderMasterFindUniqueOrThrowArgs} args - Arguments to find a OrderMaster
     * @example
     * // Get one OrderMaster
     * const orderMaster = await prisma.orderMaster.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderMasterFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderMasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderMasterClient<$Result.GetResult<Prisma.$OrderMasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderMaster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderMasterFindFirstArgs} args - Arguments to find a OrderMaster
     * @example
     * // Get one OrderMaster
     * const orderMaster = await prisma.orderMaster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderMasterFindFirstArgs>(args?: SelectSubset<T, OrderMasterFindFirstArgs<ExtArgs>>): Prisma__OrderMasterClient<$Result.GetResult<Prisma.$OrderMasterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderMaster that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderMasterFindFirstOrThrowArgs} args - Arguments to find a OrderMaster
     * @example
     * // Get one OrderMaster
     * const orderMaster = await prisma.orderMaster.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderMasterFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderMasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderMasterClient<$Result.GetResult<Prisma.$OrderMasterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderMasters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderMasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderMasters
     * const orderMasters = await prisma.orderMaster.findMany()
     * 
     * // Get first 10 OrderMasters
     * const orderMasters = await prisma.orderMaster.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderMasterWithIdOnly = await prisma.orderMaster.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderMasterFindManyArgs>(args?: SelectSubset<T, OrderMasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderMasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderMaster.
     * @param {OrderMasterCreateArgs} args - Arguments to create a OrderMaster.
     * @example
     * // Create one OrderMaster
     * const OrderMaster = await prisma.orderMaster.create({
     *   data: {
     *     // ... data to create a OrderMaster
     *   }
     * })
     * 
     */
    create<T extends OrderMasterCreateArgs>(args: SelectSubset<T, OrderMasterCreateArgs<ExtArgs>>): Prisma__OrderMasterClient<$Result.GetResult<Prisma.$OrderMasterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderMasters.
     * @param {OrderMasterCreateManyArgs} args - Arguments to create many OrderMasters.
     * @example
     * // Create many OrderMasters
     * const orderMaster = await prisma.orderMaster.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderMasterCreateManyArgs>(args?: SelectSubset<T, OrderMasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderMasters and returns the data saved in the database.
     * @param {OrderMasterCreateManyAndReturnArgs} args - Arguments to create many OrderMasters.
     * @example
     * // Create many OrderMasters
     * const orderMaster = await prisma.orderMaster.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderMasters and only return the `id`
     * const orderMasterWithIdOnly = await prisma.orderMaster.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderMasterCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderMasterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderMasterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderMaster.
     * @param {OrderMasterDeleteArgs} args - Arguments to delete one OrderMaster.
     * @example
     * // Delete one OrderMaster
     * const OrderMaster = await prisma.orderMaster.delete({
     *   where: {
     *     // ... filter to delete one OrderMaster
     *   }
     * })
     * 
     */
    delete<T extends OrderMasterDeleteArgs>(args: SelectSubset<T, OrderMasterDeleteArgs<ExtArgs>>): Prisma__OrderMasterClient<$Result.GetResult<Prisma.$OrderMasterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderMaster.
     * @param {OrderMasterUpdateArgs} args - Arguments to update one OrderMaster.
     * @example
     * // Update one OrderMaster
     * const orderMaster = await prisma.orderMaster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderMasterUpdateArgs>(args: SelectSubset<T, OrderMasterUpdateArgs<ExtArgs>>): Prisma__OrderMasterClient<$Result.GetResult<Prisma.$OrderMasterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderMasters.
     * @param {OrderMasterDeleteManyArgs} args - Arguments to filter OrderMasters to delete.
     * @example
     * // Delete a few OrderMasters
     * const { count } = await prisma.orderMaster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderMasterDeleteManyArgs>(args?: SelectSubset<T, OrderMasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderMasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderMasters
     * const orderMaster = await prisma.orderMaster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderMasterUpdateManyArgs>(args: SelectSubset<T, OrderMasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderMasters and returns the data updated in the database.
     * @param {OrderMasterUpdateManyAndReturnArgs} args - Arguments to update many OrderMasters.
     * @example
     * // Update many OrderMasters
     * const orderMaster = await prisma.orderMaster.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderMasters and only return the `id`
     * const orderMasterWithIdOnly = await prisma.orderMaster.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderMasterUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderMasterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderMasterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderMaster.
     * @param {OrderMasterUpsertArgs} args - Arguments to update or create a OrderMaster.
     * @example
     * // Update or create a OrderMaster
     * const orderMaster = await prisma.orderMaster.upsert({
     *   create: {
     *     // ... data to create a OrderMaster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderMaster we want to update
     *   }
     * })
     */
    upsert<T extends OrderMasterUpsertArgs>(args: SelectSubset<T, OrderMasterUpsertArgs<ExtArgs>>): Prisma__OrderMasterClient<$Result.GetResult<Prisma.$OrderMasterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderMasterCountArgs} args - Arguments to filter OrderMasters to count.
     * @example
     * // Count the number of OrderMasters
     * const count = await prisma.orderMaster.count({
     *   where: {
     *     // ... the filter for the OrderMasters we want to count
     *   }
     * })
    **/
    count<T extends OrderMasterCountArgs>(
      args?: Subset<T, OrderMasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderMasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderMasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderMasterAggregateArgs>(args: Subset<T, OrderMasterAggregateArgs>): Prisma.PrismaPromise<GetOrderMasterAggregateType<T>>

    /**
     * Group by OrderMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderMasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderMasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderMasterGroupByArgs['orderBy'] }
        : { orderBy?: OrderMasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderMasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderMasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderMaster model
   */
  readonly fields: OrderMasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderMaster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderMasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    master<T extends MasterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MasterDefaultArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderMaster model
   */
  interface OrderMasterFieldRefs {
    readonly id: FieldRef<"OrderMaster", 'String'>
    readonly orderId: FieldRef<"OrderMaster", 'String'>
    readonly masterid: FieldRef<"OrderMaster", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OrderMaster findUnique
   */
  export type OrderMasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMaster
     */
    select?: OrderMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMaster
     */
    omit?: OrderMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMasterInclude<ExtArgs> | null
    /**
     * Filter, which OrderMaster to fetch.
     */
    where: OrderMasterWhereUniqueInput
  }

  /**
   * OrderMaster findUniqueOrThrow
   */
  export type OrderMasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMaster
     */
    select?: OrderMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMaster
     */
    omit?: OrderMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMasterInclude<ExtArgs> | null
    /**
     * Filter, which OrderMaster to fetch.
     */
    where: OrderMasterWhereUniqueInput
  }

  /**
   * OrderMaster findFirst
   */
  export type OrderMasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMaster
     */
    select?: OrderMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMaster
     */
    omit?: OrderMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMasterInclude<ExtArgs> | null
    /**
     * Filter, which OrderMaster to fetch.
     */
    where?: OrderMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderMasters to fetch.
     */
    orderBy?: OrderMasterOrderByWithRelationInput | OrderMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderMasters.
     */
    cursor?: OrderMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderMasters.
     */
    distinct?: OrderMasterScalarFieldEnum | OrderMasterScalarFieldEnum[]
  }

  /**
   * OrderMaster findFirstOrThrow
   */
  export type OrderMasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMaster
     */
    select?: OrderMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMaster
     */
    omit?: OrderMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMasterInclude<ExtArgs> | null
    /**
     * Filter, which OrderMaster to fetch.
     */
    where?: OrderMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderMasters to fetch.
     */
    orderBy?: OrderMasterOrderByWithRelationInput | OrderMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderMasters.
     */
    cursor?: OrderMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderMasters.
     */
    distinct?: OrderMasterScalarFieldEnum | OrderMasterScalarFieldEnum[]
  }

  /**
   * OrderMaster findMany
   */
  export type OrderMasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMaster
     */
    select?: OrderMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMaster
     */
    omit?: OrderMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMasterInclude<ExtArgs> | null
    /**
     * Filter, which OrderMasters to fetch.
     */
    where?: OrderMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderMasters to fetch.
     */
    orderBy?: OrderMasterOrderByWithRelationInput | OrderMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderMasters.
     */
    cursor?: OrderMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderMasters.
     */
    skip?: number
    distinct?: OrderMasterScalarFieldEnum | OrderMasterScalarFieldEnum[]
  }

  /**
   * OrderMaster create
   */
  export type OrderMasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMaster
     */
    select?: OrderMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMaster
     */
    omit?: OrderMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMasterInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderMaster.
     */
    data: XOR<OrderMasterCreateInput, OrderMasterUncheckedCreateInput>
  }

  /**
   * OrderMaster createMany
   */
  export type OrderMasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderMasters.
     */
    data: OrderMasterCreateManyInput | OrderMasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderMaster createManyAndReturn
   */
  export type OrderMasterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMaster
     */
    select?: OrderMasterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMaster
     */
    omit?: OrderMasterOmit<ExtArgs> | null
    /**
     * The data used to create many OrderMasters.
     */
    data: OrderMasterCreateManyInput | OrderMasterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMasterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderMaster update
   */
  export type OrderMasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMaster
     */
    select?: OrderMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMaster
     */
    omit?: OrderMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMasterInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderMaster.
     */
    data: XOR<OrderMasterUpdateInput, OrderMasterUncheckedUpdateInput>
    /**
     * Choose, which OrderMaster to update.
     */
    where: OrderMasterWhereUniqueInput
  }

  /**
   * OrderMaster updateMany
   */
  export type OrderMasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderMasters.
     */
    data: XOR<OrderMasterUpdateManyMutationInput, OrderMasterUncheckedUpdateManyInput>
    /**
     * Filter which OrderMasters to update
     */
    where?: OrderMasterWhereInput
    /**
     * Limit how many OrderMasters to update.
     */
    limit?: number
  }

  /**
   * OrderMaster updateManyAndReturn
   */
  export type OrderMasterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMaster
     */
    select?: OrderMasterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMaster
     */
    omit?: OrderMasterOmit<ExtArgs> | null
    /**
     * The data used to update OrderMasters.
     */
    data: XOR<OrderMasterUpdateManyMutationInput, OrderMasterUncheckedUpdateManyInput>
    /**
     * Filter which OrderMasters to update
     */
    where?: OrderMasterWhereInput
    /**
     * Limit how many OrderMasters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMasterIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderMaster upsert
   */
  export type OrderMasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMaster
     */
    select?: OrderMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMaster
     */
    omit?: OrderMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMasterInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderMaster to update in case it exists.
     */
    where: OrderMasterWhereUniqueInput
    /**
     * In case the OrderMaster found by the `where` argument doesn't exist, create a new OrderMaster with this data.
     */
    create: XOR<OrderMasterCreateInput, OrderMasterUncheckedCreateInput>
    /**
     * In case the OrderMaster was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderMasterUpdateInput, OrderMasterUncheckedUpdateInput>
  }

  /**
   * OrderMaster delete
   */
  export type OrderMasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMaster
     */
    select?: OrderMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMaster
     */
    omit?: OrderMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMasterInclude<ExtArgs> | null
    /**
     * Filter which OrderMaster to delete.
     */
    where: OrderMasterWhereUniqueInput
  }

  /**
   * OrderMaster deleteMany
   */
  export type OrderMasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderMasters to delete
     */
    where?: OrderMasterWhereInput
    /**
     * Limit how many OrderMasters to delete.
     */
    limit?: number
  }

  /**
   * OrderMaster without action
   */
  export type OrderMasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMaster
     */
    select?: OrderMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMaster
     */
    omit?: OrderMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMasterInclude<ExtArgs> | null
  }


  /**
   * Model Basket
   */

  export type AggregateBasket = {
    _count: BasketCountAggregateOutputType | null
    _avg: BasketAvgAggregateOutputType | null
    _sum: BasketSumAggregateOutputType | null
    _min: BasketMinAggregateOutputType | null
    _max: BasketMaxAggregateOutputType | null
  }

  export type BasketAvgAggregateOutputType = {
    quantity: number | null
    workingTime: number | null
    price: Decimal | null
  }

  export type BasketSumAggregateOutputType = {
    quantity: number | null
    workingTime: number | null
    price: Decimal | null
  }

  export type BasketMinAggregateOutputType = {
    id: string | null
    ownerId: string | null
    professionId: string | null
    toolId: string | null
    levelId: string | null
    quantity: number | null
    timeUnit: $Enums.TimeUnit | null
    workingTime: number | null
    price: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BasketMaxAggregateOutputType = {
    id: string | null
    ownerId: string | null
    professionId: string | null
    toolId: string | null
    levelId: string | null
    quantity: number | null
    timeUnit: $Enums.TimeUnit | null
    workingTime: number | null
    price: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BasketCountAggregateOutputType = {
    id: number
    ownerId: number
    professionId: number
    toolId: number
    levelId: number
    quantity: number
    timeUnit: number
    workingTime: number
    price: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BasketAvgAggregateInputType = {
    quantity?: true
    workingTime?: true
    price?: true
  }

  export type BasketSumAggregateInputType = {
    quantity?: true
    workingTime?: true
    price?: true
  }

  export type BasketMinAggregateInputType = {
    id?: true
    ownerId?: true
    professionId?: true
    toolId?: true
    levelId?: true
    quantity?: true
    timeUnit?: true
    workingTime?: true
    price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BasketMaxAggregateInputType = {
    id?: true
    ownerId?: true
    professionId?: true
    toolId?: true
    levelId?: true
    quantity?: true
    timeUnit?: true
    workingTime?: true
    price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BasketCountAggregateInputType = {
    id?: true
    ownerId?: true
    professionId?: true
    toolId?: true
    levelId?: true
    quantity?: true
    timeUnit?: true
    workingTime?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BasketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Basket to aggregate.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Baskets
    **/
    _count?: true | BasketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BasketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BasketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BasketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BasketMaxAggregateInputType
  }

  export type GetBasketAggregateType<T extends BasketAggregateArgs> = {
        [P in keyof T & keyof AggregateBasket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBasket[P]>
      : GetScalarType<T[P], AggregateBasket[P]>
  }




  export type BasketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithAggregationInput | BasketOrderByWithAggregationInput[]
    by: BasketScalarFieldEnum[] | BasketScalarFieldEnum
    having?: BasketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BasketCountAggregateInputType | true
    _avg?: BasketAvgAggregateInputType
    _sum?: BasketSumAggregateInputType
    _min?: BasketMinAggregateInputType
    _max?: BasketMaxAggregateInputType
  }

  export type BasketGroupByOutputType = {
    id: string
    ownerId: string
    professionId: string | null
    toolId: string | null
    levelId: string | null
    quantity: number
    timeUnit: $Enums.TimeUnit | null
    workingTime: number | null
    price: Decimal
    createdAt: Date
    updatedAt: Date
    _count: BasketCountAggregateOutputType | null
    _avg: BasketAvgAggregateOutputType | null
    _sum: BasketSumAggregateOutputType | null
    _min: BasketMinAggregateOutputType | null
    _max: BasketMaxAggregateOutputType | null
  }

  type GetBasketGroupByPayload<T extends BasketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BasketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BasketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BasketGroupByOutputType[P]>
            : GetScalarType<T[P], BasketGroupByOutputType[P]>
        }
      >
    >


  export type BasketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    professionId?: boolean
    toolId?: boolean
    levelId?: boolean
    quantity?: boolean
    timeUnit?: boolean
    workingTime?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    profession?: boolean | Basket$professionArgs<ExtArgs>
    tool?: boolean | Basket$toolArgs<ExtArgs>
    level?: boolean | Basket$levelArgs<ExtArgs>
  }, ExtArgs["result"]["basket"]>

  export type BasketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    professionId?: boolean
    toolId?: boolean
    levelId?: boolean
    quantity?: boolean
    timeUnit?: boolean
    workingTime?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    profession?: boolean | Basket$professionArgs<ExtArgs>
    tool?: boolean | Basket$toolArgs<ExtArgs>
    level?: boolean | Basket$levelArgs<ExtArgs>
  }, ExtArgs["result"]["basket"]>

  export type BasketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    professionId?: boolean
    toolId?: boolean
    levelId?: boolean
    quantity?: boolean
    timeUnit?: boolean
    workingTime?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    profession?: boolean | Basket$professionArgs<ExtArgs>
    tool?: boolean | Basket$toolArgs<ExtArgs>
    level?: boolean | Basket$levelArgs<ExtArgs>
  }, ExtArgs["result"]["basket"]>

  export type BasketSelectScalar = {
    id?: boolean
    ownerId?: boolean
    professionId?: boolean
    toolId?: boolean
    levelId?: boolean
    quantity?: boolean
    timeUnit?: boolean
    workingTime?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BasketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ownerId" | "professionId" | "toolId" | "levelId" | "quantity" | "timeUnit" | "workingTime" | "price" | "createdAt" | "updatedAt", ExtArgs["result"]["basket"]>
  export type BasketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    profession?: boolean | Basket$professionArgs<ExtArgs>
    tool?: boolean | Basket$toolArgs<ExtArgs>
    level?: boolean | Basket$levelArgs<ExtArgs>
  }
  export type BasketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    profession?: boolean | Basket$professionArgs<ExtArgs>
    tool?: boolean | Basket$toolArgs<ExtArgs>
    level?: boolean | Basket$levelArgs<ExtArgs>
  }
  export type BasketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    profession?: boolean | Basket$professionArgs<ExtArgs>
    tool?: boolean | Basket$toolArgs<ExtArgs>
    level?: boolean | Basket$levelArgs<ExtArgs>
  }

  export type $BasketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Basket"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      profession: Prisma.$ProfessionPayload<ExtArgs> | null
      tool: Prisma.$ToolPayload<ExtArgs> | null
      level: Prisma.$LevelPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ownerId: string
      professionId: string | null
      toolId: string | null
      levelId: string | null
      quantity: number
      timeUnit: $Enums.TimeUnit | null
      workingTime: number | null
      price: Prisma.Decimal
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["basket"]>
    composites: {}
  }

  type BasketGetPayload<S extends boolean | null | undefined | BasketDefaultArgs> = $Result.GetResult<Prisma.$BasketPayload, S>

  type BasketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BasketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BasketCountAggregateInputType | true
    }

  export interface BasketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Basket'], meta: { name: 'Basket' } }
    /**
     * Find zero or one Basket that matches the filter.
     * @param {BasketFindUniqueArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BasketFindUniqueArgs>(args: SelectSubset<T, BasketFindUniqueArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Basket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BasketFindUniqueOrThrowArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BasketFindUniqueOrThrowArgs>(args: SelectSubset<T, BasketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Basket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketFindFirstArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BasketFindFirstArgs>(args?: SelectSubset<T, BasketFindFirstArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Basket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketFindFirstOrThrowArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BasketFindFirstOrThrowArgs>(args?: SelectSubset<T, BasketFindFirstOrThrowArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Baskets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Baskets
     * const baskets = await prisma.basket.findMany()
     * 
     * // Get first 10 Baskets
     * const baskets = await prisma.basket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const basketWithIdOnly = await prisma.basket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BasketFindManyArgs>(args?: SelectSubset<T, BasketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Basket.
     * @param {BasketCreateArgs} args - Arguments to create a Basket.
     * @example
     * // Create one Basket
     * const Basket = await prisma.basket.create({
     *   data: {
     *     // ... data to create a Basket
     *   }
     * })
     * 
     */
    create<T extends BasketCreateArgs>(args: SelectSubset<T, BasketCreateArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Baskets.
     * @param {BasketCreateManyArgs} args - Arguments to create many Baskets.
     * @example
     * // Create many Baskets
     * const basket = await prisma.basket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BasketCreateManyArgs>(args?: SelectSubset<T, BasketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Baskets and returns the data saved in the database.
     * @param {BasketCreateManyAndReturnArgs} args - Arguments to create many Baskets.
     * @example
     * // Create many Baskets
     * const basket = await prisma.basket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Baskets and only return the `id`
     * const basketWithIdOnly = await prisma.basket.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BasketCreateManyAndReturnArgs>(args?: SelectSubset<T, BasketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Basket.
     * @param {BasketDeleteArgs} args - Arguments to delete one Basket.
     * @example
     * // Delete one Basket
     * const Basket = await prisma.basket.delete({
     *   where: {
     *     // ... filter to delete one Basket
     *   }
     * })
     * 
     */
    delete<T extends BasketDeleteArgs>(args: SelectSubset<T, BasketDeleteArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Basket.
     * @param {BasketUpdateArgs} args - Arguments to update one Basket.
     * @example
     * // Update one Basket
     * const basket = await prisma.basket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BasketUpdateArgs>(args: SelectSubset<T, BasketUpdateArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Baskets.
     * @param {BasketDeleteManyArgs} args - Arguments to filter Baskets to delete.
     * @example
     * // Delete a few Baskets
     * const { count } = await prisma.basket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BasketDeleteManyArgs>(args?: SelectSubset<T, BasketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Baskets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Baskets
     * const basket = await prisma.basket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BasketUpdateManyArgs>(args: SelectSubset<T, BasketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Baskets and returns the data updated in the database.
     * @param {BasketUpdateManyAndReturnArgs} args - Arguments to update many Baskets.
     * @example
     * // Update many Baskets
     * const basket = await prisma.basket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Baskets and only return the `id`
     * const basketWithIdOnly = await prisma.basket.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BasketUpdateManyAndReturnArgs>(args: SelectSubset<T, BasketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Basket.
     * @param {BasketUpsertArgs} args - Arguments to update or create a Basket.
     * @example
     * // Update or create a Basket
     * const basket = await prisma.basket.upsert({
     *   create: {
     *     // ... data to create a Basket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Basket we want to update
     *   }
     * })
     */
    upsert<T extends BasketUpsertArgs>(args: SelectSubset<T, BasketUpsertArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Baskets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketCountArgs} args - Arguments to filter Baskets to count.
     * @example
     * // Count the number of Baskets
     * const count = await prisma.basket.count({
     *   where: {
     *     // ... the filter for the Baskets we want to count
     *   }
     * })
    **/
    count<T extends BasketCountArgs>(
      args?: Subset<T, BasketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BasketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Basket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BasketAggregateArgs>(args: Subset<T, BasketAggregateArgs>): Prisma.PrismaPromise<GetBasketAggregateType<T>>

    /**
     * Group by Basket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BasketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BasketGroupByArgs['orderBy'] }
        : { orderBy?: BasketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BasketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBasketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Basket model
   */
  readonly fields: BasketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Basket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BasketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profession<T extends Basket$professionArgs<ExtArgs> = {}>(args?: Subset<T, Basket$professionArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tool<T extends Basket$toolArgs<ExtArgs> = {}>(args?: Subset<T, Basket$toolArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    level<T extends Basket$levelArgs<ExtArgs> = {}>(args?: Subset<T, Basket$levelArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Basket model
   */
  interface BasketFieldRefs {
    readonly id: FieldRef<"Basket", 'String'>
    readonly ownerId: FieldRef<"Basket", 'String'>
    readonly professionId: FieldRef<"Basket", 'String'>
    readonly toolId: FieldRef<"Basket", 'String'>
    readonly levelId: FieldRef<"Basket", 'String'>
    readonly quantity: FieldRef<"Basket", 'Int'>
    readonly timeUnit: FieldRef<"Basket", 'TimeUnit'>
    readonly workingTime: FieldRef<"Basket", 'Float'>
    readonly price: FieldRef<"Basket", 'Decimal'>
    readonly createdAt: FieldRef<"Basket", 'DateTime'>
    readonly updatedAt: FieldRef<"Basket", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Basket findUnique
   */
  export type BasketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket findUniqueOrThrow
   */
  export type BasketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket findFirst
   */
  export type BasketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Baskets.
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Baskets.
     */
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Basket findFirstOrThrow
   */
  export type BasketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Baskets.
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Baskets.
     */
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Basket findMany
   */
  export type BasketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Baskets to fetch.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Baskets.
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Basket create
   */
  export type BasketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * The data needed to create a Basket.
     */
    data: XOR<BasketCreateInput, BasketUncheckedCreateInput>
  }

  /**
   * Basket createMany
   */
  export type BasketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Baskets.
     */
    data: BasketCreateManyInput | BasketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Basket createManyAndReturn
   */
  export type BasketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * The data used to create many Baskets.
     */
    data: BasketCreateManyInput | BasketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Basket update
   */
  export type BasketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * The data needed to update a Basket.
     */
    data: XOR<BasketUpdateInput, BasketUncheckedUpdateInput>
    /**
     * Choose, which Basket to update.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket updateMany
   */
  export type BasketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Baskets.
     */
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyInput>
    /**
     * Filter which Baskets to update
     */
    where?: BasketWhereInput
    /**
     * Limit how many Baskets to update.
     */
    limit?: number
  }

  /**
   * Basket updateManyAndReturn
   */
  export type BasketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * The data used to update Baskets.
     */
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyInput>
    /**
     * Filter which Baskets to update
     */
    where?: BasketWhereInput
    /**
     * Limit how many Baskets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Basket upsert
   */
  export type BasketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * The filter to search for the Basket to update in case it exists.
     */
    where: BasketWhereUniqueInput
    /**
     * In case the Basket found by the `where` argument doesn't exist, create a new Basket with this data.
     */
    create: XOR<BasketCreateInput, BasketUncheckedCreateInput>
    /**
     * In case the Basket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BasketUpdateInput, BasketUncheckedUpdateInput>
  }

  /**
   * Basket delete
   */
  export type BasketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter which Basket to delete.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket deleteMany
   */
  export type BasketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Baskets to delete
     */
    where?: BasketWhereInput
    /**
     * Limit how many Baskets to delete.
     */
    limit?: number
  }

  /**
   * Basket.profession
   */
  export type Basket$professionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    where?: ProfessionWhereInput
  }

  /**
   * Basket.tool
   */
  export type Basket$toolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    where?: ToolWhereInput
  }

  /**
   * Basket.level
   */
  export type Basket$levelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    where?: LevelWhereInput
  }

  /**
   * Basket without action
   */
  export type BasketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    message: string | null
    userId: string | null
    orderId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    message: string | null
    userId: string | null
    orderId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    message: number
    userId: number
    orderId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    message?: true
    userId?: true
    orderId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    message?: true
    userId?: true
    orderId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    message?: true
    userId?: true
    orderId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    message: string
    userId: string
    orderId: string
    createdAt: Date
    updatedAt: Date
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    userId?: boolean
    orderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    MasterRatings?: boolean | Comment$MasterRatingsArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    userId?: boolean
    orderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    userId?: boolean
    orderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    message?: boolean
    userId?: boolean
    orderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "message" | "userId" | "orderId" | "createdAt" | "updatedAt", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    MasterRatings?: boolean | Comment$MasterRatingsArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      order: Prisma.$OrderPayload<ExtArgs>
      MasterRatings: Prisma.$MasterRatingsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      message: string
      userId: string
      orderId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    MasterRatings<T extends Comment$MasterRatingsArgs<ExtArgs> = {}>(args?: Subset<T, Comment$MasterRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly message: FieldRef<"Comment", 'String'>
    readonly userId: FieldRef<"Comment", 'String'>
    readonly orderId: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment.MasterRatings
   */
  export type Comment$MasterRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    where?: MasterRatingsWhereInput
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    cursor?: MasterRatingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterRatingsScalarFieldEnum | MasterRatingsScalarFieldEnum[]
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model MasterRatings
   */

  export type AggregateMasterRatings = {
    _count: MasterRatingsCountAggregateOutputType | null
    _avg: MasterRatingsAvgAggregateOutputType | null
    _sum: MasterRatingsSumAggregateOutputType | null
    _min: MasterRatingsMinAggregateOutputType | null
    _max: MasterRatingsMaxAggregateOutputType | null
  }

  export type MasterRatingsAvgAggregateOutputType = {
    star: number | null
  }

  export type MasterRatingsSumAggregateOutputType = {
    star: number | null
  }

  export type MasterRatingsMinAggregateOutputType = {
    id: string | null
    star: number | null
    masterId: string | null
    commentId: string | null
  }

  export type MasterRatingsMaxAggregateOutputType = {
    id: string | null
    star: number | null
    masterId: string | null
    commentId: string | null
  }

  export type MasterRatingsCountAggregateOutputType = {
    id: number
    star: number
    masterId: number
    commentId: number
    _all: number
  }


  export type MasterRatingsAvgAggregateInputType = {
    star?: true
  }

  export type MasterRatingsSumAggregateInputType = {
    star?: true
  }

  export type MasterRatingsMinAggregateInputType = {
    id?: true
    star?: true
    masterId?: true
    commentId?: true
  }

  export type MasterRatingsMaxAggregateInputType = {
    id?: true
    star?: true
    masterId?: true
    commentId?: true
  }

  export type MasterRatingsCountAggregateInputType = {
    id?: true
    star?: true
    masterId?: true
    commentId?: true
    _all?: true
  }

  export type MasterRatingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterRatings to aggregate.
     */
    where?: MasterRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterRatings to fetch.
     */
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MasterRatings
    **/
    _count?: true | MasterRatingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterRatingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterRatingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterRatingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterRatingsMaxAggregateInputType
  }

  export type GetMasterRatingsAggregateType<T extends MasterRatingsAggregateArgs> = {
        [P in keyof T & keyof AggregateMasterRatings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMasterRatings[P]>
      : GetScalarType<T[P], AggregateMasterRatings[P]>
  }




  export type MasterRatingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterRatingsWhereInput
    orderBy?: MasterRatingsOrderByWithAggregationInput | MasterRatingsOrderByWithAggregationInput[]
    by: MasterRatingsScalarFieldEnum[] | MasterRatingsScalarFieldEnum
    having?: MasterRatingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterRatingsCountAggregateInputType | true
    _avg?: MasterRatingsAvgAggregateInputType
    _sum?: MasterRatingsSumAggregateInputType
    _min?: MasterRatingsMinAggregateInputType
    _max?: MasterRatingsMaxAggregateInputType
  }

  export type MasterRatingsGroupByOutputType = {
    id: string
    star: number
    masterId: string
    commentId: string
    _count: MasterRatingsCountAggregateOutputType | null
    _avg: MasterRatingsAvgAggregateOutputType | null
    _sum: MasterRatingsSumAggregateOutputType | null
    _min: MasterRatingsMinAggregateOutputType | null
    _max: MasterRatingsMaxAggregateOutputType | null
  }

  type GetMasterRatingsGroupByPayload<T extends MasterRatingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterRatingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterRatingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterRatingsGroupByOutputType[P]>
            : GetScalarType<T[P], MasterRatingsGroupByOutputType[P]>
        }
      >
    >


  export type MasterRatingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    star?: boolean
    masterId?: boolean
    commentId?: boolean
    Master?: boolean | MasterDefaultArgs<ExtArgs>
    Comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterRatings"]>

  export type MasterRatingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    star?: boolean
    masterId?: boolean
    commentId?: boolean
    Master?: boolean | MasterDefaultArgs<ExtArgs>
    Comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterRatings"]>

  export type MasterRatingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    star?: boolean
    masterId?: boolean
    commentId?: boolean
    Master?: boolean | MasterDefaultArgs<ExtArgs>
    Comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterRatings"]>

  export type MasterRatingsSelectScalar = {
    id?: boolean
    star?: boolean
    masterId?: boolean
    commentId?: boolean
  }

  export type MasterRatingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "star" | "masterId" | "commentId", ExtArgs["result"]["masterRatings"]>
  export type MasterRatingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Master?: boolean | MasterDefaultArgs<ExtArgs>
    Comment?: boolean | CommentDefaultArgs<ExtArgs>
  }
  export type MasterRatingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Master?: boolean | MasterDefaultArgs<ExtArgs>
    Comment?: boolean | CommentDefaultArgs<ExtArgs>
  }
  export type MasterRatingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Master?: boolean | MasterDefaultArgs<ExtArgs>
    Comment?: boolean | CommentDefaultArgs<ExtArgs>
  }

  export type $MasterRatingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MasterRatings"
    objects: {
      Master: Prisma.$MasterPayload<ExtArgs>
      Comment: Prisma.$CommentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      star: number
      masterId: string
      commentId: string
    }, ExtArgs["result"]["masterRatings"]>
    composites: {}
  }

  type MasterRatingsGetPayload<S extends boolean | null | undefined | MasterRatingsDefaultArgs> = $Result.GetResult<Prisma.$MasterRatingsPayload, S>

  type MasterRatingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MasterRatingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MasterRatingsCountAggregateInputType | true
    }

  export interface MasterRatingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MasterRatings'], meta: { name: 'MasterRatings' } }
    /**
     * Find zero or one MasterRatings that matches the filter.
     * @param {MasterRatingsFindUniqueArgs} args - Arguments to find a MasterRatings
     * @example
     * // Get one MasterRatings
     * const masterRatings = await prisma.masterRatings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterRatingsFindUniqueArgs>(args: SelectSubset<T, MasterRatingsFindUniqueArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MasterRatings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MasterRatingsFindUniqueOrThrowArgs} args - Arguments to find a MasterRatings
     * @example
     * // Get one MasterRatings
     * const masterRatings = await prisma.masterRatings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterRatingsFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterRatingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsFindFirstArgs} args - Arguments to find a MasterRatings
     * @example
     * // Get one MasterRatings
     * const masterRatings = await prisma.masterRatings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterRatingsFindFirstArgs>(args?: SelectSubset<T, MasterRatingsFindFirstArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterRatings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsFindFirstOrThrowArgs} args - Arguments to find a MasterRatings
     * @example
     * // Get one MasterRatings
     * const masterRatings = await prisma.masterRatings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterRatingsFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterRatingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MasterRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MasterRatings
     * const masterRatings = await prisma.masterRatings.findMany()
     * 
     * // Get first 10 MasterRatings
     * const masterRatings = await prisma.masterRatings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterRatingsWithIdOnly = await prisma.masterRatings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterRatingsFindManyArgs>(args?: SelectSubset<T, MasterRatingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MasterRatings.
     * @param {MasterRatingsCreateArgs} args - Arguments to create a MasterRatings.
     * @example
     * // Create one MasterRatings
     * const MasterRatings = await prisma.masterRatings.create({
     *   data: {
     *     // ... data to create a MasterRatings
     *   }
     * })
     * 
     */
    create<T extends MasterRatingsCreateArgs>(args: SelectSubset<T, MasterRatingsCreateArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MasterRatings.
     * @param {MasterRatingsCreateManyArgs} args - Arguments to create many MasterRatings.
     * @example
     * // Create many MasterRatings
     * const masterRatings = await prisma.masterRatings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterRatingsCreateManyArgs>(args?: SelectSubset<T, MasterRatingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MasterRatings and returns the data saved in the database.
     * @param {MasterRatingsCreateManyAndReturnArgs} args - Arguments to create many MasterRatings.
     * @example
     * // Create many MasterRatings
     * const masterRatings = await prisma.masterRatings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MasterRatings and only return the `id`
     * const masterRatingsWithIdOnly = await prisma.masterRatings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MasterRatingsCreateManyAndReturnArgs>(args?: SelectSubset<T, MasterRatingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MasterRatings.
     * @param {MasterRatingsDeleteArgs} args - Arguments to delete one MasterRatings.
     * @example
     * // Delete one MasterRatings
     * const MasterRatings = await prisma.masterRatings.delete({
     *   where: {
     *     // ... filter to delete one MasterRatings
     *   }
     * })
     * 
     */
    delete<T extends MasterRatingsDeleteArgs>(args: SelectSubset<T, MasterRatingsDeleteArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MasterRatings.
     * @param {MasterRatingsUpdateArgs} args - Arguments to update one MasterRatings.
     * @example
     * // Update one MasterRatings
     * const masterRatings = await prisma.masterRatings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterRatingsUpdateArgs>(args: SelectSubset<T, MasterRatingsUpdateArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MasterRatings.
     * @param {MasterRatingsDeleteManyArgs} args - Arguments to filter MasterRatings to delete.
     * @example
     * // Delete a few MasterRatings
     * const { count } = await prisma.masterRatings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterRatingsDeleteManyArgs>(args?: SelectSubset<T, MasterRatingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MasterRatings
     * const masterRatings = await prisma.masterRatings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterRatingsUpdateManyArgs>(args: SelectSubset<T, MasterRatingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterRatings and returns the data updated in the database.
     * @param {MasterRatingsUpdateManyAndReturnArgs} args - Arguments to update many MasterRatings.
     * @example
     * // Update many MasterRatings
     * const masterRatings = await prisma.masterRatings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MasterRatings and only return the `id`
     * const masterRatingsWithIdOnly = await prisma.masterRatings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MasterRatingsUpdateManyAndReturnArgs>(args: SelectSubset<T, MasterRatingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MasterRatings.
     * @param {MasterRatingsUpsertArgs} args - Arguments to update or create a MasterRatings.
     * @example
     * // Update or create a MasterRatings
     * const masterRatings = await prisma.masterRatings.upsert({
     *   create: {
     *     // ... data to create a MasterRatings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MasterRatings we want to update
     *   }
     * })
     */
    upsert<T extends MasterRatingsUpsertArgs>(args: SelectSubset<T, MasterRatingsUpsertArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MasterRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsCountArgs} args - Arguments to filter MasterRatings to count.
     * @example
     * // Count the number of MasterRatings
     * const count = await prisma.masterRatings.count({
     *   where: {
     *     // ... the filter for the MasterRatings we want to count
     *   }
     * })
    **/
    count<T extends MasterRatingsCountArgs>(
      args?: Subset<T, MasterRatingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterRatingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MasterRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterRatingsAggregateArgs>(args: Subset<T, MasterRatingsAggregateArgs>): Prisma.PrismaPromise<GetMasterRatingsAggregateType<T>>

    /**
     * Group by MasterRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterRatingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterRatingsGroupByArgs['orderBy'] }
        : { orderBy?: MasterRatingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterRatingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterRatingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MasterRatings model
   */
  readonly fields: MasterRatingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MasterRatings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterRatingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Master<T extends MasterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MasterDefaultArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Comment<T extends CommentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommentDefaultArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MasterRatings model
   */
  interface MasterRatingsFieldRefs {
    readonly id: FieldRef<"MasterRatings", 'String'>
    readonly star: FieldRef<"MasterRatings", 'Float'>
    readonly masterId: FieldRef<"MasterRatings", 'String'>
    readonly commentId: FieldRef<"MasterRatings", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MasterRatings findUnique
   */
  export type MasterRatingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MasterRatings to fetch.
     */
    where: MasterRatingsWhereUniqueInput
  }

  /**
   * MasterRatings findUniqueOrThrow
   */
  export type MasterRatingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MasterRatings to fetch.
     */
    where: MasterRatingsWhereUniqueInput
  }

  /**
   * MasterRatings findFirst
   */
  export type MasterRatingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MasterRatings to fetch.
     */
    where?: MasterRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterRatings to fetch.
     */
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterRatings.
     */
    cursor?: MasterRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterRatings.
     */
    distinct?: MasterRatingsScalarFieldEnum | MasterRatingsScalarFieldEnum[]
  }

  /**
   * MasterRatings findFirstOrThrow
   */
  export type MasterRatingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MasterRatings to fetch.
     */
    where?: MasterRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterRatings to fetch.
     */
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterRatings.
     */
    cursor?: MasterRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterRatings.
     */
    distinct?: MasterRatingsScalarFieldEnum | MasterRatingsScalarFieldEnum[]
  }

  /**
   * MasterRatings findMany
   */
  export type MasterRatingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MasterRatings to fetch.
     */
    where?: MasterRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterRatings to fetch.
     */
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MasterRatings.
     */
    cursor?: MasterRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterRatings.
     */
    skip?: number
    distinct?: MasterRatingsScalarFieldEnum | MasterRatingsScalarFieldEnum[]
  }

  /**
   * MasterRatings create
   */
  export type MasterRatingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * The data needed to create a MasterRatings.
     */
    data: XOR<MasterRatingsCreateInput, MasterRatingsUncheckedCreateInput>
  }

  /**
   * MasterRatings createMany
   */
  export type MasterRatingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MasterRatings.
     */
    data: MasterRatingsCreateManyInput | MasterRatingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MasterRatings createManyAndReturn
   */
  export type MasterRatingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * The data used to create many MasterRatings.
     */
    data: MasterRatingsCreateManyInput | MasterRatingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterRatings update
   */
  export type MasterRatingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * The data needed to update a MasterRatings.
     */
    data: XOR<MasterRatingsUpdateInput, MasterRatingsUncheckedUpdateInput>
    /**
     * Choose, which MasterRatings to update.
     */
    where: MasterRatingsWhereUniqueInput
  }

  /**
   * MasterRatings updateMany
   */
  export type MasterRatingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MasterRatings.
     */
    data: XOR<MasterRatingsUpdateManyMutationInput, MasterRatingsUncheckedUpdateManyInput>
    /**
     * Filter which MasterRatings to update
     */
    where?: MasterRatingsWhereInput
    /**
     * Limit how many MasterRatings to update.
     */
    limit?: number
  }

  /**
   * MasterRatings updateManyAndReturn
   */
  export type MasterRatingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * The data used to update MasterRatings.
     */
    data: XOR<MasterRatingsUpdateManyMutationInput, MasterRatingsUncheckedUpdateManyInput>
    /**
     * Filter which MasterRatings to update
     */
    where?: MasterRatingsWhereInput
    /**
     * Limit how many MasterRatings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterRatings upsert
   */
  export type MasterRatingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * The filter to search for the MasterRatings to update in case it exists.
     */
    where: MasterRatingsWhereUniqueInput
    /**
     * In case the MasterRatings found by the `where` argument doesn't exist, create a new MasterRatings with this data.
     */
    create: XOR<MasterRatingsCreateInput, MasterRatingsUncheckedCreateInput>
    /**
     * In case the MasterRatings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterRatingsUpdateInput, MasterRatingsUncheckedUpdateInput>
  }

  /**
   * MasterRatings delete
   */
  export type MasterRatingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter which MasterRatings to delete.
     */
    where: MasterRatingsWhereUniqueInput
  }

  /**
   * MasterRatings deleteMany
   */
  export type MasterRatingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterRatings to delete
     */
    where?: MasterRatingsWhereInput
    /**
     * Limit how many MasterRatings to delete.
     */
    limit?: number
  }

  /**
   * MasterRatings without action
   */
  export type MasterRatingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
  }


  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    address: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type ContactMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    address: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    phoneNumber: number
    address: number
    message: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type ContactMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    address?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    address?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    address?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    message: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    address?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    address?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    address?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    address?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type ContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "phoneNumber" | "address" | "message" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["contact"]>
  export type ContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ContactIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      phoneNumber: string
      address: string
      message: string | null
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }

  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactFindUniqueArgs>(args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactFindFirstArgs>(args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactFindManyArgs>(args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
     */
    create<T extends ContactCreateArgs>(args: SelectSubset<T, ContactCreateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contacts.
     * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactCreateManyArgs>(args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contacts and returns the data saved in the database.
     * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
     */
    delete<T extends ContactDeleteArgs>(args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactUpdateArgs>(args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactDeleteManyArgs>(args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactUpdateManyArgs>(args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts and returns the data updated in the database.
     * @param {ContactUpdateManyAndReturnArgs} args - Arguments to update many Contacts.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
     */
    upsert<T extends ContactUpsertArgs>(args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contact model
   */
  interface ContactFieldRefs {
    readonly id: FieldRef<"Contact", 'String'>
    readonly firstName: FieldRef<"Contact", 'String'>
    readonly lastName: FieldRef<"Contact", 'String'>
    readonly phoneNumber: FieldRef<"Contact", 'String'>
    readonly address: FieldRef<"Contact", 'String'>
    readonly message: FieldRef<"Contact", 'String'>
    readonly createdAt: FieldRef<"Contact", 'DateTime'>
    readonly updatedAt: FieldRef<"Contact", 'DateTime'>
    readonly userId: FieldRef<"Contact", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact createManyAndReturn
   */
  export type ContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
  }

  /**
   * Contact updateManyAndReturn
   */
  export type ContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }

  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to delete.
     */
    limit?: number
  }

  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
  }


  /**
   * Model FAQ
   */

  export type AggregateFAQ = {
    _count: FAQCountAggregateOutputType | null
    _min: FAQMinAggregateOutputType | null
    _max: FAQMaxAggregateOutputType | null
  }

  export type FAQMinAggregateOutputType = {
    id: string | null
    questionUz: string | null
    questionRu: string | null
    questionEn: string | null
    answerUz: string | null
    answerRu: string | null
    answerEn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FAQMaxAggregateOutputType = {
    id: string | null
    questionUz: string | null
    questionRu: string | null
    questionEn: string | null
    answerUz: string | null
    answerRu: string | null
    answerEn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FAQCountAggregateOutputType = {
    id: number
    questionUz: number
    questionRu: number
    questionEn: number
    answerUz: number
    answerRu: number
    answerEn: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FAQMinAggregateInputType = {
    id?: true
    questionUz?: true
    questionRu?: true
    questionEn?: true
    answerUz?: true
    answerRu?: true
    answerEn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FAQMaxAggregateInputType = {
    id?: true
    questionUz?: true
    questionRu?: true
    questionEn?: true
    answerUz?: true
    answerRu?: true
    answerEn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FAQCountAggregateInputType = {
    id?: true
    questionUz?: true
    questionRu?: true
    questionEn?: true
    answerUz?: true
    answerRu?: true
    answerEn?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FAQAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FAQ to aggregate.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FAQS
    **/
    _count?: true | FAQCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FAQMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FAQMaxAggregateInputType
  }

  export type GetFAQAggregateType<T extends FAQAggregateArgs> = {
        [P in keyof T & keyof AggregateFAQ]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFAQ[P]>
      : GetScalarType<T[P], AggregateFAQ[P]>
  }




  export type FAQGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FAQWhereInput
    orderBy?: FAQOrderByWithAggregationInput | FAQOrderByWithAggregationInput[]
    by: FAQScalarFieldEnum[] | FAQScalarFieldEnum
    having?: FAQScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FAQCountAggregateInputType | true
    _min?: FAQMinAggregateInputType
    _max?: FAQMaxAggregateInputType
  }

  export type FAQGroupByOutputType = {
    id: string
    questionUz: string
    questionRu: string | null
    questionEn: string | null
    answerUz: string
    answerRu: string | null
    answerEn: string | null
    createdAt: Date
    updatedAt: Date
    _count: FAQCountAggregateOutputType | null
    _min: FAQMinAggregateOutputType | null
    _max: FAQMaxAggregateOutputType | null
  }

  type GetFAQGroupByPayload<T extends FAQGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FAQGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FAQGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FAQGroupByOutputType[P]>
            : GetScalarType<T[P], FAQGroupByOutputType[P]>
        }
      >
    >


  export type FAQSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionUz?: boolean
    questionRu?: boolean
    questionEn?: boolean
    answerUz?: boolean
    answerRu?: boolean
    answerEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionUz?: boolean
    questionRu?: boolean
    questionEn?: boolean
    answerUz?: boolean
    answerRu?: boolean
    answerEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionUz?: boolean
    questionRu?: boolean
    questionEn?: boolean
    answerUz?: boolean
    answerRu?: boolean
    answerEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectScalar = {
    id?: boolean
    questionUz?: boolean
    questionRu?: boolean
    questionEn?: boolean
    answerUz?: boolean
    answerRu?: boolean
    answerEn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FAQOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "questionUz" | "questionRu" | "questionEn" | "answerUz" | "answerRu" | "answerEn" | "createdAt" | "updatedAt", ExtArgs["result"]["fAQ"]>

  export type $FAQPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FAQ"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      questionUz: string
      questionRu: string | null
      questionEn: string | null
      answerUz: string
      answerRu: string | null
      answerEn: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fAQ"]>
    composites: {}
  }

  type FAQGetPayload<S extends boolean | null | undefined | FAQDefaultArgs> = $Result.GetResult<Prisma.$FAQPayload, S>

  type FAQCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FAQFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FAQCountAggregateInputType | true
    }

  export interface FAQDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FAQ'], meta: { name: 'FAQ' } }
    /**
     * Find zero or one FAQ that matches the filter.
     * @param {FAQFindUniqueArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FAQFindUniqueArgs>(args: SelectSubset<T, FAQFindUniqueArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FAQ that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FAQFindUniqueOrThrowArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FAQFindUniqueOrThrowArgs>(args: SelectSubset<T, FAQFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FAQ that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindFirstArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FAQFindFirstArgs>(args?: SelectSubset<T, FAQFindFirstArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FAQ that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindFirstOrThrowArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FAQFindFirstOrThrowArgs>(args?: SelectSubset<T, FAQFindFirstOrThrowArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FAQS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FAQS
     * const fAQS = await prisma.fAQ.findMany()
     * 
     * // Get first 10 FAQS
     * const fAQS = await prisma.fAQ.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fAQWithIdOnly = await prisma.fAQ.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FAQFindManyArgs>(args?: SelectSubset<T, FAQFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FAQ.
     * @param {FAQCreateArgs} args - Arguments to create a FAQ.
     * @example
     * // Create one FAQ
     * const FAQ = await prisma.fAQ.create({
     *   data: {
     *     // ... data to create a FAQ
     *   }
     * })
     * 
     */
    create<T extends FAQCreateArgs>(args: SelectSubset<T, FAQCreateArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FAQS.
     * @param {FAQCreateManyArgs} args - Arguments to create many FAQS.
     * @example
     * // Create many FAQS
     * const fAQ = await prisma.fAQ.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FAQCreateManyArgs>(args?: SelectSubset<T, FAQCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FAQS and returns the data saved in the database.
     * @param {FAQCreateManyAndReturnArgs} args - Arguments to create many FAQS.
     * @example
     * // Create many FAQS
     * const fAQ = await prisma.fAQ.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FAQS and only return the `id`
     * const fAQWithIdOnly = await prisma.fAQ.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FAQCreateManyAndReturnArgs>(args?: SelectSubset<T, FAQCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FAQ.
     * @param {FAQDeleteArgs} args - Arguments to delete one FAQ.
     * @example
     * // Delete one FAQ
     * const FAQ = await prisma.fAQ.delete({
     *   where: {
     *     // ... filter to delete one FAQ
     *   }
     * })
     * 
     */
    delete<T extends FAQDeleteArgs>(args: SelectSubset<T, FAQDeleteArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FAQ.
     * @param {FAQUpdateArgs} args - Arguments to update one FAQ.
     * @example
     * // Update one FAQ
     * const fAQ = await prisma.fAQ.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FAQUpdateArgs>(args: SelectSubset<T, FAQUpdateArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FAQS.
     * @param {FAQDeleteManyArgs} args - Arguments to filter FAQS to delete.
     * @example
     * // Delete a few FAQS
     * const { count } = await prisma.fAQ.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FAQDeleteManyArgs>(args?: SelectSubset<T, FAQDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FAQS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FAQS
     * const fAQ = await prisma.fAQ.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FAQUpdateManyArgs>(args: SelectSubset<T, FAQUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FAQS and returns the data updated in the database.
     * @param {FAQUpdateManyAndReturnArgs} args - Arguments to update many FAQS.
     * @example
     * // Update many FAQS
     * const fAQ = await prisma.fAQ.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FAQS and only return the `id`
     * const fAQWithIdOnly = await prisma.fAQ.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FAQUpdateManyAndReturnArgs>(args: SelectSubset<T, FAQUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FAQ.
     * @param {FAQUpsertArgs} args - Arguments to update or create a FAQ.
     * @example
     * // Update or create a FAQ
     * const fAQ = await prisma.fAQ.upsert({
     *   create: {
     *     // ... data to create a FAQ
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FAQ we want to update
     *   }
     * })
     */
    upsert<T extends FAQUpsertArgs>(args: SelectSubset<T, FAQUpsertArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FAQS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQCountArgs} args - Arguments to filter FAQS to count.
     * @example
     * // Count the number of FAQS
     * const count = await prisma.fAQ.count({
     *   where: {
     *     // ... the filter for the FAQS we want to count
     *   }
     * })
    **/
    count<T extends FAQCountArgs>(
      args?: Subset<T, FAQCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FAQCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FAQ.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FAQAggregateArgs>(args: Subset<T, FAQAggregateArgs>): Prisma.PrismaPromise<GetFAQAggregateType<T>>

    /**
     * Group by FAQ.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FAQGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FAQGroupByArgs['orderBy'] }
        : { orderBy?: FAQGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FAQGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFAQGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FAQ model
   */
  readonly fields: FAQFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FAQ.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FAQClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FAQ model
   */
  interface FAQFieldRefs {
    readonly id: FieldRef<"FAQ", 'String'>
    readonly questionUz: FieldRef<"FAQ", 'String'>
    readonly questionRu: FieldRef<"FAQ", 'String'>
    readonly questionEn: FieldRef<"FAQ", 'String'>
    readonly answerUz: FieldRef<"FAQ", 'String'>
    readonly answerRu: FieldRef<"FAQ", 'String'>
    readonly answerEn: FieldRef<"FAQ", 'String'>
    readonly createdAt: FieldRef<"FAQ", 'DateTime'>
    readonly updatedAt: FieldRef<"FAQ", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FAQ findUnique
   */
  export type FAQFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ findUniqueOrThrow
   */
  export type FAQFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ findFirst
   */
  export type FAQFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FAQS.
     */
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ findFirstOrThrow
   */
  export type FAQFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FAQS.
     */
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ findMany
   */
  export type FAQFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQS to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ create
   */
  export type FAQCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data needed to create a FAQ.
     */
    data: XOR<FAQCreateInput, FAQUncheckedCreateInput>
  }

  /**
   * FAQ createMany
   */
  export type FAQCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FAQS.
     */
    data: FAQCreateManyInput | FAQCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FAQ createManyAndReturn
   */
  export type FAQCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data used to create many FAQS.
     */
    data: FAQCreateManyInput | FAQCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FAQ update
   */
  export type FAQUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data needed to update a FAQ.
     */
    data: XOR<FAQUpdateInput, FAQUncheckedUpdateInput>
    /**
     * Choose, which FAQ to update.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ updateMany
   */
  export type FAQUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FAQS.
     */
    data: XOR<FAQUpdateManyMutationInput, FAQUncheckedUpdateManyInput>
    /**
     * Filter which FAQS to update
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to update.
     */
    limit?: number
  }

  /**
   * FAQ updateManyAndReturn
   */
  export type FAQUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data used to update FAQS.
     */
    data: XOR<FAQUpdateManyMutationInput, FAQUncheckedUpdateManyInput>
    /**
     * Filter which FAQS to update
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to update.
     */
    limit?: number
  }

  /**
   * FAQ upsert
   */
  export type FAQUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The filter to search for the FAQ to update in case it exists.
     */
    where: FAQWhereUniqueInput
    /**
     * In case the FAQ found by the `where` argument doesn't exist, create a new FAQ with this data.
     */
    create: XOR<FAQCreateInput, FAQUncheckedCreateInput>
    /**
     * In case the FAQ was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FAQUpdateInput, FAQUncheckedUpdateInput>
  }

  /**
   * FAQ delete
   */
  export type FAQDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter which FAQ to delete.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ deleteMany
   */
  export type FAQDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FAQS to delete
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to delete.
     */
    limit?: number
  }

  /**
   * FAQ without action
   */
  export type FAQDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
  }


  /**
   * Model Showcase
   */

  export type AggregateShowcase = {
    _count: ShowcaseCountAggregateOutputType | null
    _min: ShowcaseMinAggregateOutputType | null
    _max: ShowcaseMaxAggregateOutputType | null
  }

  export type ShowcaseMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    descriptionUz: string | null
    descriptionRu: string | null
    descriptionEn: string | null
    image: string | null
    link: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShowcaseMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    descriptionUz: string | null
    descriptionRu: string | null
    descriptionEn: string | null
    image: string | null
    link: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShowcaseCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRu: number
    nameEn: number
    descriptionUz: number
    descriptionRu: number
    descriptionEn: number
    image: number
    link: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShowcaseMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    descriptionUz?: true
    descriptionRu?: true
    descriptionEn?: true
    image?: true
    link?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShowcaseMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    descriptionUz?: true
    descriptionRu?: true
    descriptionEn?: true
    image?: true
    link?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShowcaseCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    descriptionUz?: true
    descriptionRu?: true
    descriptionEn?: true
    image?: true
    link?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShowcaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Showcase to aggregate.
     */
    where?: ShowcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Showcases to fetch.
     */
    orderBy?: ShowcaseOrderByWithRelationInput | ShowcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShowcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Showcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Showcases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Showcases
    **/
    _count?: true | ShowcaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShowcaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShowcaseMaxAggregateInputType
  }

  export type GetShowcaseAggregateType<T extends ShowcaseAggregateArgs> = {
        [P in keyof T & keyof AggregateShowcase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShowcase[P]>
      : GetScalarType<T[P], AggregateShowcase[P]>
  }




  export type ShowcaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShowcaseWhereInput
    orderBy?: ShowcaseOrderByWithAggregationInput | ShowcaseOrderByWithAggregationInput[]
    by: ShowcaseScalarFieldEnum[] | ShowcaseScalarFieldEnum
    having?: ShowcaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShowcaseCountAggregateInputType | true
    _min?: ShowcaseMinAggregateInputType
    _max?: ShowcaseMaxAggregateInputType
  }

  export type ShowcaseGroupByOutputType = {
    id: string
    nameUz: string
    nameRu: string | null
    nameEn: string | null
    descriptionUz: string
    descriptionRu: string | null
    descriptionEn: string | null
    image: string
    link: string
    createdAt: Date
    updatedAt: Date
    _count: ShowcaseCountAggregateOutputType | null
    _min: ShowcaseMinAggregateOutputType | null
    _max: ShowcaseMaxAggregateOutputType | null
  }

  type GetShowcaseGroupByPayload<T extends ShowcaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShowcaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShowcaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShowcaseGroupByOutputType[P]>
            : GetScalarType<T[P], ShowcaseGroupByOutputType[P]>
        }
      >
    >


  export type ShowcaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    descriptionUz?: boolean
    descriptionRu?: boolean
    descriptionEn?: boolean
    image?: boolean
    link?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["showcase"]>

  export type ShowcaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    descriptionUz?: boolean
    descriptionRu?: boolean
    descriptionEn?: boolean
    image?: boolean
    link?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["showcase"]>

  export type ShowcaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    descriptionUz?: boolean
    descriptionRu?: boolean
    descriptionEn?: boolean
    image?: boolean
    link?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["showcase"]>

  export type ShowcaseSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    descriptionUz?: boolean
    descriptionRu?: boolean
    descriptionEn?: boolean
    image?: boolean
    link?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ShowcaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRu" | "nameEn" | "descriptionUz" | "descriptionRu" | "descriptionEn" | "image" | "link" | "createdAt" | "updatedAt", ExtArgs["result"]["showcase"]>

  export type $ShowcasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Showcase"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRu: string | null
      nameEn: string | null
      descriptionUz: string
      descriptionRu: string | null
      descriptionEn: string | null
      image: string
      link: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["showcase"]>
    composites: {}
  }

  type ShowcaseGetPayload<S extends boolean | null | undefined | ShowcaseDefaultArgs> = $Result.GetResult<Prisma.$ShowcasePayload, S>

  type ShowcaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShowcaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShowcaseCountAggregateInputType | true
    }

  export interface ShowcaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Showcase'], meta: { name: 'Showcase' } }
    /**
     * Find zero or one Showcase that matches the filter.
     * @param {ShowcaseFindUniqueArgs} args - Arguments to find a Showcase
     * @example
     * // Get one Showcase
     * const showcase = await prisma.showcase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShowcaseFindUniqueArgs>(args: SelectSubset<T, ShowcaseFindUniqueArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Showcase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShowcaseFindUniqueOrThrowArgs} args - Arguments to find a Showcase
     * @example
     * // Get one Showcase
     * const showcase = await prisma.showcase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShowcaseFindUniqueOrThrowArgs>(args: SelectSubset<T, ShowcaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Showcase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowcaseFindFirstArgs} args - Arguments to find a Showcase
     * @example
     * // Get one Showcase
     * const showcase = await prisma.showcase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShowcaseFindFirstArgs>(args?: SelectSubset<T, ShowcaseFindFirstArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Showcase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowcaseFindFirstOrThrowArgs} args - Arguments to find a Showcase
     * @example
     * // Get one Showcase
     * const showcase = await prisma.showcase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShowcaseFindFirstOrThrowArgs>(args?: SelectSubset<T, ShowcaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Showcases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowcaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Showcases
     * const showcases = await prisma.showcase.findMany()
     * 
     * // Get first 10 Showcases
     * const showcases = await prisma.showcase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const showcaseWithIdOnly = await prisma.showcase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShowcaseFindManyArgs>(args?: SelectSubset<T, ShowcaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Showcase.
     * @param {ShowcaseCreateArgs} args - Arguments to create a Showcase.
     * @example
     * // Create one Showcase
     * const Showcase = await prisma.showcase.create({
     *   data: {
     *     // ... data to create a Showcase
     *   }
     * })
     * 
     */
    create<T extends ShowcaseCreateArgs>(args: SelectSubset<T, ShowcaseCreateArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Showcases.
     * @param {ShowcaseCreateManyArgs} args - Arguments to create many Showcases.
     * @example
     * // Create many Showcases
     * const showcase = await prisma.showcase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShowcaseCreateManyArgs>(args?: SelectSubset<T, ShowcaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Showcases and returns the data saved in the database.
     * @param {ShowcaseCreateManyAndReturnArgs} args - Arguments to create many Showcases.
     * @example
     * // Create many Showcases
     * const showcase = await prisma.showcase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Showcases and only return the `id`
     * const showcaseWithIdOnly = await prisma.showcase.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShowcaseCreateManyAndReturnArgs>(args?: SelectSubset<T, ShowcaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Showcase.
     * @param {ShowcaseDeleteArgs} args - Arguments to delete one Showcase.
     * @example
     * // Delete one Showcase
     * const Showcase = await prisma.showcase.delete({
     *   where: {
     *     // ... filter to delete one Showcase
     *   }
     * })
     * 
     */
    delete<T extends ShowcaseDeleteArgs>(args: SelectSubset<T, ShowcaseDeleteArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Showcase.
     * @param {ShowcaseUpdateArgs} args - Arguments to update one Showcase.
     * @example
     * // Update one Showcase
     * const showcase = await prisma.showcase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShowcaseUpdateArgs>(args: SelectSubset<T, ShowcaseUpdateArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Showcases.
     * @param {ShowcaseDeleteManyArgs} args - Arguments to filter Showcases to delete.
     * @example
     * // Delete a few Showcases
     * const { count } = await prisma.showcase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShowcaseDeleteManyArgs>(args?: SelectSubset<T, ShowcaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Showcases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowcaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Showcases
     * const showcase = await prisma.showcase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShowcaseUpdateManyArgs>(args: SelectSubset<T, ShowcaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Showcases and returns the data updated in the database.
     * @param {ShowcaseUpdateManyAndReturnArgs} args - Arguments to update many Showcases.
     * @example
     * // Update many Showcases
     * const showcase = await prisma.showcase.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Showcases and only return the `id`
     * const showcaseWithIdOnly = await prisma.showcase.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShowcaseUpdateManyAndReturnArgs>(args: SelectSubset<T, ShowcaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Showcase.
     * @param {ShowcaseUpsertArgs} args - Arguments to update or create a Showcase.
     * @example
     * // Update or create a Showcase
     * const showcase = await prisma.showcase.upsert({
     *   create: {
     *     // ... data to create a Showcase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Showcase we want to update
     *   }
     * })
     */
    upsert<T extends ShowcaseUpsertArgs>(args: SelectSubset<T, ShowcaseUpsertArgs<ExtArgs>>): Prisma__ShowcaseClient<$Result.GetResult<Prisma.$ShowcasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Showcases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowcaseCountArgs} args - Arguments to filter Showcases to count.
     * @example
     * // Count the number of Showcases
     * const count = await prisma.showcase.count({
     *   where: {
     *     // ... the filter for the Showcases we want to count
     *   }
     * })
    **/
    count<T extends ShowcaseCountArgs>(
      args?: Subset<T, ShowcaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShowcaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Showcase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowcaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShowcaseAggregateArgs>(args: Subset<T, ShowcaseAggregateArgs>): Prisma.PrismaPromise<GetShowcaseAggregateType<T>>

    /**
     * Group by Showcase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowcaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShowcaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShowcaseGroupByArgs['orderBy'] }
        : { orderBy?: ShowcaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShowcaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShowcaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Showcase model
   */
  readonly fields: ShowcaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Showcase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShowcaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Showcase model
   */
  interface ShowcaseFieldRefs {
    readonly id: FieldRef<"Showcase", 'String'>
    readonly nameUz: FieldRef<"Showcase", 'String'>
    readonly nameRu: FieldRef<"Showcase", 'String'>
    readonly nameEn: FieldRef<"Showcase", 'String'>
    readonly descriptionUz: FieldRef<"Showcase", 'String'>
    readonly descriptionRu: FieldRef<"Showcase", 'String'>
    readonly descriptionEn: FieldRef<"Showcase", 'String'>
    readonly image: FieldRef<"Showcase", 'String'>
    readonly link: FieldRef<"Showcase", 'String'>
    readonly createdAt: FieldRef<"Showcase", 'DateTime'>
    readonly updatedAt: FieldRef<"Showcase", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Showcase findUnique
   */
  export type ShowcaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * Filter, which Showcase to fetch.
     */
    where: ShowcaseWhereUniqueInput
  }

  /**
   * Showcase findUniqueOrThrow
   */
  export type ShowcaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * Filter, which Showcase to fetch.
     */
    where: ShowcaseWhereUniqueInput
  }

  /**
   * Showcase findFirst
   */
  export type ShowcaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * Filter, which Showcase to fetch.
     */
    where?: ShowcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Showcases to fetch.
     */
    orderBy?: ShowcaseOrderByWithRelationInput | ShowcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Showcases.
     */
    cursor?: ShowcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Showcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Showcases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Showcases.
     */
    distinct?: ShowcaseScalarFieldEnum | ShowcaseScalarFieldEnum[]
  }

  /**
   * Showcase findFirstOrThrow
   */
  export type ShowcaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * Filter, which Showcase to fetch.
     */
    where?: ShowcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Showcases to fetch.
     */
    orderBy?: ShowcaseOrderByWithRelationInput | ShowcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Showcases.
     */
    cursor?: ShowcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Showcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Showcases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Showcases.
     */
    distinct?: ShowcaseScalarFieldEnum | ShowcaseScalarFieldEnum[]
  }

  /**
   * Showcase findMany
   */
  export type ShowcaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * Filter, which Showcases to fetch.
     */
    where?: ShowcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Showcases to fetch.
     */
    orderBy?: ShowcaseOrderByWithRelationInput | ShowcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Showcases.
     */
    cursor?: ShowcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Showcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Showcases.
     */
    skip?: number
    distinct?: ShowcaseScalarFieldEnum | ShowcaseScalarFieldEnum[]
  }

  /**
   * Showcase create
   */
  export type ShowcaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * The data needed to create a Showcase.
     */
    data: XOR<ShowcaseCreateInput, ShowcaseUncheckedCreateInput>
  }

  /**
   * Showcase createMany
   */
  export type ShowcaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Showcases.
     */
    data: ShowcaseCreateManyInput | ShowcaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Showcase createManyAndReturn
   */
  export type ShowcaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * The data used to create many Showcases.
     */
    data: ShowcaseCreateManyInput | ShowcaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Showcase update
   */
  export type ShowcaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * The data needed to update a Showcase.
     */
    data: XOR<ShowcaseUpdateInput, ShowcaseUncheckedUpdateInput>
    /**
     * Choose, which Showcase to update.
     */
    where: ShowcaseWhereUniqueInput
  }

  /**
   * Showcase updateMany
   */
  export type ShowcaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Showcases.
     */
    data: XOR<ShowcaseUpdateManyMutationInput, ShowcaseUncheckedUpdateManyInput>
    /**
     * Filter which Showcases to update
     */
    where?: ShowcaseWhereInput
    /**
     * Limit how many Showcases to update.
     */
    limit?: number
  }

  /**
   * Showcase updateManyAndReturn
   */
  export type ShowcaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * The data used to update Showcases.
     */
    data: XOR<ShowcaseUpdateManyMutationInput, ShowcaseUncheckedUpdateManyInput>
    /**
     * Filter which Showcases to update
     */
    where?: ShowcaseWhereInput
    /**
     * Limit how many Showcases to update.
     */
    limit?: number
  }

  /**
   * Showcase upsert
   */
  export type ShowcaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * The filter to search for the Showcase to update in case it exists.
     */
    where: ShowcaseWhereUniqueInput
    /**
     * In case the Showcase found by the `where` argument doesn't exist, create a new Showcase with this data.
     */
    create: XOR<ShowcaseCreateInput, ShowcaseUncheckedCreateInput>
    /**
     * In case the Showcase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShowcaseUpdateInput, ShowcaseUncheckedUpdateInput>
  }

  /**
   * Showcase delete
   */
  export type ShowcaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
    /**
     * Filter which Showcase to delete.
     */
    where: ShowcaseWhereUniqueInput
  }

  /**
   * Showcase deleteMany
   */
  export type ShowcaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Showcases to delete
     */
    where?: ShowcaseWhereInput
    /**
     * Limit how many Showcases to delete.
     */
    limit?: number
  }

  /**
   * Showcase without action
   */
  export type ShowcaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Showcase
     */
    select?: ShowcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Showcase
     */
    omit?: ShowcaseOmit<ExtArgs> | null
  }


  /**
   * Model Partner
   */

  export type AggregatePartner = {
    _count: PartnerCountAggregateOutputType | null
    _min: PartnerMinAggregateOutputType | null
    _max: PartnerMaxAggregateOutputType | null
  }

  export type PartnerMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    image: string | null
    link: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartnerMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRu: string | null
    nameEn: string | null
    image: string | null
    link: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartnerCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRu: number
    nameEn: number
    image: number
    link: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PartnerMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    image?: true
    link?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartnerMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    image?: true
    link?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartnerCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRu?: true
    nameEn?: true
    image?: true
    link?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PartnerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partner to aggregate.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Partners
    **/
    _count?: true | PartnerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartnerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartnerMaxAggregateInputType
  }

  export type GetPartnerAggregateType<T extends PartnerAggregateArgs> = {
        [P in keyof T & keyof AggregatePartner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartner[P]>
      : GetScalarType<T[P], AggregatePartner[P]>
  }




  export type PartnerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartnerWhereInput
    orderBy?: PartnerOrderByWithAggregationInput | PartnerOrderByWithAggregationInput[]
    by: PartnerScalarFieldEnum[] | PartnerScalarFieldEnum
    having?: PartnerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartnerCountAggregateInputType | true
    _min?: PartnerMinAggregateInputType
    _max?: PartnerMaxAggregateInputType
  }

  export type PartnerGroupByOutputType = {
    id: string
    nameUz: string
    nameRu: string | null
    nameEn: string | null
    image: string
    link: string | null
    createdAt: Date
    updatedAt: Date
    _count: PartnerCountAggregateOutputType | null
    _min: PartnerMinAggregateOutputType | null
    _max: PartnerMaxAggregateOutputType | null
  }

  type GetPartnerGroupByPayload<T extends PartnerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartnerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartnerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartnerGroupByOutputType[P]>
            : GetScalarType<T[P], PartnerGroupByOutputType[P]>
        }
      >
    >


  export type PartnerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    image?: boolean
    link?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["partner"]>

  export type PartnerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    image?: boolean
    link?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["partner"]>

  export type PartnerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    image?: boolean
    link?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["partner"]>

  export type PartnerSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRu?: boolean
    nameEn?: boolean
    image?: boolean
    link?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PartnerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRu" | "nameEn" | "image" | "link" | "createdAt" | "updatedAt", ExtArgs["result"]["partner"]>

  export type $PartnerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Partner"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRu: string | null
      nameEn: string | null
      image: string
      link: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["partner"]>
    composites: {}
  }

  type PartnerGetPayload<S extends boolean | null | undefined | PartnerDefaultArgs> = $Result.GetResult<Prisma.$PartnerPayload, S>

  type PartnerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PartnerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartnerCountAggregateInputType | true
    }

  export interface PartnerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Partner'], meta: { name: 'Partner' } }
    /**
     * Find zero or one Partner that matches the filter.
     * @param {PartnerFindUniqueArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartnerFindUniqueArgs>(args: SelectSubset<T, PartnerFindUniqueArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Partner that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PartnerFindUniqueOrThrowArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartnerFindUniqueOrThrowArgs>(args: SelectSubset<T, PartnerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerFindFirstArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartnerFindFirstArgs>(args?: SelectSubset<T, PartnerFindFirstArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerFindFirstOrThrowArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartnerFindFirstOrThrowArgs>(args?: SelectSubset<T, PartnerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Partners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partners
     * const partners = await prisma.partner.findMany()
     * 
     * // Get first 10 Partners
     * const partners = await prisma.partner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partnerWithIdOnly = await prisma.partner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartnerFindManyArgs>(args?: SelectSubset<T, PartnerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Partner.
     * @param {PartnerCreateArgs} args - Arguments to create a Partner.
     * @example
     * // Create one Partner
     * const Partner = await prisma.partner.create({
     *   data: {
     *     // ... data to create a Partner
     *   }
     * })
     * 
     */
    create<T extends PartnerCreateArgs>(args: SelectSubset<T, PartnerCreateArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Partners.
     * @param {PartnerCreateManyArgs} args - Arguments to create many Partners.
     * @example
     * // Create many Partners
     * const partner = await prisma.partner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartnerCreateManyArgs>(args?: SelectSubset<T, PartnerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Partners and returns the data saved in the database.
     * @param {PartnerCreateManyAndReturnArgs} args - Arguments to create many Partners.
     * @example
     * // Create many Partners
     * const partner = await prisma.partner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Partners and only return the `id`
     * const partnerWithIdOnly = await prisma.partner.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartnerCreateManyAndReturnArgs>(args?: SelectSubset<T, PartnerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Partner.
     * @param {PartnerDeleteArgs} args - Arguments to delete one Partner.
     * @example
     * // Delete one Partner
     * const Partner = await prisma.partner.delete({
     *   where: {
     *     // ... filter to delete one Partner
     *   }
     * })
     * 
     */
    delete<T extends PartnerDeleteArgs>(args: SelectSubset<T, PartnerDeleteArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Partner.
     * @param {PartnerUpdateArgs} args - Arguments to update one Partner.
     * @example
     * // Update one Partner
     * const partner = await prisma.partner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartnerUpdateArgs>(args: SelectSubset<T, PartnerUpdateArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Partners.
     * @param {PartnerDeleteManyArgs} args - Arguments to filter Partners to delete.
     * @example
     * // Delete a few Partners
     * const { count } = await prisma.partner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartnerDeleteManyArgs>(args?: SelectSubset<T, PartnerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partners
     * const partner = await prisma.partner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartnerUpdateManyArgs>(args: SelectSubset<T, PartnerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partners and returns the data updated in the database.
     * @param {PartnerUpdateManyAndReturnArgs} args - Arguments to update many Partners.
     * @example
     * // Update many Partners
     * const partner = await prisma.partner.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Partners and only return the `id`
     * const partnerWithIdOnly = await prisma.partner.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PartnerUpdateManyAndReturnArgs>(args: SelectSubset<T, PartnerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Partner.
     * @param {PartnerUpsertArgs} args - Arguments to update or create a Partner.
     * @example
     * // Update or create a Partner
     * const partner = await prisma.partner.upsert({
     *   create: {
     *     // ... data to create a Partner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partner we want to update
     *   }
     * })
     */
    upsert<T extends PartnerUpsertArgs>(args: SelectSubset<T, PartnerUpsertArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerCountArgs} args - Arguments to filter Partners to count.
     * @example
     * // Count the number of Partners
     * const count = await prisma.partner.count({
     *   where: {
     *     // ... the filter for the Partners we want to count
     *   }
     * })
    **/
    count<T extends PartnerCountArgs>(
      args?: Subset<T, PartnerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartnerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Partner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartnerAggregateArgs>(args: Subset<T, PartnerAggregateArgs>): Prisma.PrismaPromise<GetPartnerAggregateType<T>>

    /**
     * Group by Partner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartnerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartnerGroupByArgs['orderBy'] }
        : { orderBy?: PartnerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartnerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartnerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Partner model
   */
  readonly fields: PartnerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Partner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartnerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Partner model
   */
  interface PartnerFieldRefs {
    readonly id: FieldRef<"Partner", 'String'>
    readonly nameUz: FieldRef<"Partner", 'String'>
    readonly nameRu: FieldRef<"Partner", 'String'>
    readonly nameEn: FieldRef<"Partner", 'String'>
    readonly image: FieldRef<"Partner", 'String'>
    readonly link: FieldRef<"Partner", 'String'>
    readonly createdAt: FieldRef<"Partner", 'DateTime'>
    readonly updatedAt: FieldRef<"Partner", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Partner findUnique
   */
  export type PartnerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner findUniqueOrThrow
   */
  export type PartnerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner findFirst
   */
  export type PartnerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partners.
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partners.
     */
    distinct?: PartnerScalarFieldEnum | PartnerScalarFieldEnum[]
  }

  /**
   * Partner findFirstOrThrow
   */
  export type PartnerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partners.
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partners.
     */
    distinct?: PartnerScalarFieldEnum | PartnerScalarFieldEnum[]
  }

  /**
   * Partner findMany
   */
  export type PartnerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Partners.
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    distinct?: PartnerScalarFieldEnum | PartnerScalarFieldEnum[]
  }

  /**
   * Partner create
   */
  export type PartnerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * The data needed to create a Partner.
     */
    data: XOR<PartnerCreateInput, PartnerUncheckedCreateInput>
  }

  /**
   * Partner createMany
   */
  export type PartnerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Partners.
     */
    data: PartnerCreateManyInput | PartnerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Partner createManyAndReturn
   */
  export type PartnerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * The data used to create many Partners.
     */
    data: PartnerCreateManyInput | PartnerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Partner update
   */
  export type PartnerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * The data needed to update a Partner.
     */
    data: XOR<PartnerUpdateInput, PartnerUncheckedUpdateInput>
    /**
     * Choose, which Partner to update.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner updateMany
   */
  export type PartnerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Partners.
     */
    data: XOR<PartnerUpdateManyMutationInput, PartnerUncheckedUpdateManyInput>
    /**
     * Filter which Partners to update
     */
    where?: PartnerWhereInput
    /**
     * Limit how many Partners to update.
     */
    limit?: number
  }

  /**
   * Partner updateManyAndReturn
   */
  export type PartnerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * The data used to update Partners.
     */
    data: XOR<PartnerUpdateManyMutationInput, PartnerUncheckedUpdateManyInput>
    /**
     * Filter which Partners to update
     */
    where?: PartnerWhereInput
    /**
     * Limit how many Partners to update.
     */
    limit?: number
  }

  /**
   * Partner upsert
   */
  export type PartnerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * The filter to search for the Partner to update in case it exists.
     */
    where: PartnerWhereUniqueInput
    /**
     * In case the Partner found by the `where` argument doesn't exist, create a new Partner with this data.
     */
    create: XOR<PartnerCreateInput, PartnerUncheckedCreateInput>
    /**
     * In case the Partner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartnerUpdateInput, PartnerUncheckedUpdateInput>
  }

  /**
   * Partner delete
   */
  export type PartnerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Filter which Partner to delete.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner deleteMany
   */
  export type PartnerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partners to delete
     */
    where?: PartnerWhereInput
    /**
     * Limit how many Partners to delete.
     */
    limit?: number
  }

  /**
   * Partner without action
   */
  export type PartnerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
  }


  /**
   * Model SiteMetadata
   */

  export type AggregateSiteMetadata = {
    _count: SiteMetadataCountAggregateOutputType | null
    _min: SiteMetadataMinAggregateOutputType | null
    _max: SiteMetadataMaxAggregateOutputType | null
  }

  export type SiteMetadataMinAggregateOutputType = {
    id: string | null
    aboutUz: string | null
    aboutRu: string | null
    aboutEn: string | null
    privacyPolicyUz: string | null
    privacyPolicyRu: string | null
    privacyPolicyEn: string | null
    email: string | null
    phoneNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SiteMetadataMaxAggregateOutputType = {
    id: string | null
    aboutUz: string | null
    aboutRu: string | null
    aboutEn: string | null
    privacyPolicyUz: string | null
    privacyPolicyRu: string | null
    privacyPolicyEn: string | null
    email: string | null
    phoneNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SiteMetadataCountAggregateOutputType = {
    id: number
    aboutUz: number
    aboutRu: number
    aboutEn: number
    privacyPolicyUz: number
    privacyPolicyRu: number
    privacyPolicyEn: number
    email: number
    phoneNumber: number
    socialMedia: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SiteMetadataMinAggregateInputType = {
    id?: true
    aboutUz?: true
    aboutRu?: true
    aboutEn?: true
    privacyPolicyUz?: true
    privacyPolicyRu?: true
    privacyPolicyEn?: true
    email?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SiteMetadataMaxAggregateInputType = {
    id?: true
    aboutUz?: true
    aboutRu?: true
    aboutEn?: true
    privacyPolicyUz?: true
    privacyPolicyRu?: true
    privacyPolicyEn?: true
    email?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SiteMetadataCountAggregateInputType = {
    id?: true
    aboutUz?: true
    aboutRu?: true
    aboutEn?: true
    privacyPolicyUz?: true
    privacyPolicyRu?: true
    privacyPolicyEn?: true
    email?: true
    phoneNumber?: true
    socialMedia?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SiteMetadataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SiteMetadata to aggregate.
     */
    where?: SiteMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteMetadata to fetch.
     */
    orderBy?: SiteMetadataOrderByWithRelationInput | SiteMetadataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteMetadata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SiteMetadata
    **/
    _count?: true | SiteMetadataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteMetadataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteMetadataMaxAggregateInputType
  }

  export type GetSiteMetadataAggregateType<T extends SiteMetadataAggregateArgs> = {
        [P in keyof T & keyof AggregateSiteMetadata]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSiteMetadata[P]>
      : GetScalarType<T[P], AggregateSiteMetadata[P]>
  }




  export type SiteMetadataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteMetadataWhereInput
    orderBy?: SiteMetadataOrderByWithAggregationInput | SiteMetadataOrderByWithAggregationInput[]
    by: SiteMetadataScalarFieldEnum[] | SiteMetadataScalarFieldEnum
    having?: SiteMetadataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteMetadataCountAggregateInputType | true
    _min?: SiteMetadataMinAggregateInputType
    _max?: SiteMetadataMaxAggregateInputType
  }

  export type SiteMetadataGroupByOutputType = {
    id: string
    aboutUz: string
    aboutRu: string | null
    aboutEn: string | null
    privacyPolicyUz: string
    privacyPolicyRu: string | null
    privacyPolicyEn: string | null
    email: string
    phoneNumber: string
    socialMedia: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: SiteMetadataCountAggregateOutputType | null
    _min: SiteMetadataMinAggregateOutputType | null
    _max: SiteMetadataMaxAggregateOutputType | null
  }

  type GetSiteMetadataGroupByPayload<T extends SiteMetadataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SiteMetadataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteMetadataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteMetadataGroupByOutputType[P]>
            : GetScalarType<T[P], SiteMetadataGroupByOutputType[P]>
        }
      >
    >


  export type SiteMetadataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    aboutUz?: boolean
    aboutRu?: boolean
    aboutEn?: boolean
    privacyPolicyUz?: boolean
    privacyPolicyRu?: boolean
    privacyPolicyEn?: boolean
    email?: boolean
    phoneNumber?: boolean
    socialMedia?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["siteMetadata"]>

  export type SiteMetadataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    aboutUz?: boolean
    aboutRu?: boolean
    aboutEn?: boolean
    privacyPolicyUz?: boolean
    privacyPolicyRu?: boolean
    privacyPolicyEn?: boolean
    email?: boolean
    phoneNumber?: boolean
    socialMedia?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["siteMetadata"]>

  export type SiteMetadataSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    aboutUz?: boolean
    aboutRu?: boolean
    aboutEn?: boolean
    privacyPolicyUz?: boolean
    privacyPolicyRu?: boolean
    privacyPolicyEn?: boolean
    email?: boolean
    phoneNumber?: boolean
    socialMedia?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["siteMetadata"]>

  export type SiteMetadataSelectScalar = {
    id?: boolean
    aboutUz?: boolean
    aboutRu?: boolean
    aboutEn?: boolean
    privacyPolicyUz?: boolean
    privacyPolicyRu?: boolean
    privacyPolicyEn?: boolean
    email?: boolean
    phoneNumber?: boolean
    socialMedia?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SiteMetadataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "aboutUz" | "aboutRu" | "aboutEn" | "privacyPolicyUz" | "privacyPolicyRu" | "privacyPolicyEn" | "email" | "phoneNumber" | "socialMedia" | "createdAt" | "updatedAt", ExtArgs["result"]["siteMetadata"]>

  export type $SiteMetadataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SiteMetadata"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      aboutUz: string
      aboutRu: string | null
      aboutEn: string | null
      privacyPolicyUz: string
      privacyPolicyRu: string | null
      privacyPolicyEn: string | null
      email: string
      phoneNumber: string
      socialMedia: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["siteMetadata"]>
    composites: {}
  }

  type SiteMetadataGetPayload<S extends boolean | null | undefined | SiteMetadataDefaultArgs> = $Result.GetResult<Prisma.$SiteMetadataPayload, S>

  type SiteMetadataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SiteMetadataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SiteMetadataCountAggregateInputType | true
    }

  export interface SiteMetadataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SiteMetadata'], meta: { name: 'SiteMetadata' } }
    /**
     * Find zero or one SiteMetadata that matches the filter.
     * @param {SiteMetadataFindUniqueArgs} args - Arguments to find a SiteMetadata
     * @example
     * // Get one SiteMetadata
     * const siteMetadata = await prisma.siteMetadata.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SiteMetadataFindUniqueArgs>(args: SelectSubset<T, SiteMetadataFindUniqueArgs<ExtArgs>>): Prisma__SiteMetadataClient<$Result.GetResult<Prisma.$SiteMetadataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SiteMetadata that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SiteMetadataFindUniqueOrThrowArgs} args - Arguments to find a SiteMetadata
     * @example
     * // Get one SiteMetadata
     * const siteMetadata = await prisma.siteMetadata.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SiteMetadataFindUniqueOrThrowArgs>(args: SelectSubset<T, SiteMetadataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SiteMetadataClient<$Result.GetResult<Prisma.$SiteMetadataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SiteMetadata that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteMetadataFindFirstArgs} args - Arguments to find a SiteMetadata
     * @example
     * // Get one SiteMetadata
     * const siteMetadata = await prisma.siteMetadata.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SiteMetadataFindFirstArgs>(args?: SelectSubset<T, SiteMetadataFindFirstArgs<ExtArgs>>): Prisma__SiteMetadataClient<$Result.GetResult<Prisma.$SiteMetadataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SiteMetadata that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteMetadataFindFirstOrThrowArgs} args - Arguments to find a SiteMetadata
     * @example
     * // Get one SiteMetadata
     * const siteMetadata = await prisma.siteMetadata.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SiteMetadataFindFirstOrThrowArgs>(args?: SelectSubset<T, SiteMetadataFindFirstOrThrowArgs<ExtArgs>>): Prisma__SiteMetadataClient<$Result.GetResult<Prisma.$SiteMetadataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SiteMetadata that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteMetadataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SiteMetadata
     * const siteMetadata = await prisma.siteMetadata.findMany()
     * 
     * // Get first 10 SiteMetadata
     * const siteMetadata = await prisma.siteMetadata.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteMetadataWithIdOnly = await prisma.siteMetadata.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SiteMetadataFindManyArgs>(args?: SelectSubset<T, SiteMetadataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SiteMetadataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SiteMetadata.
     * @param {SiteMetadataCreateArgs} args - Arguments to create a SiteMetadata.
     * @example
     * // Create one SiteMetadata
     * const SiteMetadata = await prisma.siteMetadata.create({
     *   data: {
     *     // ... data to create a SiteMetadata
     *   }
     * })
     * 
     */
    create<T extends SiteMetadataCreateArgs>(args: SelectSubset<T, SiteMetadataCreateArgs<ExtArgs>>): Prisma__SiteMetadataClient<$Result.GetResult<Prisma.$SiteMetadataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SiteMetadata.
     * @param {SiteMetadataCreateManyArgs} args - Arguments to create many SiteMetadata.
     * @example
     * // Create many SiteMetadata
     * const siteMetadata = await prisma.siteMetadata.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SiteMetadataCreateManyArgs>(args?: SelectSubset<T, SiteMetadataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SiteMetadata and returns the data saved in the database.
     * @param {SiteMetadataCreateManyAndReturnArgs} args - Arguments to create many SiteMetadata.
     * @example
     * // Create many SiteMetadata
     * const siteMetadata = await prisma.siteMetadata.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SiteMetadata and only return the `id`
     * const siteMetadataWithIdOnly = await prisma.siteMetadata.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SiteMetadataCreateManyAndReturnArgs>(args?: SelectSubset<T, SiteMetadataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SiteMetadataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SiteMetadata.
     * @param {SiteMetadataDeleteArgs} args - Arguments to delete one SiteMetadata.
     * @example
     * // Delete one SiteMetadata
     * const SiteMetadata = await prisma.siteMetadata.delete({
     *   where: {
     *     // ... filter to delete one SiteMetadata
     *   }
     * })
     * 
     */
    delete<T extends SiteMetadataDeleteArgs>(args: SelectSubset<T, SiteMetadataDeleteArgs<ExtArgs>>): Prisma__SiteMetadataClient<$Result.GetResult<Prisma.$SiteMetadataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SiteMetadata.
     * @param {SiteMetadataUpdateArgs} args - Arguments to update one SiteMetadata.
     * @example
     * // Update one SiteMetadata
     * const siteMetadata = await prisma.siteMetadata.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SiteMetadataUpdateArgs>(args: SelectSubset<T, SiteMetadataUpdateArgs<ExtArgs>>): Prisma__SiteMetadataClient<$Result.GetResult<Prisma.$SiteMetadataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SiteMetadata.
     * @param {SiteMetadataDeleteManyArgs} args - Arguments to filter SiteMetadata to delete.
     * @example
     * // Delete a few SiteMetadata
     * const { count } = await prisma.siteMetadata.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SiteMetadataDeleteManyArgs>(args?: SelectSubset<T, SiteMetadataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SiteMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteMetadataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SiteMetadata
     * const siteMetadata = await prisma.siteMetadata.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SiteMetadataUpdateManyArgs>(args: SelectSubset<T, SiteMetadataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SiteMetadata and returns the data updated in the database.
     * @param {SiteMetadataUpdateManyAndReturnArgs} args - Arguments to update many SiteMetadata.
     * @example
     * // Update many SiteMetadata
     * const siteMetadata = await prisma.siteMetadata.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SiteMetadata and only return the `id`
     * const siteMetadataWithIdOnly = await prisma.siteMetadata.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SiteMetadataUpdateManyAndReturnArgs>(args: SelectSubset<T, SiteMetadataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SiteMetadataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SiteMetadata.
     * @param {SiteMetadataUpsertArgs} args - Arguments to update or create a SiteMetadata.
     * @example
     * // Update or create a SiteMetadata
     * const siteMetadata = await prisma.siteMetadata.upsert({
     *   create: {
     *     // ... data to create a SiteMetadata
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SiteMetadata we want to update
     *   }
     * })
     */
    upsert<T extends SiteMetadataUpsertArgs>(args: SelectSubset<T, SiteMetadataUpsertArgs<ExtArgs>>): Prisma__SiteMetadataClient<$Result.GetResult<Prisma.$SiteMetadataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SiteMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteMetadataCountArgs} args - Arguments to filter SiteMetadata to count.
     * @example
     * // Count the number of SiteMetadata
     * const count = await prisma.siteMetadata.count({
     *   where: {
     *     // ... the filter for the SiteMetadata we want to count
     *   }
     * })
    **/
    count<T extends SiteMetadataCountArgs>(
      args?: Subset<T, SiteMetadataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteMetadataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SiteMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteMetadataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteMetadataAggregateArgs>(args: Subset<T, SiteMetadataAggregateArgs>): Prisma.PrismaPromise<GetSiteMetadataAggregateType<T>>

    /**
     * Group by SiteMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteMetadataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteMetadataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteMetadataGroupByArgs['orderBy'] }
        : { orderBy?: SiteMetadataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteMetadataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteMetadataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SiteMetadata model
   */
  readonly fields: SiteMetadataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SiteMetadata.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SiteMetadataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SiteMetadata model
   */
  interface SiteMetadataFieldRefs {
    readonly id: FieldRef<"SiteMetadata", 'String'>
    readonly aboutUz: FieldRef<"SiteMetadata", 'String'>
    readonly aboutRu: FieldRef<"SiteMetadata", 'String'>
    readonly aboutEn: FieldRef<"SiteMetadata", 'String'>
    readonly privacyPolicyUz: FieldRef<"SiteMetadata", 'String'>
    readonly privacyPolicyRu: FieldRef<"SiteMetadata", 'String'>
    readonly privacyPolicyEn: FieldRef<"SiteMetadata", 'String'>
    readonly email: FieldRef<"SiteMetadata", 'String'>
    readonly phoneNumber: FieldRef<"SiteMetadata", 'String'>
    readonly socialMedia: FieldRef<"SiteMetadata", 'Json'>
    readonly createdAt: FieldRef<"SiteMetadata", 'DateTime'>
    readonly updatedAt: FieldRef<"SiteMetadata", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SiteMetadata findUnique
   */
  export type SiteMetadataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteMetadata
     */
    select?: SiteMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteMetadata
     */
    omit?: SiteMetadataOmit<ExtArgs> | null
    /**
     * Filter, which SiteMetadata to fetch.
     */
    where: SiteMetadataWhereUniqueInput
  }

  /**
   * SiteMetadata findUniqueOrThrow
   */
  export type SiteMetadataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteMetadata
     */
    select?: SiteMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteMetadata
     */
    omit?: SiteMetadataOmit<ExtArgs> | null
    /**
     * Filter, which SiteMetadata to fetch.
     */
    where: SiteMetadataWhereUniqueInput
  }

  /**
   * SiteMetadata findFirst
   */
  export type SiteMetadataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteMetadata
     */
    select?: SiteMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteMetadata
     */
    omit?: SiteMetadataOmit<ExtArgs> | null
    /**
     * Filter, which SiteMetadata to fetch.
     */
    where?: SiteMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteMetadata to fetch.
     */
    orderBy?: SiteMetadataOrderByWithRelationInput | SiteMetadataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteMetadata.
     */
    cursor?: SiteMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteMetadata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteMetadata.
     */
    distinct?: SiteMetadataScalarFieldEnum | SiteMetadataScalarFieldEnum[]
  }

  /**
   * SiteMetadata findFirstOrThrow
   */
  export type SiteMetadataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteMetadata
     */
    select?: SiteMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteMetadata
     */
    omit?: SiteMetadataOmit<ExtArgs> | null
    /**
     * Filter, which SiteMetadata to fetch.
     */
    where?: SiteMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteMetadata to fetch.
     */
    orderBy?: SiteMetadataOrderByWithRelationInput | SiteMetadataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteMetadata.
     */
    cursor?: SiteMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteMetadata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteMetadata.
     */
    distinct?: SiteMetadataScalarFieldEnum | SiteMetadataScalarFieldEnum[]
  }

  /**
   * SiteMetadata findMany
   */
  export type SiteMetadataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteMetadata
     */
    select?: SiteMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteMetadata
     */
    omit?: SiteMetadataOmit<ExtArgs> | null
    /**
     * Filter, which SiteMetadata to fetch.
     */
    where?: SiteMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteMetadata to fetch.
     */
    orderBy?: SiteMetadataOrderByWithRelationInput | SiteMetadataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SiteMetadata.
     */
    cursor?: SiteMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteMetadata.
     */
    skip?: number
    distinct?: SiteMetadataScalarFieldEnum | SiteMetadataScalarFieldEnum[]
  }

  /**
   * SiteMetadata create
   */
  export type SiteMetadataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteMetadata
     */
    select?: SiteMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteMetadata
     */
    omit?: SiteMetadataOmit<ExtArgs> | null
    /**
     * The data needed to create a SiteMetadata.
     */
    data: XOR<SiteMetadataCreateInput, SiteMetadataUncheckedCreateInput>
  }

  /**
   * SiteMetadata createMany
   */
  export type SiteMetadataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SiteMetadata.
     */
    data: SiteMetadataCreateManyInput | SiteMetadataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SiteMetadata createManyAndReturn
   */
  export type SiteMetadataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteMetadata
     */
    select?: SiteMetadataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SiteMetadata
     */
    omit?: SiteMetadataOmit<ExtArgs> | null
    /**
     * The data used to create many SiteMetadata.
     */
    data: SiteMetadataCreateManyInput | SiteMetadataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SiteMetadata update
   */
  export type SiteMetadataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteMetadata
     */
    select?: SiteMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteMetadata
     */
    omit?: SiteMetadataOmit<ExtArgs> | null
    /**
     * The data needed to update a SiteMetadata.
     */
    data: XOR<SiteMetadataUpdateInput, SiteMetadataUncheckedUpdateInput>
    /**
     * Choose, which SiteMetadata to update.
     */
    where: SiteMetadataWhereUniqueInput
  }

  /**
   * SiteMetadata updateMany
   */
  export type SiteMetadataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SiteMetadata.
     */
    data: XOR<SiteMetadataUpdateManyMutationInput, SiteMetadataUncheckedUpdateManyInput>
    /**
     * Filter which SiteMetadata to update
     */
    where?: SiteMetadataWhereInput
    /**
     * Limit how many SiteMetadata to update.
     */
    limit?: number
  }

  /**
   * SiteMetadata updateManyAndReturn
   */
  export type SiteMetadataUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteMetadata
     */
    select?: SiteMetadataSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SiteMetadata
     */
    omit?: SiteMetadataOmit<ExtArgs> | null
    /**
     * The data used to update SiteMetadata.
     */
    data: XOR<SiteMetadataUpdateManyMutationInput, SiteMetadataUncheckedUpdateManyInput>
    /**
     * Filter which SiteMetadata to update
     */
    where?: SiteMetadataWhereInput
    /**
     * Limit how many SiteMetadata to update.
     */
    limit?: number
  }

  /**
   * SiteMetadata upsert
   */
  export type SiteMetadataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteMetadata
     */
    select?: SiteMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteMetadata
     */
    omit?: SiteMetadataOmit<ExtArgs> | null
    /**
     * The filter to search for the SiteMetadata to update in case it exists.
     */
    where: SiteMetadataWhereUniqueInput
    /**
     * In case the SiteMetadata found by the `where` argument doesn't exist, create a new SiteMetadata with this data.
     */
    create: XOR<SiteMetadataCreateInput, SiteMetadataUncheckedCreateInput>
    /**
     * In case the SiteMetadata was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteMetadataUpdateInput, SiteMetadataUncheckedUpdateInput>
  }

  /**
   * SiteMetadata delete
   */
  export type SiteMetadataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteMetadata
     */
    select?: SiteMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteMetadata
     */
    omit?: SiteMetadataOmit<ExtArgs> | null
    /**
     * Filter which SiteMetadata to delete.
     */
    where: SiteMetadataWhereUniqueInput
  }

  /**
   * SiteMetadata deleteMany
   */
  export type SiteMetadataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SiteMetadata to delete
     */
    where?: SiteMetadataWhereInput
    /**
     * Limit how many SiteMetadata to delete.
     */
    limit?: number
  }

  /**
   * SiteMetadata without action
   */
  export type SiteMetadataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteMetadata
     */
    select?: SiteMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteMetadata
     */
    omit?: SiteMetadataOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RegionScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRu: 'nameRu',
    nameEn: 'nameEn',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RegionScalarFieldEnum = (typeof RegionScalarFieldEnum)[keyof typeof RegionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    phoneNumber: 'phoneNumber',
    password: 'password',
    regionId: 'regionId',
    status: 'status',
    role: 'role',
    refreshToken: 'refreshToken',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRu: 'nameRu',
    nameEn: 'nameEn',
    taxId: 'taxId',
    bankCode: 'bankCode',
    bankAccount: 'bankAccount',
    bankName: 'bankName',
    oked: 'oked',
    address: 'address',
    ownerId: 'ownerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    ip: 'ip',
    userAgent: 'userAgent',
    device: 'device',
    brand: 'brand',
    model: 'model',
    os: 'os',
    osVersion: 'osVersion',
    client: 'client',
    clientType: 'clientType',
    clientVersion: 'clientVersion',
    isBot: 'isBot',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const BrandScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRu: 'nameRu',
    nameEn: 'nameEn',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BrandScalarFieldEnum = (typeof BrandScalarFieldEnum)[keyof typeof BrandScalarFieldEnum]


  export const SizeScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRu: 'nameRu',
    nameEn: 'nameEn',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SizeScalarFieldEnum = (typeof SizeScalarFieldEnum)[keyof typeof SizeScalarFieldEnum]


  export const PowerScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRu: 'nameRu',
    nameEn: 'nameEn',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PowerScalarFieldEnum = (typeof PowerScalarFieldEnum)[keyof typeof PowerScalarFieldEnum]


  export const ToolScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRu: 'nameRu',
    nameEn: 'nameEn',
    descriptionUz: 'descriptionUz',
    descriptionRu: 'descriptionRu',
    descriptionEn: 'descriptionEn',
    price: 'price',
    quantity: 'quantity',
    code: 'code',
    brandId: 'brandId',
    powerId: 'powerId',
    sizeId: 'sizeId',
    img: 'img',
    isAvailable: 'isAvailable',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ToolScalarFieldEnum = (typeof ToolScalarFieldEnum)[keyof typeof ToolScalarFieldEnum]


  export const MasterScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    phoneNumber: 'phoneNumber',
    isActive: 'isActive',
    birthYear: 'birthYear',
    img: 'img',
    passportImg: 'passportImg',
    about: 'about',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MasterScalarFieldEnum = (typeof MasterScalarFieldEnum)[keyof typeof MasterScalarFieldEnum]


  export const MasterProfessionScalarFieldEnum: {
    id: 'id',
    professionId: 'professionId',
    minWorkingHours: 'minWorkingHours',
    levelId: 'levelId',
    priceHourly: 'priceHourly',
    priceDaily: 'priceDaily',
    experience: 'experience',
    masterId: 'masterId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MasterProfessionScalarFieldEnum = (typeof MasterProfessionScalarFieldEnum)[keyof typeof MasterProfessionScalarFieldEnum]


  export const LevelScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRu: 'nameRu',
    nameEn: 'nameEn',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LevelScalarFieldEnum = (typeof LevelScalarFieldEnum)[keyof typeof LevelScalarFieldEnum]


  export const ProfessionScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRu: 'nameRu',
    nameEn: 'nameEn',
    img: 'img',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfessionScalarFieldEnum = (typeof ProfessionScalarFieldEnum)[keyof typeof ProfessionScalarFieldEnum]


  export const ProfessionLevelScalarFieldEnum: {
    id: 'id',
    professionId: 'professionId',
    levelId: 'levelId',
    minWorkingHours: 'minWorkingHours',
    priceHourly: 'priceHourly',
    priceDaily: 'priceDaily',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfessionLevelScalarFieldEnum = (typeof ProfessionLevelScalarFieldEnum)[keyof typeof ProfessionLevelScalarFieldEnum]


  export const ProfessionToolScalarFieldEnum: {
    id: 'id',
    professionId: 'professionId',
    toolId: 'toolId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfessionToolScalarFieldEnum = (typeof ProfessionToolScalarFieldEnum)[keyof typeof ProfessionToolScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    ownerId: 'ownerId',
    address: 'address',
    latitude: 'latitude',
    longitude: 'longitude',
    date: 'date',
    totalPrice: 'totalPrice',
    isPaid: 'isPaid',
    paymentType: 'paymentType',
    withDelivery: 'withDelivery',
    status: 'status',
    deliveryComment: 'deliveryComment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderProductScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    professionId: 'professionId',
    toolId: 'toolId',
    levelId: 'levelId',
    quantity: 'quantity',
    timeUnit: 'timeUnit',
    workingTime: 'workingTime',
    price: 'price',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderProductScalarFieldEnum = (typeof OrderProductScalarFieldEnum)[keyof typeof OrderProductScalarFieldEnum]


  export const OrderMasterScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    masterid: 'masterid'
  };

  export type OrderMasterScalarFieldEnum = (typeof OrderMasterScalarFieldEnum)[keyof typeof OrderMasterScalarFieldEnum]


  export const BasketScalarFieldEnum: {
    id: 'id',
    ownerId: 'ownerId',
    professionId: 'professionId',
    toolId: 'toolId',
    levelId: 'levelId',
    quantity: 'quantity',
    timeUnit: 'timeUnit',
    workingTime: 'workingTime',
    price: 'price',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BasketScalarFieldEnum = (typeof BasketScalarFieldEnum)[keyof typeof BasketScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    message: 'message',
    userId: 'userId',
    orderId: 'orderId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const MasterRatingsScalarFieldEnum: {
    id: 'id',
    star: 'star',
    masterId: 'masterId',
    commentId: 'commentId'
  };

  export type MasterRatingsScalarFieldEnum = (typeof MasterRatingsScalarFieldEnum)[keyof typeof MasterRatingsScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    phoneNumber: 'phoneNumber',
    address: 'address',
    message: 'message',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const FAQScalarFieldEnum: {
    id: 'id',
    questionUz: 'questionUz',
    questionRu: 'questionRu',
    questionEn: 'questionEn',
    answerUz: 'answerUz',
    answerRu: 'answerRu',
    answerEn: 'answerEn',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FAQScalarFieldEnum = (typeof FAQScalarFieldEnum)[keyof typeof FAQScalarFieldEnum]


  export const ShowcaseScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRu: 'nameRu',
    nameEn: 'nameEn',
    descriptionUz: 'descriptionUz',
    descriptionRu: 'descriptionRu',
    descriptionEn: 'descriptionEn',
    image: 'image',
    link: 'link',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShowcaseScalarFieldEnum = (typeof ShowcaseScalarFieldEnum)[keyof typeof ShowcaseScalarFieldEnum]


  export const PartnerScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRu: 'nameRu',
    nameEn: 'nameEn',
    image: 'image',
    link: 'link',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PartnerScalarFieldEnum = (typeof PartnerScalarFieldEnum)[keyof typeof PartnerScalarFieldEnum]


  export const SiteMetadataScalarFieldEnum: {
    id: 'id',
    aboutUz: 'aboutUz',
    aboutRu: 'aboutRu',
    aboutEn: 'aboutEn',
    privacyPolicyUz: 'privacyPolicyUz',
    privacyPolicyRu: 'privacyPolicyRu',
    privacyPolicyEn: 'privacyPolicyEn',
    email: 'email',
    phoneNumber: 'phoneNumber',
    socialMedia: 'socialMedia',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SiteMetadataScalarFieldEnum = (typeof SiteMetadataScalarFieldEnum)[keyof typeof SiteMetadataScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'UserStatus[]'
   */
  export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'PaymentType'
   */
  export type EnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType'>
    


  /**
   * Reference to a field of type 'PaymentType[]'
   */
  export type ListEnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType[]'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    


  /**
   * Reference to a field of type 'TimeUnit'
   */
  export type EnumTimeUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TimeUnit'>
    


  /**
   * Reference to a field of type 'TimeUnit[]'
   */
  export type ListEnumTimeUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TimeUnit[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    
  /**
   * Deep Input Types
   */


  export type RegionWhereInput = {
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    id?: StringFilter<"Region"> | string
    nameUz?: StringFilter<"Region"> | string
    nameRu?: StringNullableFilter<"Region"> | string | null
    nameEn?: StringNullableFilter<"Region"> | string | null
    createdAt?: DateTimeFilter<"Region"> | Date | string
    updatedAt?: DateTimeFilter<"Region"> | Date | string
    users?: UserListRelationFilter
  }

  export type RegionOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type RegionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    nameUz?: StringFilter<"Region"> | string
    nameRu?: StringNullableFilter<"Region"> | string | null
    nameEn?: StringNullableFilter<"Region"> | string | null
    createdAt?: DateTimeFilter<"Region"> | Date | string
    updatedAt?: DateTimeFilter<"Region"> | Date | string
    users?: UserListRelationFilter
  }, "id">

  export type RegionOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RegionCountOrderByAggregateInput
    _max?: RegionMaxOrderByAggregateInput
    _min?: RegionMinOrderByAggregateInput
  }

  export type RegionScalarWhereWithAggregatesInput = {
    AND?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    OR?: RegionScalarWhereWithAggregatesInput[]
    NOT?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Region"> | string
    nameUz?: StringWithAggregatesFilter<"Region"> | string
    nameRu?: StringNullableWithAggregatesFilter<"Region"> | string | null
    nameEn?: StringNullableWithAggregatesFilter<"Region"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Region"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Region"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    regionId?: StringNullableFilter<"User"> | string | null
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    refreshToken?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    region?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
    sessions?: SessionListRelationFilter
    companies?: CompanyListRelationFilter
    order?: OrderListRelationFilter
    contact?: ContactListRelationFilter
    basket?: BasketListRelationFilter
    comment?: CommentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    regionId?: SortOrderInput | SortOrder
    status?: SortOrder
    role?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    region?: RegionOrderByWithRelationInput
    sessions?: SessionOrderByRelationAggregateInput
    companies?: CompanyOrderByRelationAggregateInput
    order?: OrderOrderByRelationAggregateInput
    contact?: ContactOrderByRelationAggregateInput
    basket?: BasketOrderByRelationAggregateInput
    comment?: CommentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    phoneNumber?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    regionId?: StringNullableFilter<"User"> | string | null
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    refreshToken?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    region?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
    sessions?: SessionListRelationFilter
    companies?: CompanyListRelationFilter
    order?: OrderListRelationFilter
    contact?: ContactListRelationFilter
    basket?: BasketListRelationFilter
    comment?: CommentListRelationFilter
  }, "id" | "phoneNumber">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    regionId?: SortOrderInput | SortOrder
    status?: SortOrder
    role?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    regionId?: StringNullableWithAggregatesFilter<"User"> | string | null
    status?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    refreshToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: StringFilter<"Company"> | string
    nameUz?: StringFilter<"Company"> | string
    nameRu?: StringNullableFilter<"Company"> | string | null
    nameEn?: StringNullableFilter<"Company"> | string | null
    taxId?: StringNullableFilter<"Company"> | string | null
    bankCode?: StringNullableFilter<"Company"> | string | null
    bankAccount?: StringNullableFilter<"Company"> | string | null
    bankName?: StringNullableFilter<"Company"> | string | null
    oked?: StringNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    ownerId?: StringFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    taxId?: SortOrderInput | SortOrder
    bankCode?: SortOrderInput | SortOrder
    bankAccount?: SortOrderInput | SortOrder
    bankName?: SortOrderInput | SortOrder
    oked?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    nameUz?: StringFilter<"Company"> | string
    nameRu?: StringNullableFilter<"Company"> | string | null
    nameEn?: StringNullableFilter<"Company"> | string | null
    taxId?: StringNullableFilter<"Company"> | string | null
    bankCode?: StringNullableFilter<"Company"> | string | null
    bankAccount?: StringNullableFilter<"Company"> | string | null
    bankName?: StringNullableFilter<"Company"> | string | null
    oked?: StringNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    ownerId?: StringFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    taxId?: SortOrderInput | SortOrder
    bankCode?: SortOrderInput | SortOrder
    bankAccount?: SortOrderInput | SortOrder
    bankName?: SortOrderInput | SortOrder
    oked?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Company"> | string
    nameUz?: StringWithAggregatesFilter<"Company"> | string
    nameRu?: StringNullableWithAggregatesFilter<"Company"> | string | null
    nameEn?: StringNullableWithAggregatesFilter<"Company"> | string | null
    taxId?: StringNullableWithAggregatesFilter<"Company"> | string | null
    bankCode?: StringNullableWithAggregatesFilter<"Company"> | string | null
    bankAccount?: StringNullableWithAggregatesFilter<"Company"> | string | null
    bankName?: StringNullableWithAggregatesFilter<"Company"> | string | null
    oked?: StringNullableWithAggregatesFilter<"Company"> | string | null
    address?: StringNullableWithAggregatesFilter<"Company"> | string | null
    ownerId?: StringWithAggregatesFilter<"Company"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    ip?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    device?: StringNullableFilter<"Session"> | string | null
    brand?: StringNullableFilter<"Session"> | string | null
    model?: StringNullableFilter<"Session"> | string | null
    os?: StringNullableFilter<"Session"> | string | null
    osVersion?: StringNullableFilter<"Session"> | string | null
    client?: StringNullableFilter<"Session"> | string | null
    clientType?: StringNullableFilter<"Session"> | string | null
    clientVersion?: StringNullableFilter<"Session"> | string | null
    isBot?: BoolNullableFilter<"Session"> | boolean | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    device?: SortOrderInput | SortOrder
    brand?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    os?: SortOrderInput | SortOrder
    osVersion?: SortOrderInput | SortOrder
    client?: SortOrderInput | SortOrder
    clientType?: SortOrderInput | SortOrder
    clientVersion?: SortOrderInput | SortOrder
    isBot?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    ip?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    device?: StringNullableFilter<"Session"> | string | null
    brand?: StringNullableFilter<"Session"> | string | null
    model?: StringNullableFilter<"Session"> | string | null
    os?: StringNullableFilter<"Session"> | string | null
    osVersion?: StringNullableFilter<"Session"> | string | null
    client?: StringNullableFilter<"Session"> | string | null
    clientType?: StringNullableFilter<"Session"> | string | null
    clientVersion?: StringNullableFilter<"Session"> | string | null
    isBot?: BoolNullableFilter<"Session"> | boolean | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    device?: SortOrderInput | SortOrder
    brand?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    os?: SortOrderInput | SortOrder
    osVersion?: SortOrderInput | SortOrder
    client?: SortOrderInput | SortOrder
    clientType?: SortOrderInput | SortOrder
    clientVersion?: SortOrderInput | SortOrder
    isBot?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    ip?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    device?: StringNullableWithAggregatesFilter<"Session"> | string | null
    brand?: StringNullableWithAggregatesFilter<"Session"> | string | null
    model?: StringNullableWithAggregatesFilter<"Session"> | string | null
    os?: StringNullableWithAggregatesFilter<"Session"> | string | null
    osVersion?: StringNullableWithAggregatesFilter<"Session"> | string | null
    client?: StringNullableWithAggregatesFilter<"Session"> | string | null
    clientType?: StringNullableWithAggregatesFilter<"Session"> | string | null
    clientVersion?: StringNullableWithAggregatesFilter<"Session"> | string | null
    isBot?: BoolNullableWithAggregatesFilter<"Session"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type BrandWhereInput = {
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    id?: StringFilter<"Brand"> | string
    nameUz?: StringFilter<"Brand"> | string
    nameRu?: StringNullableFilter<"Brand"> | string | null
    nameEn?: StringNullableFilter<"Brand"> | string | null
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    updatedAt?: DateTimeFilter<"Brand"> | Date | string
    tools?: ToolListRelationFilter
  }

  export type BrandOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tools?: ToolOrderByRelationAggregateInput
  }

  export type BrandWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    nameUz?: StringFilter<"Brand"> | string
    nameRu?: StringNullableFilter<"Brand"> | string | null
    nameEn?: StringNullableFilter<"Brand"> | string | null
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    updatedAt?: DateTimeFilter<"Brand"> | Date | string
    tools?: ToolListRelationFilter
  }, "id">

  export type BrandOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BrandCountOrderByAggregateInput
    _max?: BrandMaxOrderByAggregateInput
    _min?: BrandMinOrderByAggregateInput
  }

  export type BrandScalarWhereWithAggregatesInput = {
    AND?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    OR?: BrandScalarWhereWithAggregatesInput[]
    NOT?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Brand"> | string
    nameUz?: StringWithAggregatesFilter<"Brand"> | string
    nameRu?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    nameEn?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Brand"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Brand"> | Date | string
  }

  export type SizeWhereInput = {
    AND?: SizeWhereInput | SizeWhereInput[]
    OR?: SizeWhereInput[]
    NOT?: SizeWhereInput | SizeWhereInput[]
    id?: StringFilter<"Size"> | string
    nameUz?: StringFilter<"Size"> | string
    nameRu?: StringNullableFilter<"Size"> | string | null
    nameEn?: StringNullableFilter<"Size"> | string | null
    createdAt?: DateTimeFilter<"Size"> | Date | string
    updatedAt?: DateTimeFilter<"Size"> | Date | string
    tools?: ToolListRelationFilter
  }

  export type SizeOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tools?: ToolOrderByRelationAggregateInput
  }

  export type SizeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SizeWhereInput | SizeWhereInput[]
    OR?: SizeWhereInput[]
    NOT?: SizeWhereInput | SizeWhereInput[]
    nameUz?: StringFilter<"Size"> | string
    nameRu?: StringNullableFilter<"Size"> | string | null
    nameEn?: StringNullableFilter<"Size"> | string | null
    createdAt?: DateTimeFilter<"Size"> | Date | string
    updatedAt?: DateTimeFilter<"Size"> | Date | string
    tools?: ToolListRelationFilter
  }, "id">

  export type SizeOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SizeCountOrderByAggregateInput
    _max?: SizeMaxOrderByAggregateInput
    _min?: SizeMinOrderByAggregateInput
  }

  export type SizeScalarWhereWithAggregatesInput = {
    AND?: SizeScalarWhereWithAggregatesInput | SizeScalarWhereWithAggregatesInput[]
    OR?: SizeScalarWhereWithAggregatesInput[]
    NOT?: SizeScalarWhereWithAggregatesInput | SizeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Size"> | string
    nameUz?: StringWithAggregatesFilter<"Size"> | string
    nameRu?: StringNullableWithAggregatesFilter<"Size"> | string | null
    nameEn?: StringNullableWithAggregatesFilter<"Size"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Size"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Size"> | Date | string
  }

  export type PowerWhereInput = {
    AND?: PowerWhereInput | PowerWhereInput[]
    OR?: PowerWhereInput[]
    NOT?: PowerWhereInput | PowerWhereInput[]
    id?: StringFilter<"Power"> | string
    nameUz?: StringFilter<"Power"> | string
    nameRu?: StringNullableFilter<"Power"> | string | null
    nameEn?: StringNullableFilter<"Power"> | string | null
    createdAt?: DateTimeFilter<"Power"> | Date | string
    updatedAt?: DateTimeFilter<"Power"> | Date | string
    tools?: ToolListRelationFilter
  }

  export type PowerOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tools?: ToolOrderByRelationAggregateInput
  }

  export type PowerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PowerWhereInput | PowerWhereInput[]
    OR?: PowerWhereInput[]
    NOT?: PowerWhereInput | PowerWhereInput[]
    nameUz?: StringFilter<"Power"> | string
    nameRu?: StringNullableFilter<"Power"> | string | null
    nameEn?: StringNullableFilter<"Power"> | string | null
    createdAt?: DateTimeFilter<"Power"> | Date | string
    updatedAt?: DateTimeFilter<"Power"> | Date | string
    tools?: ToolListRelationFilter
  }, "id">

  export type PowerOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PowerCountOrderByAggregateInput
    _max?: PowerMaxOrderByAggregateInput
    _min?: PowerMinOrderByAggregateInput
  }

  export type PowerScalarWhereWithAggregatesInput = {
    AND?: PowerScalarWhereWithAggregatesInput | PowerScalarWhereWithAggregatesInput[]
    OR?: PowerScalarWhereWithAggregatesInput[]
    NOT?: PowerScalarWhereWithAggregatesInput | PowerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Power"> | string
    nameUz?: StringWithAggregatesFilter<"Power"> | string
    nameRu?: StringNullableWithAggregatesFilter<"Power"> | string | null
    nameEn?: StringNullableWithAggregatesFilter<"Power"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Power"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Power"> | Date | string
  }

  export type ToolWhereInput = {
    AND?: ToolWhereInput | ToolWhereInput[]
    OR?: ToolWhereInput[]
    NOT?: ToolWhereInput | ToolWhereInput[]
    id?: StringFilter<"Tool"> | string
    nameUz?: StringFilter<"Tool"> | string
    nameRu?: StringNullableFilter<"Tool"> | string | null
    nameEn?: StringNullableFilter<"Tool"> | string | null
    descriptionUz?: StringFilter<"Tool"> | string
    descriptionRu?: StringNullableFilter<"Tool"> | string | null
    descriptionEn?: StringNullableFilter<"Tool"> | string | null
    price?: DecimalFilter<"Tool"> | Decimal | DecimalJsLike | number | string
    quantity?: IntFilter<"Tool"> | number
    code?: StringFilter<"Tool"> | string
    brandId?: StringNullableFilter<"Tool"> | string | null
    powerId?: StringNullableFilter<"Tool"> | string | null
    sizeId?: StringNullableFilter<"Tool"> | string | null
    img?: StringFilter<"Tool"> | string
    isAvailable?: BoolFilter<"Tool"> | boolean
    createdAt?: DateTimeFilter<"Tool"> | Date | string
    updatedAt?: DateTimeFilter<"Tool"> | Date | string
    brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    power?: XOR<PowerNullableScalarRelationFilter, PowerWhereInput> | null
    size?: XOR<SizeNullableScalarRelationFilter, SizeWhereInput> | null
    professionTools?: ProfessionToolListRelationFilter
    orderProducts?: OrderProductListRelationFilter
    basket?: BasketListRelationFilter
  }

  export type ToolOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    descriptionUz?: SortOrder
    descriptionRu?: SortOrderInput | SortOrder
    descriptionEn?: SortOrderInput | SortOrder
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    brandId?: SortOrderInput | SortOrder
    powerId?: SortOrderInput | SortOrder
    sizeId?: SortOrderInput | SortOrder
    img?: SortOrder
    isAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    brand?: BrandOrderByWithRelationInput
    power?: PowerOrderByWithRelationInput
    size?: SizeOrderByWithRelationInput
    professionTools?: ProfessionToolOrderByRelationAggregateInput
    orderProducts?: OrderProductOrderByRelationAggregateInput
    basket?: BasketOrderByRelationAggregateInput
  }

  export type ToolWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: ToolWhereInput | ToolWhereInput[]
    OR?: ToolWhereInput[]
    NOT?: ToolWhereInput | ToolWhereInput[]
    nameUz?: StringFilter<"Tool"> | string
    nameRu?: StringNullableFilter<"Tool"> | string | null
    nameEn?: StringNullableFilter<"Tool"> | string | null
    descriptionUz?: StringFilter<"Tool"> | string
    descriptionRu?: StringNullableFilter<"Tool"> | string | null
    descriptionEn?: StringNullableFilter<"Tool"> | string | null
    price?: DecimalFilter<"Tool"> | Decimal | DecimalJsLike | number | string
    quantity?: IntFilter<"Tool"> | number
    brandId?: StringNullableFilter<"Tool"> | string | null
    powerId?: StringNullableFilter<"Tool"> | string | null
    sizeId?: StringNullableFilter<"Tool"> | string | null
    img?: StringFilter<"Tool"> | string
    isAvailable?: BoolFilter<"Tool"> | boolean
    createdAt?: DateTimeFilter<"Tool"> | Date | string
    updatedAt?: DateTimeFilter<"Tool"> | Date | string
    brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    power?: XOR<PowerNullableScalarRelationFilter, PowerWhereInput> | null
    size?: XOR<SizeNullableScalarRelationFilter, SizeWhereInput> | null
    professionTools?: ProfessionToolListRelationFilter
    orderProducts?: OrderProductListRelationFilter
    basket?: BasketListRelationFilter
  }, "id" | "code">

  export type ToolOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    descriptionUz?: SortOrder
    descriptionRu?: SortOrderInput | SortOrder
    descriptionEn?: SortOrderInput | SortOrder
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    brandId?: SortOrderInput | SortOrder
    powerId?: SortOrderInput | SortOrder
    sizeId?: SortOrderInput | SortOrder
    img?: SortOrder
    isAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ToolCountOrderByAggregateInput
    _avg?: ToolAvgOrderByAggregateInput
    _max?: ToolMaxOrderByAggregateInput
    _min?: ToolMinOrderByAggregateInput
    _sum?: ToolSumOrderByAggregateInput
  }

  export type ToolScalarWhereWithAggregatesInput = {
    AND?: ToolScalarWhereWithAggregatesInput | ToolScalarWhereWithAggregatesInput[]
    OR?: ToolScalarWhereWithAggregatesInput[]
    NOT?: ToolScalarWhereWithAggregatesInput | ToolScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tool"> | string
    nameUz?: StringWithAggregatesFilter<"Tool"> | string
    nameRu?: StringNullableWithAggregatesFilter<"Tool"> | string | null
    nameEn?: StringNullableWithAggregatesFilter<"Tool"> | string | null
    descriptionUz?: StringWithAggregatesFilter<"Tool"> | string
    descriptionRu?: StringNullableWithAggregatesFilter<"Tool"> | string | null
    descriptionEn?: StringNullableWithAggregatesFilter<"Tool"> | string | null
    price?: DecimalWithAggregatesFilter<"Tool"> | Decimal | DecimalJsLike | number | string
    quantity?: IntWithAggregatesFilter<"Tool"> | number
    code?: StringWithAggregatesFilter<"Tool"> | string
    brandId?: StringNullableWithAggregatesFilter<"Tool"> | string | null
    powerId?: StringNullableWithAggregatesFilter<"Tool"> | string | null
    sizeId?: StringNullableWithAggregatesFilter<"Tool"> | string | null
    img?: StringWithAggregatesFilter<"Tool"> | string
    isAvailable?: BoolWithAggregatesFilter<"Tool"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Tool"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tool"> | Date | string
  }

  export type MasterWhereInput = {
    AND?: MasterWhereInput | MasterWhereInput[]
    OR?: MasterWhereInput[]
    NOT?: MasterWhereInput | MasterWhereInput[]
    id?: StringFilter<"Master"> | string
    firstName?: StringFilter<"Master"> | string
    lastName?: StringFilter<"Master"> | string
    phoneNumber?: StringFilter<"Master"> | string
    isActive?: BoolFilter<"Master"> | boolean
    birthYear?: IntFilter<"Master"> | number
    img?: StringFilter<"Master"> | string
    passportImg?: StringFilter<"Master"> | string
    about?: StringFilter<"Master"> | string
    createdAt?: DateTimeFilter<"Master"> | Date | string
    updatedAt?: DateTimeFilter<"Master"> | Date | string
    masterProfessions?: MasterProfessionListRelationFilter
    ordermasters?: OrderMasterListRelationFilter
    masterRating?: MasterRatingsListRelationFilter
  }

  export type MasterOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    isActive?: SortOrder
    birthYear?: SortOrder
    img?: SortOrder
    passportImg?: SortOrder
    about?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    masterProfessions?: MasterProfessionOrderByRelationAggregateInput
    ordermasters?: OrderMasterOrderByRelationAggregateInput
    masterRating?: MasterRatingsOrderByRelationAggregateInput
  }

  export type MasterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MasterWhereInput | MasterWhereInput[]
    OR?: MasterWhereInput[]
    NOT?: MasterWhereInput | MasterWhereInput[]
    firstName?: StringFilter<"Master"> | string
    lastName?: StringFilter<"Master"> | string
    phoneNumber?: StringFilter<"Master"> | string
    isActive?: BoolFilter<"Master"> | boolean
    birthYear?: IntFilter<"Master"> | number
    img?: StringFilter<"Master"> | string
    passportImg?: StringFilter<"Master"> | string
    about?: StringFilter<"Master"> | string
    createdAt?: DateTimeFilter<"Master"> | Date | string
    updatedAt?: DateTimeFilter<"Master"> | Date | string
    masterProfessions?: MasterProfessionListRelationFilter
    ordermasters?: OrderMasterListRelationFilter
    masterRating?: MasterRatingsListRelationFilter
  }, "id">

  export type MasterOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    isActive?: SortOrder
    birthYear?: SortOrder
    img?: SortOrder
    passportImg?: SortOrder
    about?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MasterCountOrderByAggregateInput
    _avg?: MasterAvgOrderByAggregateInput
    _max?: MasterMaxOrderByAggregateInput
    _min?: MasterMinOrderByAggregateInput
    _sum?: MasterSumOrderByAggregateInput
  }

  export type MasterScalarWhereWithAggregatesInput = {
    AND?: MasterScalarWhereWithAggregatesInput | MasterScalarWhereWithAggregatesInput[]
    OR?: MasterScalarWhereWithAggregatesInput[]
    NOT?: MasterScalarWhereWithAggregatesInput | MasterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Master"> | string
    firstName?: StringWithAggregatesFilter<"Master"> | string
    lastName?: StringWithAggregatesFilter<"Master"> | string
    phoneNumber?: StringWithAggregatesFilter<"Master"> | string
    isActive?: BoolWithAggregatesFilter<"Master"> | boolean
    birthYear?: IntWithAggregatesFilter<"Master"> | number
    img?: StringWithAggregatesFilter<"Master"> | string
    passportImg?: StringWithAggregatesFilter<"Master"> | string
    about?: StringWithAggregatesFilter<"Master"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Master"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Master"> | Date | string
  }

  export type MasterProfessionWhereInput = {
    AND?: MasterProfessionWhereInput | MasterProfessionWhereInput[]
    OR?: MasterProfessionWhereInput[]
    NOT?: MasterProfessionWhereInput | MasterProfessionWhereInput[]
    id?: StringFilter<"MasterProfession"> | string
    professionId?: StringNullableFilter<"MasterProfession"> | string | null
    minWorkingHours?: IntNullableFilter<"MasterProfession"> | number | null
    levelId?: StringNullableFilter<"MasterProfession"> | string | null
    priceHourly?: DecimalFilter<"MasterProfession"> | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFilter<"MasterProfession"> | Decimal | DecimalJsLike | number | string
    experience?: FloatFilter<"MasterProfession"> | number
    masterId?: StringNullableFilter<"MasterProfession"> | string | null
    createdAt?: DateTimeFilter<"MasterProfession"> | Date | string
    updatedAt?: DateTimeFilter<"MasterProfession"> | Date | string
    profession?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
    level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
    master?: XOR<MasterNullableScalarRelationFilter, MasterWhereInput> | null
  }

  export type MasterProfessionOrderByWithRelationInput = {
    id?: SortOrder
    professionId?: SortOrderInput | SortOrder
    minWorkingHours?: SortOrderInput | SortOrder
    levelId?: SortOrderInput | SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
    masterId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profession?: ProfessionOrderByWithRelationInput
    level?: LevelOrderByWithRelationInput
    master?: MasterOrderByWithRelationInput
  }

  export type MasterProfessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MasterProfessionWhereInput | MasterProfessionWhereInput[]
    OR?: MasterProfessionWhereInput[]
    NOT?: MasterProfessionWhereInput | MasterProfessionWhereInput[]
    professionId?: StringNullableFilter<"MasterProfession"> | string | null
    minWorkingHours?: IntNullableFilter<"MasterProfession"> | number | null
    levelId?: StringNullableFilter<"MasterProfession"> | string | null
    priceHourly?: DecimalFilter<"MasterProfession"> | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFilter<"MasterProfession"> | Decimal | DecimalJsLike | number | string
    experience?: FloatFilter<"MasterProfession"> | number
    masterId?: StringNullableFilter<"MasterProfession"> | string | null
    createdAt?: DateTimeFilter<"MasterProfession"> | Date | string
    updatedAt?: DateTimeFilter<"MasterProfession"> | Date | string
    profession?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
    level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
    master?: XOR<MasterNullableScalarRelationFilter, MasterWhereInput> | null
  }, "id">

  export type MasterProfessionOrderByWithAggregationInput = {
    id?: SortOrder
    professionId?: SortOrderInput | SortOrder
    minWorkingHours?: SortOrderInput | SortOrder
    levelId?: SortOrderInput | SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
    masterId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MasterProfessionCountOrderByAggregateInput
    _avg?: MasterProfessionAvgOrderByAggregateInput
    _max?: MasterProfessionMaxOrderByAggregateInput
    _min?: MasterProfessionMinOrderByAggregateInput
    _sum?: MasterProfessionSumOrderByAggregateInput
  }

  export type MasterProfessionScalarWhereWithAggregatesInput = {
    AND?: MasterProfessionScalarWhereWithAggregatesInput | MasterProfessionScalarWhereWithAggregatesInput[]
    OR?: MasterProfessionScalarWhereWithAggregatesInput[]
    NOT?: MasterProfessionScalarWhereWithAggregatesInput | MasterProfessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MasterProfession"> | string
    professionId?: StringNullableWithAggregatesFilter<"MasterProfession"> | string | null
    minWorkingHours?: IntNullableWithAggregatesFilter<"MasterProfession"> | number | null
    levelId?: StringNullableWithAggregatesFilter<"MasterProfession"> | string | null
    priceHourly?: DecimalWithAggregatesFilter<"MasterProfession"> | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalWithAggregatesFilter<"MasterProfession"> | Decimal | DecimalJsLike | number | string
    experience?: FloatWithAggregatesFilter<"MasterProfession"> | number
    masterId?: StringNullableWithAggregatesFilter<"MasterProfession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MasterProfession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MasterProfession"> | Date | string
  }

  export type LevelWhereInput = {
    AND?: LevelWhereInput | LevelWhereInput[]
    OR?: LevelWhereInput[]
    NOT?: LevelWhereInput | LevelWhereInput[]
    id?: StringFilter<"Level"> | string
    nameUz?: StringFilter<"Level"> | string
    nameRu?: StringNullableFilter<"Level"> | string | null
    nameEn?: StringNullableFilter<"Level"> | string | null
    createdAt?: DateTimeFilter<"Level"> | Date | string
    updatedAt?: DateTimeFilter<"Level"> | Date | string
    masterProfessions?: MasterProfessionListRelationFilter
    professionLevels?: ProfessionLevelListRelationFilter
    orderProductLevel?: OrderProductListRelationFilter
    basket?: BasketListRelationFilter
  }

  export type LevelOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    masterProfessions?: MasterProfessionOrderByRelationAggregateInput
    professionLevels?: ProfessionLevelOrderByRelationAggregateInput
    orderProductLevel?: OrderProductOrderByRelationAggregateInput
    basket?: BasketOrderByRelationAggregateInput
  }

  export type LevelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LevelWhereInput | LevelWhereInput[]
    OR?: LevelWhereInput[]
    NOT?: LevelWhereInput | LevelWhereInput[]
    nameUz?: StringFilter<"Level"> | string
    nameRu?: StringNullableFilter<"Level"> | string | null
    nameEn?: StringNullableFilter<"Level"> | string | null
    createdAt?: DateTimeFilter<"Level"> | Date | string
    updatedAt?: DateTimeFilter<"Level"> | Date | string
    masterProfessions?: MasterProfessionListRelationFilter
    professionLevels?: ProfessionLevelListRelationFilter
    orderProductLevel?: OrderProductListRelationFilter
    basket?: BasketListRelationFilter
  }, "id">

  export type LevelOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LevelCountOrderByAggregateInput
    _max?: LevelMaxOrderByAggregateInput
    _min?: LevelMinOrderByAggregateInput
  }

  export type LevelScalarWhereWithAggregatesInput = {
    AND?: LevelScalarWhereWithAggregatesInput | LevelScalarWhereWithAggregatesInput[]
    OR?: LevelScalarWhereWithAggregatesInput[]
    NOT?: LevelScalarWhereWithAggregatesInput | LevelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Level"> | string
    nameUz?: StringWithAggregatesFilter<"Level"> | string
    nameRu?: StringNullableWithAggregatesFilter<"Level"> | string | null
    nameEn?: StringNullableWithAggregatesFilter<"Level"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Level"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Level"> | Date | string
  }

  export type ProfessionWhereInput = {
    AND?: ProfessionWhereInput | ProfessionWhereInput[]
    OR?: ProfessionWhereInput[]
    NOT?: ProfessionWhereInput | ProfessionWhereInput[]
    id?: StringFilter<"Profession"> | string
    nameUz?: StringFilter<"Profession"> | string
    nameRu?: StringNullableFilter<"Profession"> | string | null
    nameEn?: StringNullableFilter<"Profession"> | string | null
    img?: StringFilter<"Profession"> | string
    isActive?: BoolFilter<"Profession"> | boolean
    createdAt?: DateTimeFilter<"Profession"> | Date | string
    updatedAt?: DateTimeFilter<"Profession"> | Date | string
    masterProfessions?: MasterProfessionListRelationFilter
    professionLevels?: ProfessionLevelListRelationFilter
    professionTools?: ProfessionToolListRelationFilter
    orderProducts?: OrderProductListRelationFilter
    basket?: BasketListRelationFilter
  }

  export type ProfessionOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    img?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    masterProfessions?: MasterProfessionOrderByRelationAggregateInput
    professionLevels?: ProfessionLevelOrderByRelationAggregateInput
    professionTools?: ProfessionToolOrderByRelationAggregateInput
    orderProducts?: OrderProductOrderByRelationAggregateInput
    basket?: BasketOrderByRelationAggregateInput
  }

  export type ProfessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProfessionWhereInput | ProfessionWhereInput[]
    OR?: ProfessionWhereInput[]
    NOT?: ProfessionWhereInput | ProfessionWhereInput[]
    nameUz?: StringFilter<"Profession"> | string
    nameRu?: StringNullableFilter<"Profession"> | string | null
    nameEn?: StringNullableFilter<"Profession"> | string | null
    img?: StringFilter<"Profession"> | string
    isActive?: BoolFilter<"Profession"> | boolean
    createdAt?: DateTimeFilter<"Profession"> | Date | string
    updatedAt?: DateTimeFilter<"Profession"> | Date | string
    masterProfessions?: MasterProfessionListRelationFilter
    professionLevels?: ProfessionLevelListRelationFilter
    professionTools?: ProfessionToolListRelationFilter
    orderProducts?: OrderProductListRelationFilter
    basket?: BasketListRelationFilter
  }, "id">

  export type ProfessionOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    img?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfessionCountOrderByAggregateInput
    _max?: ProfessionMaxOrderByAggregateInput
    _min?: ProfessionMinOrderByAggregateInput
  }

  export type ProfessionScalarWhereWithAggregatesInput = {
    AND?: ProfessionScalarWhereWithAggregatesInput | ProfessionScalarWhereWithAggregatesInput[]
    OR?: ProfessionScalarWhereWithAggregatesInput[]
    NOT?: ProfessionScalarWhereWithAggregatesInput | ProfessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profession"> | string
    nameUz?: StringWithAggregatesFilter<"Profession"> | string
    nameRu?: StringNullableWithAggregatesFilter<"Profession"> | string | null
    nameEn?: StringNullableWithAggregatesFilter<"Profession"> | string | null
    img?: StringWithAggregatesFilter<"Profession"> | string
    isActive?: BoolWithAggregatesFilter<"Profession"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Profession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Profession"> | Date | string
  }

  export type ProfessionLevelWhereInput = {
    AND?: ProfessionLevelWhereInput | ProfessionLevelWhereInput[]
    OR?: ProfessionLevelWhereInput[]
    NOT?: ProfessionLevelWhereInput | ProfessionLevelWhereInput[]
    id?: StringFilter<"ProfessionLevel"> | string
    professionId?: StringFilter<"ProfessionLevel"> | string
    levelId?: StringFilter<"ProfessionLevel"> | string
    minWorkingHours?: IntFilter<"ProfessionLevel"> | number
    priceHourly?: DecimalFilter<"ProfessionLevel"> | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFilter<"ProfessionLevel"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"ProfessionLevel"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionLevel"> | Date | string
    profession?: XOR<ProfessionScalarRelationFilter, ProfessionWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
  }

  export type ProfessionLevelOrderByWithRelationInput = {
    id?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    minWorkingHours?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profession?: ProfessionOrderByWithRelationInput
    level?: LevelOrderByWithRelationInput
  }

  export type ProfessionLevelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProfessionLevelWhereInput | ProfessionLevelWhereInput[]
    OR?: ProfessionLevelWhereInput[]
    NOT?: ProfessionLevelWhereInput | ProfessionLevelWhereInput[]
    professionId?: StringFilter<"ProfessionLevel"> | string
    levelId?: StringFilter<"ProfessionLevel"> | string
    minWorkingHours?: IntFilter<"ProfessionLevel"> | number
    priceHourly?: DecimalFilter<"ProfessionLevel"> | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFilter<"ProfessionLevel"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"ProfessionLevel"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionLevel"> | Date | string
    profession?: XOR<ProfessionScalarRelationFilter, ProfessionWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
  }, "id">

  export type ProfessionLevelOrderByWithAggregationInput = {
    id?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    minWorkingHours?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfessionLevelCountOrderByAggregateInput
    _avg?: ProfessionLevelAvgOrderByAggregateInput
    _max?: ProfessionLevelMaxOrderByAggregateInput
    _min?: ProfessionLevelMinOrderByAggregateInput
    _sum?: ProfessionLevelSumOrderByAggregateInput
  }

  export type ProfessionLevelScalarWhereWithAggregatesInput = {
    AND?: ProfessionLevelScalarWhereWithAggregatesInput | ProfessionLevelScalarWhereWithAggregatesInput[]
    OR?: ProfessionLevelScalarWhereWithAggregatesInput[]
    NOT?: ProfessionLevelScalarWhereWithAggregatesInput | ProfessionLevelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProfessionLevel"> | string
    professionId?: StringWithAggregatesFilter<"ProfessionLevel"> | string
    levelId?: StringWithAggregatesFilter<"ProfessionLevel"> | string
    minWorkingHours?: IntWithAggregatesFilter<"ProfessionLevel"> | number
    priceHourly?: DecimalWithAggregatesFilter<"ProfessionLevel"> | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalWithAggregatesFilter<"ProfessionLevel"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"ProfessionLevel"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProfessionLevel"> | Date | string
  }

  export type ProfessionToolWhereInput = {
    AND?: ProfessionToolWhereInput | ProfessionToolWhereInput[]
    OR?: ProfessionToolWhereInput[]
    NOT?: ProfessionToolWhereInput | ProfessionToolWhereInput[]
    id?: StringFilter<"ProfessionTool"> | string
    professionId?: StringFilter<"ProfessionTool"> | string
    toolId?: StringFilter<"ProfessionTool"> | string
    createdAt?: DateTimeFilter<"ProfessionTool"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionTool"> | Date | string
    profession?: XOR<ProfessionScalarRelationFilter, ProfessionWhereInput>
    tool?: XOR<ToolScalarRelationFilter, ToolWhereInput>
  }

  export type ProfessionToolOrderByWithRelationInput = {
    id?: SortOrder
    professionId?: SortOrder
    toolId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profession?: ProfessionOrderByWithRelationInput
    tool?: ToolOrderByWithRelationInput
  }

  export type ProfessionToolWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProfessionToolWhereInput | ProfessionToolWhereInput[]
    OR?: ProfessionToolWhereInput[]
    NOT?: ProfessionToolWhereInput | ProfessionToolWhereInput[]
    professionId?: StringFilter<"ProfessionTool"> | string
    toolId?: StringFilter<"ProfessionTool"> | string
    createdAt?: DateTimeFilter<"ProfessionTool"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionTool"> | Date | string
    profession?: XOR<ProfessionScalarRelationFilter, ProfessionWhereInput>
    tool?: XOR<ToolScalarRelationFilter, ToolWhereInput>
  }, "id">

  export type ProfessionToolOrderByWithAggregationInput = {
    id?: SortOrder
    professionId?: SortOrder
    toolId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfessionToolCountOrderByAggregateInput
    _max?: ProfessionToolMaxOrderByAggregateInput
    _min?: ProfessionToolMinOrderByAggregateInput
  }

  export type ProfessionToolScalarWhereWithAggregatesInput = {
    AND?: ProfessionToolScalarWhereWithAggregatesInput | ProfessionToolScalarWhereWithAggregatesInput[]
    OR?: ProfessionToolScalarWhereWithAggregatesInput[]
    NOT?: ProfessionToolScalarWhereWithAggregatesInput | ProfessionToolScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProfessionTool"> | string
    professionId?: StringWithAggregatesFilter<"ProfessionTool"> | string
    toolId?: StringWithAggregatesFilter<"ProfessionTool"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProfessionTool"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProfessionTool"> | Date | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: StringFilter<"Order"> | string
    ownerId?: StringFilter<"Order"> | string
    address?: StringFilter<"Order"> | string
    latitude?: StringFilter<"Order"> | string
    longitude?: StringFilter<"Order"> | string
    date?: DateTimeFilter<"Order"> | Date | string
    totalPrice?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFilter<"Order"> | boolean
    paymentType?: EnumPaymentTypeFilter<"Order"> | $Enums.PaymentType
    withDelivery?: BoolFilter<"Order"> | boolean
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    deliveryComment?: StringFilter<"Order"> | string
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    orderProducts?: OrderProductListRelationFilter
    comments?: CommentListRelationFilter
    masters?: OrderMasterListRelationFilter
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    date?: SortOrder
    totalPrice?: SortOrder
    isPaid?: SortOrder
    paymentType?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    deliveryComment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderProducts?: OrderProductOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    masters?: OrderMasterOrderByRelationAggregateInput
    owner?: UserOrderByWithRelationInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    ownerId?: StringFilter<"Order"> | string
    address?: StringFilter<"Order"> | string
    latitude?: StringFilter<"Order"> | string
    longitude?: StringFilter<"Order"> | string
    date?: DateTimeFilter<"Order"> | Date | string
    totalPrice?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFilter<"Order"> | boolean
    paymentType?: EnumPaymentTypeFilter<"Order"> | $Enums.PaymentType
    withDelivery?: BoolFilter<"Order"> | boolean
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    deliveryComment?: StringFilter<"Order"> | string
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    orderProducts?: OrderProductListRelationFilter
    comments?: CommentListRelationFilter
    masters?: OrderMasterListRelationFilter
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    date?: SortOrder
    totalPrice?: SortOrder
    isPaid?: SortOrder
    paymentType?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    deliveryComment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order"> | string
    ownerId?: StringWithAggregatesFilter<"Order"> | string
    address?: StringWithAggregatesFilter<"Order"> | string
    latitude?: StringWithAggregatesFilter<"Order"> | string
    longitude?: StringWithAggregatesFilter<"Order"> | string
    date?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    totalPrice?: DecimalWithAggregatesFilter<"Order"> | Decimal | DecimalJsLike | number | string
    isPaid?: BoolWithAggregatesFilter<"Order"> | boolean
    paymentType?: EnumPaymentTypeWithAggregatesFilter<"Order"> | $Enums.PaymentType
    withDelivery?: BoolWithAggregatesFilter<"Order"> | boolean
    status?: EnumOrderStatusWithAggregatesFilter<"Order"> | $Enums.OrderStatus
    deliveryComment?: StringWithAggregatesFilter<"Order"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
  }

  export type OrderProductWhereInput = {
    AND?: OrderProductWhereInput | OrderProductWhereInput[]
    OR?: OrderProductWhereInput[]
    NOT?: OrderProductWhereInput | OrderProductWhereInput[]
    id?: StringFilter<"OrderProduct"> | string
    orderId?: StringFilter<"OrderProduct"> | string
    professionId?: StringNullableFilter<"OrderProduct"> | string | null
    toolId?: StringNullableFilter<"OrderProduct"> | string | null
    levelId?: StringNullableFilter<"OrderProduct"> | string | null
    quantity?: IntFilter<"OrderProduct"> | number
    timeUnit?: EnumTimeUnitNullableFilter<"OrderProduct"> | $Enums.TimeUnit | null
    workingTime?: FloatNullableFilter<"OrderProduct"> | number | null
    price?: DecimalFilter<"OrderProduct"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"OrderProduct"> | Date | string
    updatedAt?: DateTimeFilter<"OrderProduct"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    profession?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
    tool?: XOR<ToolNullableScalarRelationFilter, ToolWhereInput> | null
    level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
  }

  export type OrderProductOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    professionId?: SortOrderInput | SortOrder
    toolId?: SortOrderInput | SortOrder
    levelId?: SortOrderInput | SortOrder
    quantity?: SortOrder
    timeUnit?: SortOrderInput | SortOrder
    workingTime?: SortOrderInput | SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    order?: OrderOrderByWithRelationInput
    profession?: ProfessionOrderByWithRelationInput
    tool?: ToolOrderByWithRelationInput
    level?: LevelOrderByWithRelationInput
  }

  export type OrderProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderProductWhereInput | OrderProductWhereInput[]
    OR?: OrderProductWhereInput[]
    NOT?: OrderProductWhereInput | OrderProductWhereInput[]
    orderId?: StringFilter<"OrderProduct"> | string
    professionId?: StringNullableFilter<"OrderProduct"> | string | null
    toolId?: StringNullableFilter<"OrderProduct"> | string | null
    levelId?: StringNullableFilter<"OrderProduct"> | string | null
    quantity?: IntFilter<"OrderProduct"> | number
    timeUnit?: EnumTimeUnitNullableFilter<"OrderProduct"> | $Enums.TimeUnit | null
    workingTime?: FloatNullableFilter<"OrderProduct"> | number | null
    price?: DecimalFilter<"OrderProduct"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"OrderProduct"> | Date | string
    updatedAt?: DateTimeFilter<"OrderProduct"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    profession?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
    tool?: XOR<ToolNullableScalarRelationFilter, ToolWhereInput> | null
    level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
  }, "id">

  export type OrderProductOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    professionId?: SortOrderInput | SortOrder
    toolId?: SortOrderInput | SortOrder
    levelId?: SortOrderInput | SortOrder
    quantity?: SortOrder
    timeUnit?: SortOrderInput | SortOrder
    workingTime?: SortOrderInput | SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrderProductCountOrderByAggregateInput
    _avg?: OrderProductAvgOrderByAggregateInput
    _max?: OrderProductMaxOrderByAggregateInput
    _min?: OrderProductMinOrderByAggregateInput
    _sum?: OrderProductSumOrderByAggregateInput
  }

  export type OrderProductScalarWhereWithAggregatesInput = {
    AND?: OrderProductScalarWhereWithAggregatesInput | OrderProductScalarWhereWithAggregatesInput[]
    OR?: OrderProductScalarWhereWithAggregatesInput[]
    NOT?: OrderProductScalarWhereWithAggregatesInput | OrderProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrderProduct"> | string
    orderId?: StringWithAggregatesFilter<"OrderProduct"> | string
    professionId?: StringNullableWithAggregatesFilter<"OrderProduct"> | string | null
    toolId?: StringNullableWithAggregatesFilter<"OrderProduct"> | string | null
    levelId?: StringNullableWithAggregatesFilter<"OrderProduct"> | string | null
    quantity?: IntWithAggregatesFilter<"OrderProduct"> | number
    timeUnit?: EnumTimeUnitNullableWithAggregatesFilter<"OrderProduct"> | $Enums.TimeUnit | null
    workingTime?: FloatNullableWithAggregatesFilter<"OrderProduct"> | number | null
    price?: DecimalWithAggregatesFilter<"OrderProduct"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"OrderProduct"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OrderProduct"> | Date | string
  }

  export type OrderMasterWhereInput = {
    AND?: OrderMasterWhereInput | OrderMasterWhereInput[]
    OR?: OrderMasterWhereInput[]
    NOT?: OrderMasterWhereInput | OrderMasterWhereInput[]
    id?: StringFilter<"OrderMaster"> | string
    orderId?: StringFilter<"OrderMaster"> | string
    masterid?: StringFilter<"OrderMaster"> | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
  }

  export type OrderMasterOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    masterid?: SortOrder
    order?: OrderOrderByWithRelationInput
    master?: MasterOrderByWithRelationInput
  }

  export type OrderMasterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderMasterWhereInput | OrderMasterWhereInput[]
    OR?: OrderMasterWhereInput[]
    NOT?: OrderMasterWhereInput | OrderMasterWhereInput[]
    orderId?: StringFilter<"OrderMaster"> | string
    masterid?: StringFilter<"OrderMaster"> | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
  }, "id">

  export type OrderMasterOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    masterid?: SortOrder
    _count?: OrderMasterCountOrderByAggregateInput
    _max?: OrderMasterMaxOrderByAggregateInput
    _min?: OrderMasterMinOrderByAggregateInput
  }

  export type OrderMasterScalarWhereWithAggregatesInput = {
    AND?: OrderMasterScalarWhereWithAggregatesInput | OrderMasterScalarWhereWithAggregatesInput[]
    OR?: OrderMasterScalarWhereWithAggregatesInput[]
    NOT?: OrderMasterScalarWhereWithAggregatesInput | OrderMasterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrderMaster"> | string
    orderId?: StringWithAggregatesFilter<"OrderMaster"> | string
    masterid?: StringWithAggregatesFilter<"OrderMaster"> | string
  }

  export type BasketWhereInput = {
    AND?: BasketWhereInput | BasketWhereInput[]
    OR?: BasketWhereInput[]
    NOT?: BasketWhereInput | BasketWhereInput[]
    id?: StringFilter<"Basket"> | string
    ownerId?: StringFilter<"Basket"> | string
    professionId?: StringNullableFilter<"Basket"> | string | null
    toolId?: StringNullableFilter<"Basket"> | string | null
    levelId?: StringNullableFilter<"Basket"> | string | null
    quantity?: IntFilter<"Basket"> | number
    timeUnit?: EnumTimeUnitNullableFilter<"Basket"> | $Enums.TimeUnit | null
    workingTime?: FloatNullableFilter<"Basket"> | number | null
    price?: DecimalFilter<"Basket"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"Basket"> | Date | string
    updatedAt?: DateTimeFilter<"Basket"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    profession?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
    tool?: XOR<ToolNullableScalarRelationFilter, ToolWhereInput> | null
    level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
  }

  export type BasketOrderByWithRelationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    professionId?: SortOrderInput | SortOrder
    toolId?: SortOrderInput | SortOrder
    levelId?: SortOrderInput | SortOrder
    quantity?: SortOrder
    timeUnit?: SortOrderInput | SortOrder
    workingTime?: SortOrderInput | SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    profession?: ProfessionOrderByWithRelationInput
    tool?: ToolOrderByWithRelationInput
    level?: LevelOrderByWithRelationInput
  }

  export type BasketWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BasketWhereInput | BasketWhereInput[]
    OR?: BasketWhereInput[]
    NOT?: BasketWhereInput | BasketWhereInput[]
    ownerId?: StringFilter<"Basket"> | string
    professionId?: StringNullableFilter<"Basket"> | string | null
    toolId?: StringNullableFilter<"Basket"> | string | null
    levelId?: StringNullableFilter<"Basket"> | string | null
    quantity?: IntFilter<"Basket"> | number
    timeUnit?: EnumTimeUnitNullableFilter<"Basket"> | $Enums.TimeUnit | null
    workingTime?: FloatNullableFilter<"Basket"> | number | null
    price?: DecimalFilter<"Basket"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"Basket"> | Date | string
    updatedAt?: DateTimeFilter<"Basket"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    profession?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
    tool?: XOR<ToolNullableScalarRelationFilter, ToolWhereInput> | null
    level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
  }, "id">

  export type BasketOrderByWithAggregationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    professionId?: SortOrderInput | SortOrder
    toolId?: SortOrderInput | SortOrder
    levelId?: SortOrderInput | SortOrder
    quantity?: SortOrder
    timeUnit?: SortOrderInput | SortOrder
    workingTime?: SortOrderInput | SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BasketCountOrderByAggregateInput
    _avg?: BasketAvgOrderByAggregateInput
    _max?: BasketMaxOrderByAggregateInput
    _min?: BasketMinOrderByAggregateInput
    _sum?: BasketSumOrderByAggregateInput
  }

  export type BasketScalarWhereWithAggregatesInput = {
    AND?: BasketScalarWhereWithAggregatesInput | BasketScalarWhereWithAggregatesInput[]
    OR?: BasketScalarWhereWithAggregatesInput[]
    NOT?: BasketScalarWhereWithAggregatesInput | BasketScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Basket"> | string
    ownerId?: StringWithAggregatesFilter<"Basket"> | string
    professionId?: StringNullableWithAggregatesFilter<"Basket"> | string | null
    toolId?: StringNullableWithAggregatesFilter<"Basket"> | string | null
    levelId?: StringNullableWithAggregatesFilter<"Basket"> | string | null
    quantity?: IntWithAggregatesFilter<"Basket"> | number
    timeUnit?: EnumTimeUnitNullableWithAggregatesFilter<"Basket"> | $Enums.TimeUnit | null
    workingTime?: FloatNullableWithAggregatesFilter<"Basket"> | number | null
    price?: DecimalWithAggregatesFilter<"Basket"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"Basket"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Basket"> | Date | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    message?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    orderId?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    MasterRatings?: MasterRatingsListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    order?: OrderOrderByWithRelationInput
    MasterRatings?: MasterRatingsOrderByRelationAggregateInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    message?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    orderId?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    MasterRatings?: MasterRatingsListRelationFilter
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    message?: StringWithAggregatesFilter<"Comment"> | string
    userId?: StringWithAggregatesFilter<"Comment"> | string
    orderId?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
  }

  export type MasterRatingsWhereInput = {
    AND?: MasterRatingsWhereInput | MasterRatingsWhereInput[]
    OR?: MasterRatingsWhereInput[]
    NOT?: MasterRatingsWhereInput | MasterRatingsWhereInput[]
    id?: StringFilter<"MasterRatings"> | string
    star?: FloatFilter<"MasterRatings"> | number
    masterId?: StringFilter<"MasterRatings"> | string
    commentId?: StringFilter<"MasterRatings"> | string
    Master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
    Comment?: XOR<CommentScalarRelationFilter, CommentWhereInput>
  }

  export type MasterRatingsOrderByWithRelationInput = {
    id?: SortOrder
    star?: SortOrder
    masterId?: SortOrder
    commentId?: SortOrder
    Master?: MasterOrderByWithRelationInput
    Comment?: CommentOrderByWithRelationInput
  }

  export type MasterRatingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MasterRatingsWhereInput | MasterRatingsWhereInput[]
    OR?: MasterRatingsWhereInput[]
    NOT?: MasterRatingsWhereInput | MasterRatingsWhereInput[]
    star?: FloatFilter<"MasterRatings"> | number
    masterId?: StringFilter<"MasterRatings"> | string
    commentId?: StringFilter<"MasterRatings"> | string
    Master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
    Comment?: XOR<CommentScalarRelationFilter, CommentWhereInput>
  }, "id">

  export type MasterRatingsOrderByWithAggregationInput = {
    id?: SortOrder
    star?: SortOrder
    masterId?: SortOrder
    commentId?: SortOrder
    _count?: MasterRatingsCountOrderByAggregateInput
    _avg?: MasterRatingsAvgOrderByAggregateInput
    _max?: MasterRatingsMaxOrderByAggregateInput
    _min?: MasterRatingsMinOrderByAggregateInput
    _sum?: MasterRatingsSumOrderByAggregateInput
  }

  export type MasterRatingsScalarWhereWithAggregatesInput = {
    AND?: MasterRatingsScalarWhereWithAggregatesInput | MasterRatingsScalarWhereWithAggregatesInput[]
    OR?: MasterRatingsScalarWhereWithAggregatesInput[]
    NOT?: MasterRatingsScalarWhereWithAggregatesInput | MasterRatingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MasterRatings"> | string
    star?: FloatWithAggregatesFilter<"MasterRatings"> | number
    masterId?: StringWithAggregatesFilter<"MasterRatings"> | string
    commentId?: StringWithAggregatesFilter<"MasterRatings"> | string
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    id?: StringFilter<"Contact"> | string
    firstName?: StringFilter<"Contact"> | string
    lastName?: StringFilter<"Contact"> | string
    phoneNumber?: StringFilter<"Contact"> | string
    address?: StringFilter<"Contact"> | string
    message?: StringNullableFilter<"Contact"> | string | null
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
    userId?: StringFilter<"Contact"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    firstName?: StringFilter<"Contact"> | string
    lastName?: StringFilter<"Contact"> | string
    phoneNumber?: StringFilter<"Contact"> | string
    address?: StringFilter<"Contact"> | string
    message?: StringNullableFilter<"Contact"> | string | null
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
    userId?: StringFilter<"Contact"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: ContactCountOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contact"> | string
    firstName?: StringWithAggregatesFilter<"Contact"> | string
    lastName?: StringWithAggregatesFilter<"Contact"> | string
    phoneNumber?: StringWithAggregatesFilter<"Contact"> | string
    address?: StringWithAggregatesFilter<"Contact"> | string
    message?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Contact"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Contact"> | Date | string
    userId?: StringWithAggregatesFilter<"Contact"> | string
  }

  export type FAQWhereInput = {
    AND?: FAQWhereInput | FAQWhereInput[]
    OR?: FAQWhereInput[]
    NOT?: FAQWhereInput | FAQWhereInput[]
    id?: StringFilter<"FAQ"> | string
    questionUz?: StringFilter<"FAQ"> | string
    questionRu?: StringNullableFilter<"FAQ"> | string | null
    questionEn?: StringNullableFilter<"FAQ"> | string | null
    answerUz?: StringFilter<"FAQ"> | string
    answerRu?: StringNullableFilter<"FAQ"> | string | null
    answerEn?: StringNullableFilter<"FAQ"> | string | null
    createdAt?: DateTimeFilter<"FAQ"> | Date | string
    updatedAt?: DateTimeFilter<"FAQ"> | Date | string
  }

  export type FAQOrderByWithRelationInput = {
    id?: SortOrder
    questionUz?: SortOrder
    questionRu?: SortOrderInput | SortOrder
    questionEn?: SortOrderInput | SortOrder
    answerUz?: SortOrder
    answerRu?: SortOrderInput | SortOrder
    answerEn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FAQWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FAQWhereInput | FAQWhereInput[]
    OR?: FAQWhereInput[]
    NOT?: FAQWhereInput | FAQWhereInput[]
    questionUz?: StringFilter<"FAQ"> | string
    questionRu?: StringNullableFilter<"FAQ"> | string | null
    questionEn?: StringNullableFilter<"FAQ"> | string | null
    answerUz?: StringFilter<"FAQ"> | string
    answerRu?: StringNullableFilter<"FAQ"> | string | null
    answerEn?: StringNullableFilter<"FAQ"> | string | null
    createdAt?: DateTimeFilter<"FAQ"> | Date | string
    updatedAt?: DateTimeFilter<"FAQ"> | Date | string
  }, "id">

  export type FAQOrderByWithAggregationInput = {
    id?: SortOrder
    questionUz?: SortOrder
    questionRu?: SortOrderInput | SortOrder
    questionEn?: SortOrderInput | SortOrder
    answerUz?: SortOrder
    answerRu?: SortOrderInput | SortOrder
    answerEn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FAQCountOrderByAggregateInput
    _max?: FAQMaxOrderByAggregateInput
    _min?: FAQMinOrderByAggregateInput
  }

  export type FAQScalarWhereWithAggregatesInput = {
    AND?: FAQScalarWhereWithAggregatesInput | FAQScalarWhereWithAggregatesInput[]
    OR?: FAQScalarWhereWithAggregatesInput[]
    NOT?: FAQScalarWhereWithAggregatesInput | FAQScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FAQ"> | string
    questionUz?: StringWithAggregatesFilter<"FAQ"> | string
    questionRu?: StringNullableWithAggregatesFilter<"FAQ"> | string | null
    questionEn?: StringNullableWithAggregatesFilter<"FAQ"> | string | null
    answerUz?: StringWithAggregatesFilter<"FAQ"> | string
    answerRu?: StringNullableWithAggregatesFilter<"FAQ"> | string | null
    answerEn?: StringNullableWithAggregatesFilter<"FAQ"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FAQ"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FAQ"> | Date | string
  }

  export type ShowcaseWhereInput = {
    AND?: ShowcaseWhereInput | ShowcaseWhereInput[]
    OR?: ShowcaseWhereInput[]
    NOT?: ShowcaseWhereInput | ShowcaseWhereInput[]
    id?: StringFilter<"Showcase"> | string
    nameUz?: StringFilter<"Showcase"> | string
    nameRu?: StringNullableFilter<"Showcase"> | string | null
    nameEn?: StringNullableFilter<"Showcase"> | string | null
    descriptionUz?: StringFilter<"Showcase"> | string
    descriptionRu?: StringNullableFilter<"Showcase"> | string | null
    descriptionEn?: StringNullableFilter<"Showcase"> | string | null
    image?: StringFilter<"Showcase"> | string
    link?: StringFilter<"Showcase"> | string
    createdAt?: DateTimeFilter<"Showcase"> | Date | string
    updatedAt?: DateTimeFilter<"Showcase"> | Date | string
  }

  export type ShowcaseOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    descriptionUz?: SortOrder
    descriptionRu?: SortOrderInput | SortOrder
    descriptionEn?: SortOrderInput | SortOrder
    image?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShowcaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShowcaseWhereInput | ShowcaseWhereInput[]
    OR?: ShowcaseWhereInput[]
    NOT?: ShowcaseWhereInput | ShowcaseWhereInput[]
    nameUz?: StringFilter<"Showcase"> | string
    nameRu?: StringNullableFilter<"Showcase"> | string | null
    nameEn?: StringNullableFilter<"Showcase"> | string | null
    descriptionUz?: StringFilter<"Showcase"> | string
    descriptionRu?: StringNullableFilter<"Showcase"> | string | null
    descriptionEn?: StringNullableFilter<"Showcase"> | string | null
    image?: StringFilter<"Showcase"> | string
    link?: StringFilter<"Showcase"> | string
    createdAt?: DateTimeFilter<"Showcase"> | Date | string
    updatedAt?: DateTimeFilter<"Showcase"> | Date | string
  }, "id">

  export type ShowcaseOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    descriptionUz?: SortOrder
    descriptionRu?: SortOrderInput | SortOrder
    descriptionEn?: SortOrderInput | SortOrder
    image?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShowcaseCountOrderByAggregateInput
    _max?: ShowcaseMaxOrderByAggregateInput
    _min?: ShowcaseMinOrderByAggregateInput
  }

  export type ShowcaseScalarWhereWithAggregatesInput = {
    AND?: ShowcaseScalarWhereWithAggregatesInput | ShowcaseScalarWhereWithAggregatesInput[]
    OR?: ShowcaseScalarWhereWithAggregatesInput[]
    NOT?: ShowcaseScalarWhereWithAggregatesInput | ShowcaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Showcase"> | string
    nameUz?: StringWithAggregatesFilter<"Showcase"> | string
    nameRu?: StringNullableWithAggregatesFilter<"Showcase"> | string | null
    nameEn?: StringNullableWithAggregatesFilter<"Showcase"> | string | null
    descriptionUz?: StringWithAggregatesFilter<"Showcase"> | string
    descriptionRu?: StringNullableWithAggregatesFilter<"Showcase"> | string | null
    descriptionEn?: StringNullableWithAggregatesFilter<"Showcase"> | string | null
    image?: StringWithAggregatesFilter<"Showcase"> | string
    link?: StringWithAggregatesFilter<"Showcase"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Showcase"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Showcase"> | Date | string
  }

  export type PartnerWhereInput = {
    AND?: PartnerWhereInput | PartnerWhereInput[]
    OR?: PartnerWhereInput[]
    NOT?: PartnerWhereInput | PartnerWhereInput[]
    id?: StringFilter<"Partner"> | string
    nameUz?: StringFilter<"Partner"> | string
    nameRu?: StringNullableFilter<"Partner"> | string | null
    nameEn?: StringNullableFilter<"Partner"> | string | null
    image?: StringFilter<"Partner"> | string
    link?: StringNullableFilter<"Partner"> | string | null
    createdAt?: DateTimeFilter<"Partner"> | Date | string
    updatedAt?: DateTimeFilter<"Partner"> | Date | string
  }

  export type PartnerOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    image?: SortOrder
    link?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartnerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PartnerWhereInput | PartnerWhereInput[]
    OR?: PartnerWhereInput[]
    NOT?: PartnerWhereInput | PartnerWhereInput[]
    nameUz?: StringFilter<"Partner"> | string
    nameRu?: StringNullableFilter<"Partner"> | string | null
    nameEn?: StringNullableFilter<"Partner"> | string | null
    image?: StringFilter<"Partner"> | string
    link?: StringNullableFilter<"Partner"> | string | null
    createdAt?: DateTimeFilter<"Partner"> | Date | string
    updatedAt?: DateTimeFilter<"Partner"> | Date | string
  }, "id">

  export type PartnerOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    image?: SortOrder
    link?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PartnerCountOrderByAggregateInput
    _max?: PartnerMaxOrderByAggregateInput
    _min?: PartnerMinOrderByAggregateInput
  }

  export type PartnerScalarWhereWithAggregatesInput = {
    AND?: PartnerScalarWhereWithAggregatesInput | PartnerScalarWhereWithAggregatesInput[]
    OR?: PartnerScalarWhereWithAggregatesInput[]
    NOT?: PartnerScalarWhereWithAggregatesInput | PartnerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Partner"> | string
    nameUz?: StringWithAggregatesFilter<"Partner"> | string
    nameRu?: StringNullableWithAggregatesFilter<"Partner"> | string | null
    nameEn?: StringNullableWithAggregatesFilter<"Partner"> | string | null
    image?: StringWithAggregatesFilter<"Partner"> | string
    link?: StringNullableWithAggregatesFilter<"Partner"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Partner"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Partner"> | Date | string
  }

  export type SiteMetadataWhereInput = {
    AND?: SiteMetadataWhereInput | SiteMetadataWhereInput[]
    OR?: SiteMetadataWhereInput[]
    NOT?: SiteMetadataWhereInput | SiteMetadataWhereInput[]
    id?: StringFilter<"SiteMetadata"> | string
    aboutUz?: StringFilter<"SiteMetadata"> | string
    aboutRu?: StringNullableFilter<"SiteMetadata"> | string | null
    aboutEn?: StringNullableFilter<"SiteMetadata"> | string | null
    privacyPolicyUz?: StringFilter<"SiteMetadata"> | string
    privacyPolicyRu?: StringNullableFilter<"SiteMetadata"> | string | null
    privacyPolicyEn?: StringNullableFilter<"SiteMetadata"> | string | null
    email?: StringFilter<"SiteMetadata"> | string
    phoneNumber?: StringFilter<"SiteMetadata"> | string
    socialMedia?: JsonFilter<"SiteMetadata">
    createdAt?: DateTimeFilter<"SiteMetadata"> | Date | string
    updatedAt?: DateTimeFilter<"SiteMetadata"> | Date | string
  }

  export type SiteMetadataOrderByWithRelationInput = {
    id?: SortOrder
    aboutUz?: SortOrder
    aboutRu?: SortOrderInput | SortOrder
    aboutEn?: SortOrderInput | SortOrder
    privacyPolicyUz?: SortOrder
    privacyPolicyRu?: SortOrderInput | SortOrder
    privacyPolicyEn?: SortOrderInput | SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    socialMedia?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteMetadataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SiteMetadataWhereInput | SiteMetadataWhereInput[]
    OR?: SiteMetadataWhereInput[]
    NOT?: SiteMetadataWhereInput | SiteMetadataWhereInput[]
    aboutUz?: StringFilter<"SiteMetadata"> | string
    aboutRu?: StringNullableFilter<"SiteMetadata"> | string | null
    aboutEn?: StringNullableFilter<"SiteMetadata"> | string | null
    privacyPolicyUz?: StringFilter<"SiteMetadata"> | string
    privacyPolicyRu?: StringNullableFilter<"SiteMetadata"> | string | null
    privacyPolicyEn?: StringNullableFilter<"SiteMetadata"> | string | null
    email?: StringFilter<"SiteMetadata"> | string
    phoneNumber?: StringFilter<"SiteMetadata"> | string
    socialMedia?: JsonFilter<"SiteMetadata">
    createdAt?: DateTimeFilter<"SiteMetadata"> | Date | string
    updatedAt?: DateTimeFilter<"SiteMetadata"> | Date | string
  }, "id">

  export type SiteMetadataOrderByWithAggregationInput = {
    id?: SortOrder
    aboutUz?: SortOrder
    aboutRu?: SortOrderInput | SortOrder
    aboutEn?: SortOrderInput | SortOrder
    privacyPolicyUz?: SortOrder
    privacyPolicyRu?: SortOrderInput | SortOrder
    privacyPolicyEn?: SortOrderInput | SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    socialMedia?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SiteMetadataCountOrderByAggregateInput
    _max?: SiteMetadataMaxOrderByAggregateInput
    _min?: SiteMetadataMinOrderByAggregateInput
  }

  export type SiteMetadataScalarWhereWithAggregatesInput = {
    AND?: SiteMetadataScalarWhereWithAggregatesInput | SiteMetadataScalarWhereWithAggregatesInput[]
    OR?: SiteMetadataScalarWhereWithAggregatesInput[]
    NOT?: SiteMetadataScalarWhereWithAggregatesInput | SiteMetadataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SiteMetadata"> | string
    aboutUz?: StringWithAggregatesFilter<"SiteMetadata"> | string
    aboutRu?: StringNullableWithAggregatesFilter<"SiteMetadata"> | string | null
    aboutEn?: StringNullableWithAggregatesFilter<"SiteMetadata"> | string | null
    privacyPolicyUz?: StringWithAggregatesFilter<"SiteMetadata"> | string
    privacyPolicyRu?: StringNullableWithAggregatesFilter<"SiteMetadata"> | string | null
    privacyPolicyEn?: StringNullableWithAggregatesFilter<"SiteMetadata"> | string | null
    email?: StringWithAggregatesFilter<"SiteMetadata"> | string
    phoneNumber?: StringWithAggregatesFilter<"SiteMetadata"> | string
    socialMedia?: JsonWithAggregatesFilter<"SiteMetadata">
    createdAt?: DateTimeWithAggregatesFilter<"SiteMetadata"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SiteMetadata"> | Date | string
  }

  export type RegionCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type RegionCreateManyInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: RegionCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    companies?: CompanyCreateNestedManyWithoutOwnerInput
    order?: OrderCreateNestedManyWithoutOwnerInput
    contact?: ContactCreateNestedManyWithoutUserInput
    basket?: BasketCreateNestedManyWithoutOwnerInput
    comment?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    regionId?: string | null
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companies?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    order?: OrderUncheckedCreateNestedManyWithoutOwnerInput
    contact?: ContactUncheckedCreateNestedManyWithoutUserInput
    basket?: BasketUncheckedCreateNestedManyWithoutOwnerInput
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companies?: CompanyUpdateManyWithoutOwnerNestedInput
    order?: OrderUpdateManyWithoutOwnerNestedInput
    contact?: ContactUpdateManyWithoutUserNestedInput
    basket?: BasketUpdateManyWithoutOwnerNestedInput
    comment?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    order?: OrderUncheckedUpdateManyWithoutOwnerNestedInput
    contact?: ContactUncheckedUpdateManyWithoutUserNestedInput
    basket?: BasketUncheckedUpdateManyWithoutOwnerNestedInput
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    regionId?: string | null
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    taxId?: string | null
    bankCode?: string | null
    bankAccount?: string | null
    bankName?: string | null
    oked?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompaniesInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    taxId?: string | null
    bankCode?: string | null
    bankAccount?: string | null
    bankName?: string | null
    oked?: string | null
    address?: string | null
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    bankCode?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompaniesNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    bankCode?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateManyInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    taxId?: string | null
    bankCode?: string | null
    bankAccount?: string | null
    bankName?: string | null
    oked?: string | null
    address?: string | null
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    bankCode?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    bankCode?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    ip?: string | null
    userAgent?: string | null
    device?: string | null
    brand?: string | null
    model?: string | null
    os?: string | null
    osVersion?: string | null
    client?: string | null
    clientType?: string | null
    clientVersion?: string | null
    isBot?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userId: string
    ip?: string | null
    userAgent?: string | null
    device?: string | null
    brand?: string | null
    model?: string | null
    os?: string | null
    osVersion?: string | null
    client?: string | null
    clientType?: string | null
    clientVersion?: string | null
    isBot?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    client?: NullableStringFieldUpdateOperationsInput | string | null
    clientType?: NullableStringFieldUpdateOperationsInput | string | null
    clientVersion?: NullableStringFieldUpdateOperationsInput | string | null
    isBot?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    client?: NullableStringFieldUpdateOperationsInput | string | null
    clientType?: NullableStringFieldUpdateOperationsInput | string | null
    clientVersion?: NullableStringFieldUpdateOperationsInput | string | null
    isBot?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    userId: string
    ip?: string | null
    userAgent?: string | null
    device?: string | null
    brand?: string | null
    model?: string | null
    os?: string | null
    osVersion?: string | null
    client?: string | null
    clientType?: string | null
    clientVersion?: string | null
    isBot?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    client?: NullableStringFieldUpdateOperationsInput | string | null
    clientType?: NullableStringFieldUpdateOperationsInput | string | null
    clientVersion?: NullableStringFieldUpdateOperationsInput | string | null
    isBot?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    client?: NullableStringFieldUpdateOperationsInput | string | null
    clientType?: NullableStringFieldUpdateOperationsInput | string | null
    clientVersion?: NullableStringFieldUpdateOperationsInput | string | null
    isBot?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tools?: ToolCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tools?: ToolUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tools?: ToolUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tools?: ToolUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandCreateManyInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tools?: ToolCreateNestedManyWithoutSizeInput
  }

  export type SizeUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tools?: ToolUncheckedCreateNestedManyWithoutSizeInput
  }

  export type SizeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tools?: ToolUpdateManyWithoutSizeNestedInput
  }

  export type SizeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tools?: ToolUncheckedUpdateManyWithoutSizeNestedInput
  }

  export type SizeCreateManyInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SizeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PowerCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tools?: ToolCreateNestedManyWithoutPowerInput
  }

  export type PowerUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tools?: ToolUncheckedCreateNestedManyWithoutPowerInput
  }

  export type PowerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tools?: ToolUpdateManyWithoutPowerNestedInput
  }

  export type PowerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tools?: ToolUncheckedUpdateManyWithoutPowerNestedInput
  }

  export type PowerCreateManyInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PowerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PowerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ToolCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: BrandCreateNestedOneWithoutToolsInput
    power?: PowerCreateNestedOneWithoutToolsInput
    size?: SizeCreateNestedOneWithoutToolsInput
    professionTools?: ProfessionToolCreateNestedManyWithoutToolInput
    orderProducts?: OrderProductCreateNestedManyWithoutToolInput
    basket?: BasketCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    brandId?: string | null
    powerId?: string | null
    sizeId?: string | null
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    professionTools?: ProfessionToolUncheckedCreateNestedManyWithoutToolInput
    orderProducts?: OrderProductUncheckedCreateNestedManyWithoutToolInput
    basket?: BasketUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneWithoutToolsNestedInput
    power?: PowerUpdateOneWithoutToolsNestedInput
    size?: SizeUpdateOneWithoutToolsNestedInput
    professionTools?: ProfessionToolUpdateManyWithoutToolNestedInput
    orderProducts?: OrderProductUpdateManyWithoutToolNestedInput
    basket?: BasketUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    powerId?: NullableStringFieldUpdateOperationsInput | string | null
    sizeId?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professionTools?: ProfessionToolUncheckedUpdateManyWithoutToolNestedInput
    orderProducts?: OrderProductUncheckedUpdateManyWithoutToolNestedInput
    basket?: BasketUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolCreateManyInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    brandId?: string | null
    powerId?: string | null
    sizeId?: string | null
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ToolUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ToolUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    powerId?: NullableStringFieldUpdateOperationsInput | string | null
    sizeId?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterCreateInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    isActive?: boolean
    birthYear: number
    img: string
    passportImg: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionCreateNestedManyWithoutMasterInput
    ordermasters?: OrderMasterCreateNestedManyWithoutMasterInput
    masterRating?: MasterRatingsCreateNestedManyWithoutMasterInput
  }

  export type MasterUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    isActive?: boolean
    birthYear: number
    img: string
    passportImg: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionUncheckedCreateNestedManyWithoutMasterInput
    ordermasters?: OrderMasterUncheckedCreateNestedManyWithoutMasterInput
    masterRating?: MasterRatingsUncheckedCreateNestedManyWithoutMasterInput
  }

  export type MasterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    birthYear?: IntFieldUpdateOperationsInput | number
    img?: StringFieldUpdateOperationsInput | string
    passportImg?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUpdateManyWithoutMasterNestedInput
    ordermasters?: OrderMasterUpdateManyWithoutMasterNestedInput
    masterRating?: MasterRatingsUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    birthYear?: IntFieldUpdateOperationsInput | number
    img?: StringFieldUpdateOperationsInput | string
    passportImg?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUncheckedUpdateManyWithoutMasterNestedInput
    ordermasters?: OrderMasterUncheckedUpdateManyWithoutMasterNestedInput
    masterRating?: MasterRatingsUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type MasterCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    isActive?: boolean
    birthYear: number
    img: string
    passportImg: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    birthYear?: IntFieldUpdateOperationsInput | number
    img?: StringFieldUpdateOperationsInput | string
    passportImg?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    birthYear?: IntFieldUpdateOperationsInput | number
    img?: StringFieldUpdateOperationsInput | string
    passportImg?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterProfessionCreateInput = {
    id?: string
    minWorkingHours?: number | null
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    experience: number
    createdAt?: Date | string
    updatedAt?: Date | string
    profession?: ProfessionCreateNestedOneWithoutMasterProfessionsInput
    level?: LevelCreateNestedOneWithoutMasterProfessionsInput
    master?: MasterCreateNestedOneWithoutMasterProfessionsInput
  }

  export type MasterProfessionUncheckedCreateInput = {
    id?: string
    professionId?: string | null
    minWorkingHours?: number | null
    levelId?: string | null
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    experience: number
    masterId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterProfessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    experience?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: ProfessionUpdateOneWithoutMasterProfessionsNestedInput
    level?: LevelUpdateOneWithoutMasterProfessionsNestedInput
    master?: MasterUpdateOneWithoutMasterProfessionsNestedInput
  }

  export type MasterProfessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    experience?: FloatFieldUpdateOperationsInput | number
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterProfessionCreateManyInput = {
    id?: string
    professionId?: string | null
    minWorkingHours?: number | null
    levelId?: string | null
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    experience: number
    masterId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterProfessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    experience?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterProfessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    experience?: FloatFieldUpdateOperationsInput | number
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LevelCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionCreateNestedManyWithoutLevelInput
    professionLevels?: ProfessionLevelCreateNestedManyWithoutLevelInput
    orderProductLevel?: OrderProductCreateNestedManyWithoutLevelInput
    basket?: BasketCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionUncheckedCreateNestedManyWithoutLevelInput
    professionLevels?: ProfessionLevelUncheckedCreateNestedManyWithoutLevelInput
    orderProductLevel?: OrderProductUncheckedCreateNestedManyWithoutLevelInput
    basket?: BasketUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUpdateManyWithoutLevelNestedInput
    professionLevels?: ProfessionLevelUpdateManyWithoutLevelNestedInput
    orderProductLevel?: OrderProductUpdateManyWithoutLevelNestedInput
    basket?: BasketUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUncheckedUpdateManyWithoutLevelNestedInput
    professionLevels?: ProfessionLevelUncheckedUpdateManyWithoutLevelNestedInput
    orderProductLevel?: OrderProductUncheckedUpdateManyWithoutLevelNestedInput
    basket?: BasketUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type LevelCreateManyInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LevelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LevelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    img: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionCreateNestedManyWithoutProfessionInput
    professionLevels?: ProfessionLevelCreateNestedManyWithoutProfessionInput
    professionTools?: ProfessionToolCreateNestedManyWithoutProfessionInput
    orderProducts?: OrderProductCreateNestedManyWithoutProfessionInput
    basket?: BasketCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    img: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionUncheckedCreateNestedManyWithoutProfessionInput
    professionLevels?: ProfessionLevelUncheckedCreateNestedManyWithoutProfessionInput
    professionTools?: ProfessionToolUncheckedCreateNestedManyWithoutProfessionInput
    orderProducts?: OrderProductUncheckedCreateNestedManyWithoutProfessionInput
    basket?: BasketUncheckedCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUpdateManyWithoutProfessionNestedInput
    professionLevels?: ProfessionLevelUpdateManyWithoutProfessionNestedInput
    professionTools?: ProfessionToolUpdateManyWithoutProfessionNestedInput
    orderProducts?: OrderProductUpdateManyWithoutProfessionNestedInput
    basket?: BasketUpdateManyWithoutProfessionNestedInput
  }

  export type ProfessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUncheckedUpdateManyWithoutProfessionNestedInput
    professionLevels?: ProfessionLevelUncheckedUpdateManyWithoutProfessionNestedInput
    professionTools?: ProfessionToolUncheckedUpdateManyWithoutProfessionNestedInput
    orderProducts?: OrderProductUncheckedUpdateManyWithoutProfessionNestedInput
    basket?: BasketUncheckedUpdateManyWithoutProfessionNestedInput
  }

  export type ProfessionCreateManyInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    img: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionLevelCreateInput = {
    id?: string
    minWorkingHours: number
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    profession: ProfessionCreateNestedOneWithoutProfessionLevelsInput
    level: LevelCreateNestedOneWithoutProfessionLevelsInput
  }

  export type ProfessionLevelUncheckedCreateInput = {
    id?: string
    professionId: string
    levelId: string
    minWorkingHours: number
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionLevelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: ProfessionUpdateOneRequiredWithoutProfessionLevelsNestedInput
    level?: LevelUpdateOneRequiredWithoutProfessionLevelsNestedInput
  }

  export type ProfessionLevelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionLevelCreateManyInput = {
    id?: string
    professionId: string
    levelId: string
    minWorkingHours: number
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionLevelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionLevelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionToolCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profession: ProfessionCreateNestedOneWithoutProfessionToolsInput
    tool: ToolCreateNestedOneWithoutProfessionToolsInput
  }

  export type ProfessionToolUncheckedCreateInput = {
    id?: string
    professionId: string
    toolId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionToolUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: ProfessionUpdateOneRequiredWithoutProfessionToolsNestedInput
    tool?: ToolUpdateOneRequiredWithoutProfessionToolsNestedInput
  }

  export type ProfessionToolUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionToolCreateManyInput = {
    id?: string
    professionId: string
    toolId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionToolUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionToolUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateInput = {
    id?: string
    address: string
    latitude: string
    longitude: string
    date: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
    isPaid?: boolean
    paymentType?: $Enums.PaymentType
    withDelivery: boolean
    status?: $Enums.OrderStatus
    deliveryComment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: OrderProductCreateNestedManyWithoutOrderInput
    comments?: CommentCreateNestedManyWithoutOrderInput
    masters?: OrderMasterCreateNestedManyWithoutOrderInput
    owner: UserCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: string
    ownerId: string
    address: string
    latitude: string
    longitude: string
    date: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
    isPaid?: boolean
    paymentType?: $Enums.PaymentType
    withDelivery: boolean
    status?: $Enums.OrderStatus
    deliveryComment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: OrderProductUncheckedCreateNestedManyWithoutOrderInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrderInput
    masters?: OrderMasterUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
    longitude?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    deliveryComment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: OrderProductUpdateManyWithoutOrderNestedInput
    comments?: CommentUpdateManyWithoutOrderNestedInput
    masters?: OrderMasterUpdateManyWithoutOrderNestedInput
    owner?: UserUpdateOneRequiredWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
    longitude?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    deliveryComment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: OrderProductUncheckedUpdateManyWithoutOrderNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrderNestedInput
    masters?: OrderMasterUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: string
    ownerId: string
    address: string
    latitude: string
    longitude: string
    date: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
    isPaid?: boolean
    paymentType?: $Enums.PaymentType
    withDelivery: boolean
    status?: $Enums.OrderStatus
    deliveryComment: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
    longitude?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    deliveryComment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
    longitude?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    deliveryComment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderProductCreateInput = {
    id?: string
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutOrderProductsInput
    profession?: ProfessionCreateNestedOneWithoutOrderProductsInput
    tool?: ToolCreateNestedOneWithoutOrderProductsInput
    level?: LevelCreateNestedOneWithoutOrderProductLevelInput
  }

  export type OrderProductUncheckedCreateInput = {
    id?: string
    orderId: string
    professionId?: string | null
    toolId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutOrderProductsNestedInput
    profession?: ProfessionUpdateOneWithoutOrderProductsNestedInput
    tool?: ToolUpdateOneWithoutOrderProductsNestedInput
    level?: LevelUpdateOneWithoutOrderProductLevelNestedInput
  }

  export type OrderProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderProductCreateManyInput = {
    id?: string
    orderId: string
    professionId?: string | null
    toolId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderMasterCreateInput = {
    id?: string
    order: OrderCreateNestedOneWithoutMastersInput
    master: MasterCreateNestedOneWithoutOrdermastersInput
  }

  export type OrderMasterUncheckedCreateInput = {
    id?: string
    orderId: string
    masterid: string
  }

  export type OrderMasterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: OrderUpdateOneRequiredWithoutMastersNestedInput
    master?: MasterUpdateOneRequiredWithoutOrdermastersNestedInput
  }

  export type OrderMasterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    masterid?: StringFieldUpdateOperationsInput | string
  }

  export type OrderMasterCreateManyInput = {
    id?: string
    orderId: string
    masterid: string
  }

  export type OrderMasterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type OrderMasterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    masterid?: StringFieldUpdateOperationsInput | string
  }

  export type BasketCreateInput = {
    id?: string
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutBasketInput
    profession?: ProfessionCreateNestedOneWithoutBasketInput
    tool?: ToolCreateNestedOneWithoutBasketInput
    level?: LevelCreateNestedOneWithoutBasketInput
  }

  export type BasketUncheckedCreateInput = {
    id?: string
    ownerId: string
    professionId?: string | null
    toolId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BasketUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutBasketNestedInput
    profession?: ProfessionUpdateOneWithoutBasketNestedInput
    tool?: ToolUpdateOneWithoutBasketNestedInput
    level?: LevelUpdateOneWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BasketCreateManyInput = {
    id?: string
    ownerId: string
    professionId?: string | null
    toolId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BasketUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BasketUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCommentInput
    order: OrderCreateNestedOneWithoutCommentsInput
    MasterRatings?: MasterRatingsCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    message: string
    userId: string
    orderId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MasterRatings?: MasterRatingsUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentNestedInput
    order?: OrderUpdateOneRequiredWithoutCommentsNestedInput
    MasterRatings?: MasterRatingsUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MasterRatings?: MasterRatingsUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentCreateManyInput = {
    id?: string
    message: string
    userId: string
    orderId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterRatingsCreateInput = {
    id?: string
    star: number
    Master: MasterCreateNestedOneWithoutMasterRatingInput
    Comment: CommentCreateNestedOneWithoutMasterRatingsInput
  }

  export type MasterRatingsUncheckedCreateInput = {
    id?: string
    star: number
    masterId: string
    commentId: string
  }

  export type MasterRatingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    Master?: MasterUpdateOneRequiredWithoutMasterRatingNestedInput
    Comment?: CommentUpdateOneRequiredWithoutMasterRatingsNestedInput
  }

  export type MasterRatingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    masterId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type MasterRatingsCreateManyInput = {
    id?: string
    star: number
    masterId: string
    commentId: string
  }

  export type MasterRatingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
  }

  export type MasterRatingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    masterId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutContactInput
  }

  export type ContactUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type ContactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type ContactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FAQCreateInput = {
    id?: string
    questionUz: string
    questionRu?: string | null
    questionEn?: string | null
    answerUz: string
    answerRu?: string | null
    answerEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FAQUncheckedCreateInput = {
    id?: string
    questionUz: string
    questionRu?: string | null
    questionEn?: string | null
    answerUz: string
    answerRu?: string | null
    answerEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FAQUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionUz?: StringFieldUpdateOperationsInput | string
    questionRu?: NullableStringFieldUpdateOperationsInput | string | null
    questionEn?: NullableStringFieldUpdateOperationsInput | string | null
    answerUz?: StringFieldUpdateOperationsInput | string
    answerRu?: NullableStringFieldUpdateOperationsInput | string | null
    answerEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FAQUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionUz?: StringFieldUpdateOperationsInput | string
    questionRu?: NullableStringFieldUpdateOperationsInput | string | null
    questionEn?: NullableStringFieldUpdateOperationsInput | string | null
    answerUz?: StringFieldUpdateOperationsInput | string
    answerRu?: NullableStringFieldUpdateOperationsInput | string | null
    answerEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FAQCreateManyInput = {
    id?: string
    questionUz: string
    questionRu?: string | null
    questionEn?: string | null
    answerUz: string
    answerRu?: string | null
    answerEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FAQUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionUz?: StringFieldUpdateOperationsInput | string
    questionRu?: NullableStringFieldUpdateOperationsInput | string | null
    questionEn?: NullableStringFieldUpdateOperationsInput | string | null
    answerUz?: StringFieldUpdateOperationsInput | string
    answerRu?: NullableStringFieldUpdateOperationsInput | string | null
    answerEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FAQUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionUz?: StringFieldUpdateOperationsInput | string
    questionRu?: NullableStringFieldUpdateOperationsInput | string | null
    questionEn?: NullableStringFieldUpdateOperationsInput | string | null
    answerUz?: StringFieldUpdateOperationsInput | string
    answerRu?: NullableStringFieldUpdateOperationsInput | string | null
    answerEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShowcaseCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    image: string
    link: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShowcaseUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    image: string
    link: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShowcaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShowcaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShowcaseCreateManyInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    image: string
    link: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShowcaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShowcaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnerCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    image: string
    link?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartnerUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    image: string
    link?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartnerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnerCreateManyInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    image: string
    link?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartnerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteMetadataCreateInput = {
    id?: string
    aboutUz: string
    aboutRu?: string | null
    aboutEn?: string | null
    privacyPolicyUz: string
    privacyPolicyRu?: string | null
    privacyPolicyEn?: string | null
    email: string
    phoneNumber: string
    socialMedia: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteMetadataUncheckedCreateInput = {
    id?: string
    aboutUz: string
    aboutRu?: string | null
    aboutEn?: string | null
    privacyPolicyUz: string
    privacyPolicyRu?: string | null
    privacyPolicyEn?: string | null
    email: string
    phoneNumber: string
    socialMedia: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteMetadataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    aboutUz?: StringFieldUpdateOperationsInput | string
    aboutRu?: NullableStringFieldUpdateOperationsInput | string | null
    aboutEn?: NullableStringFieldUpdateOperationsInput | string | null
    privacyPolicyUz?: StringFieldUpdateOperationsInput | string
    privacyPolicyRu?: NullableStringFieldUpdateOperationsInput | string | null
    privacyPolicyEn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    socialMedia?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteMetadataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    aboutUz?: StringFieldUpdateOperationsInput | string
    aboutRu?: NullableStringFieldUpdateOperationsInput | string | null
    aboutEn?: NullableStringFieldUpdateOperationsInput | string | null
    privacyPolicyUz?: StringFieldUpdateOperationsInput | string
    privacyPolicyRu?: NullableStringFieldUpdateOperationsInput | string | null
    privacyPolicyEn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    socialMedia?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteMetadataCreateManyInput = {
    id?: string
    aboutUz: string
    aboutRu?: string | null
    aboutEn?: string | null
    privacyPolicyUz: string
    privacyPolicyRu?: string | null
    privacyPolicyEn?: string | null
    email: string
    phoneNumber: string
    socialMedia: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteMetadataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    aboutUz?: StringFieldUpdateOperationsInput | string
    aboutRu?: NullableStringFieldUpdateOperationsInput | string | null
    aboutEn?: NullableStringFieldUpdateOperationsInput | string | null
    privacyPolicyUz?: StringFieldUpdateOperationsInput | string
    privacyPolicyRu?: NullableStringFieldUpdateOperationsInput | string | null
    privacyPolicyEn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    socialMedia?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteMetadataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    aboutUz?: StringFieldUpdateOperationsInput | string
    aboutRu?: NullableStringFieldUpdateOperationsInput | string | null
    aboutEn?: NullableStringFieldUpdateOperationsInput | string | null
    privacyPolicyUz?: StringFieldUpdateOperationsInput | string
    privacyPolicyRu?: NullableStringFieldUpdateOperationsInput | string | null
    privacyPolicyEn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    socialMedia?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegionCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegionMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegionMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type RegionNullableScalarRelationFilter = {
    is?: RegionWhereInput | null
    isNot?: RegionWhereInput | null
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type CompanyListRelationFilter = {
    every?: CompanyWhereInput
    some?: CompanyWhereInput
    none?: CompanyWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type ContactListRelationFilter = {
    every?: ContactWhereInput
    some?: ContactWhereInput
    none?: ContactWhereInput
  }

  export type BasketListRelationFilter = {
    every?: BasketWhereInput
    some?: BasketWhereInput
    none?: BasketWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BasketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    regionId?: SortOrder
    status?: SortOrder
    role?: SortOrder
    refreshToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    regionId?: SortOrder
    status?: SortOrder
    role?: SortOrder
    refreshToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    regionId?: SortOrder
    status?: SortOrder
    role?: SortOrder
    refreshToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    taxId?: SortOrder
    bankCode?: SortOrder
    bankAccount?: SortOrder
    bankName?: SortOrder
    oked?: SortOrder
    address?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    taxId?: SortOrder
    bankCode?: SortOrder
    bankAccount?: SortOrder
    bankName?: SortOrder
    oked?: SortOrder
    address?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    taxId?: SortOrder
    bankCode?: SortOrder
    bankAccount?: SortOrder
    bankName?: SortOrder
    oked?: SortOrder
    address?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    device?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    os?: SortOrder
    osVersion?: SortOrder
    client?: SortOrder
    clientType?: SortOrder
    clientVersion?: SortOrder
    isBot?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    device?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    os?: SortOrder
    osVersion?: SortOrder
    client?: SortOrder
    clientType?: SortOrder
    clientVersion?: SortOrder
    isBot?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    device?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    os?: SortOrder
    osVersion?: SortOrder
    client?: SortOrder
    clientType?: SortOrder
    clientVersion?: SortOrder
    isBot?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type ToolListRelationFilter = {
    every?: ToolWhereInput
    some?: ToolWhereInput
    none?: ToolWhereInput
  }

  export type ToolOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BrandCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BrandMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BrandMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SizeCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SizeMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SizeMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PowerCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PowerMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PowerMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BrandNullableScalarRelationFilter = {
    is?: BrandWhereInput | null
    isNot?: BrandWhereInput | null
  }

  export type PowerNullableScalarRelationFilter = {
    is?: PowerWhereInput | null
    isNot?: PowerWhereInput | null
  }

  export type SizeNullableScalarRelationFilter = {
    is?: SizeWhereInput | null
    isNot?: SizeWhereInput | null
  }

  export type ProfessionToolListRelationFilter = {
    every?: ProfessionToolWhereInput
    some?: ProfessionToolWhereInput
    none?: ProfessionToolWhereInput
  }

  export type OrderProductListRelationFilter = {
    every?: OrderProductWhereInput
    some?: OrderProductWhereInput
    none?: OrderProductWhereInput
  }

  export type ProfessionToolOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ToolCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    descriptionUz?: SortOrder
    descriptionRu?: SortOrder
    descriptionEn?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    brandId?: SortOrder
    powerId?: SortOrder
    sizeId?: SortOrder
    img?: SortOrder
    isAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ToolAvgOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
  }

  export type ToolMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    descriptionUz?: SortOrder
    descriptionRu?: SortOrder
    descriptionEn?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    brandId?: SortOrder
    powerId?: SortOrder
    sizeId?: SortOrder
    img?: SortOrder
    isAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ToolMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    descriptionUz?: SortOrder
    descriptionRu?: SortOrder
    descriptionEn?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    brandId?: SortOrder
    powerId?: SortOrder
    sizeId?: SortOrder
    img?: SortOrder
    isAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ToolSumOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type MasterProfessionListRelationFilter = {
    every?: MasterProfessionWhereInput
    some?: MasterProfessionWhereInput
    none?: MasterProfessionWhereInput
  }

  export type OrderMasterListRelationFilter = {
    every?: OrderMasterWhereInput
    some?: OrderMasterWhereInput
    none?: OrderMasterWhereInput
  }

  export type MasterRatingsListRelationFilter = {
    every?: MasterRatingsWhereInput
    some?: MasterRatingsWhereInput
    none?: MasterRatingsWhereInput
  }

  export type MasterProfessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderMasterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MasterRatingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MasterCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    isActive?: SortOrder
    birthYear?: SortOrder
    img?: SortOrder
    passportImg?: SortOrder
    about?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterAvgOrderByAggregateInput = {
    birthYear?: SortOrder
  }

  export type MasterMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    isActive?: SortOrder
    birthYear?: SortOrder
    img?: SortOrder
    passportImg?: SortOrder
    about?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    isActive?: SortOrder
    birthYear?: SortOrder
    img?: SortOrder
    passportImg?: SortOrder
    about?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterSumOrderByAggregateInput = {
    birthYear?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ProfessionNullableScalarRelationFilter = {
    is?: ProfessionWhereInput | null
    isNot?: ProfessionWhereInput | null
  }

  export type LevelNullableScalarRelationFilter = {
    is?: LevelWhereInput | null
    isNot?: LevelWhereInput | null
  }

  export type MasterNullableScalarRelationFilter = {
    is?: MasterWhereInput | null
    isNot?: MasterWhereInput | null
  }

  export type MasterProfessionCountOrderByAggregateInput = {
    id?: SortOrder
    professionId?: SortOrder
    minWorkingHours?: SortOrder
    levelId?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
    masterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterProfessionAvgOrderByAggregateInput = {
    minWorkingHours?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
  }

  export type MasterProfessionMaxOrderByAggregateInput = {
    id?: SortOrder
    professionId?: SortOrder
    minWorkingHours?: SortOrder
    levelId?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
    masterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterProfessionMinOrderByAggregateInput = {
    id?: SortOrder
    professionId?: SortOrder
    minWorkingHours?: SortOrder
    levelId?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
    masterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterProfessionSumOrderByAggregateInput = {
    minWorkingHours?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ProfessionLevelListRelationFilter = {
    every?: ProfessionLevelWhereInput
    some?: ProfessionLevelWhereInput
    none?: ProfessionLevelWhereInput
  }

  export type ProfessionLevelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LevelCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LevelMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LevelMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    img?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    img?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    img?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionScalarRelationFilter = {
    is?: ProfessionWhereInput
    isNot?: ProfessionWhereInput
  }

  export type LevelScalarRelationFilter = {
    is?: LevelWhereInput
    isNot?: LevelWhereInput
  }

  export type ProfessionLevelCountOrderByAggregateInput = {
    id?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    minWorkingHours?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionLevelAvgOrderByAggregateInput = {
    minWorkingHours?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
  }

  export type ProfessionLevelMaxOrderByAggregateInput = {
    id?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    minWorkingHours?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionLevelMinOrderByAggregateInput = {
    id?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    minWorkingHours?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionLevelSumOrderByAggregateInput = {
    minWorkingHours?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
  }

  export type ToolScalarRelationFilter = {
    is?: ToolWhereInput
    isNot?: ToolWhereInput
  }

  export type ProfessionToolCountOrderByAggregateInput = {
    id?: SortOrder
    professionId?: SortOrder
    toolId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionToolMaxOrderByAggregateInput = {
    id?: SortOrder
    professionId?: SortOrder
    toolId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionToolMinOrderByAggregateInput = {
    id?: SortOrder
    professionId?: SortOrder
    toolId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    date?: SortOrder
    totalPrice?: SortOrder
    isPaid?: SortOrder
    paymentType?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    deliveryComment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    totalPrice?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    date?: SortOrder
    totalPrice?: SortOrder
    isPaid?: SortOrder
    paymentType?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    deliveryComment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    date?: SortOrder
    totalPrice?: SortOrder
    isPaid?: SortOrder
    paymentType?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    deliveryComment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    totalPrice?: SortOrder
  }

  export type EnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type EnumTimeUnitNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TimeUnit | EnumTimeUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.TimeUnit[] | ListEnumTimeUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TimeUnit[] | ListEnumTimeUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTimeUnitNullableFilter<$PrismaModel> | $Enums.TimeUnit | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type ToolNullableScalarRelationFilter = {
    is?: ToolWhereInput | null
    isNot?: ToolWhereInput | null
  }

  export type OrderProductCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    professionId?: SortOrder
    toolId?: SortOrder
    levelId?: SortOrder
    quantity?: SortOrder
    timeUnit?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderProductAvgOrderByAggregateInput = {
    quantity?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
  }

  export type OrderProductMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    professionId?: SortOrder
    toolId?: SortOrder
    levelId?: SortOrder
    quantity?: SortOrder
    timeUnit?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderProductMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    professionId?: SortOrder
    toolId?: SortOrder
    levelId?: SortOrder
    quantity?: SortOrder
    timeUnit?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderProductSumOrderByAggregateInput = {
    quantity?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
  }

  export type EnumTimeUnitNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TimeUnit | EnumTimeUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.TimeUnit[] | ListEnumTimeUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TimeUnit[] | ListEnumTimeUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTimeUnitNullableWithAggregatesFilter<$PrismaModel> | $Enums.TimeUnit | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTimeUnitNullableFilter<$PrismaModel>
    _max?: NestedEnumTimeUnitNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type MasterScalarRelationFilter = {
    is?: MasterWhereInput
    isNot?: MasterWhereInput
  }

  export type OrderMasterCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    masterid?: SortOrder
  }

  export type OrderMasterMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    masterid?: SortOrder
  }

  export type OrderMasterMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    masterid?: SortOrder
  }

  export type BasketCountOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    professionId?: SortOrder
    toolId?: SortOrder
    levelId?: SortOrder
    quantity?: SortOrder
    timeUnit?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BasketAvgOrderByAggregateInput = {
    quantity?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
  }

  export type BasketMaxOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    professionId?: SortOrder
    toolId?: SortOrder
    levelId?: SortOrder
    quantity?: SortOrder
    timeUnit?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BasketMinOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    professionId?: SortOrder
    toolId?: SortOrder
    levelId?: SortOrder
    quantity?: SortOrder
    timeUnit?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BasketSumOrderByAggregateInput = {
    quantity?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentScalarRelationFilter = {
    is?: CommentWhereInput
    isNot?: CommentWhereInput
  }

  export type MasterRatingsCountOrderByAggregateInput = {
    id?: SortOrder
    star?: SortOrder
    masterId?: SortOrder
    commentId?: SortOrder
  }

  export type MasterRatingsAvgOrderByAggregateInput = {
    star?: SortOrder
  }

  export type MasterRatingsMaxOrderByAggregateInput = {
    id?: SortOrder
    star?: SortOrder
    masterId?: SortOrder
    commentId?: SortOrder
  }

  export type MasterRatingsMinOrderByAggregateInput = {
    id?: SortOrder
    star?: SortOrder
    masterId?: SortOrder
    commentId?: SortOrder
  }

  export type MasterRatingsSumOrderByAggregateInput = {
    star?: SortOrder
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type FAQCountOrderByAggregateInput = {
    id?: SortOrder
    questionUz?: SortOrder
    questionRu?: SortOrder
    questionEn?: SortOrder
    answerUz?: SortOrder
    answerRu?: SortOrder
    answerEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FAQMaxOrderByAggregateInput = {
    id?: SortOrder
    questionUz?: SortOrder
    questionRu?: SortOrder
    questionEn?: SortOrder
    answerUz?: SortOrder
    answerRu?: SortOrder
    answerEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FAQMinOrderByAggregateInput = {
    id?: SortOrder
    questionUz?: SortOrder
    questionRu?: SortOrder
    questionEn?: SortOrder
    answerUz?: SortOrder
    answerRu?: SortOrder
    answerEn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShowcaseCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    descriptionUz?: SortOrder
    descriptionRu?: SortOrder
    descriptionEn?: SortOrder
    image?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShowcaseMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    descriptionUz?: SortOrder
    descriptionRu?: SortOrder
    descriptionEn?: SortOrder
    image?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShowcaseMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    descriptionUz?: SortOrder
    descriptionRu?: SortOrder
    descriptionEn?: SortOrder
    image?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartnerCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    image?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartnerMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    image?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartnerMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRu?: SortOrder
    nameEn?: SortOrder
    image?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SiteMetadataCountOrderByAggregateInput = {
    id?: SortOrder
    aboutUz?: SortOrder
    aboutRu?: SortOrder
    aboutEn?: SortOrder
    privacyPolicyUz?: SortOrder
    privacyPolicyRu?: SortOrder
    privacyPolicyEn?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    socialMedia?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteMetadataMaxOrderByAggregateInput = {
    id?: SortOrder
    aboutUz?: SortOrder
    aboutRu?: SortOrder
    aboutEn?: SortOrder
    privacyPolicyUz?: SortOrder
    privacyPolicyRu?: SortOrder
    privacyPolicyEn?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteMetadataMinOrderByAggregateInput = {
    id?: SortOrder
    aboutUz?: SortOrder
    aboutRu?: SortOrder
    aboutEn?: SortOrder
    privacyPolicyUz?: SortOrder
    privacyPolicyRu?: SortOrder
    privacyPolicyEn?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type UserCreateNestedManyWithoutRegionInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateManyWithoutRegionNestedInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRegionInput | UserUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRegionInput | UserUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRegionInput | UserUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRegionInput | UserUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRegionInput | UserUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRegionInput | UserUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type RegionCreateNestedOneWithoutUsersInput = {
    create?: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RegionCreateOrConnectWithoutUsersInput
    connect?: RegionWhereUniqueInput
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type CompanyCreateNestedManyWithoutOwnerInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput> | CompanyCreateWithoutOwnerInput[] | CompanyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput | CompanyCreateOrConnectWithoutOwnerInput[]
    createMany?: CompanyCreateManyOwnerInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutOwnerInput = {
    create?: XOR<OrderCreateWithoutOwnerInput, OrderUncheckedCreateWithoutOwnerInput> | OrderCreateWithoutOwnerInput[] | OrderUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutOwnerInput | OrderCreateOrConnectWithoutOwnerInput[]
    createMany?: OrderCreateManyOwnerInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ContactCreateNestedManyWithoutUserInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput> | ContactCreateWithoutUserInput[] | ContactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput | ContactCreateOrConnectWithoutUserInput[]
    createMany?: ContactCreateManyUserInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type BasketCreateNestedManyWithoutOwnerInput = {
    create?: XOR<BasketCreateWithoutOwnerInput, BasketUncheckedCreateWithoutOwnerInput> | BasketCreateWithoutOwnerInput[] | BasketUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutOwnerInput | BasketCreateOrConnectWithoutOwnerInput[]
    createMany?: BasketCreateManyOwnerInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput> | CompanyCreateWithoutOwnerInput[] | CompanyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput | CompanyCreateOrConnectWithoutOwnerInput[]
    createMany?: CompanyCreateManyOwnerInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<OrderCreateWithoutOwnerInput, OrderUncheckedCreateWithoutOwnerInput> | OrderCreateWithoutOwnerInput[] | OrderUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutOwnerInput | OrderCreateOrConnectWithoutOwnerInput[]
    createMany?: OrderCreateManyOwnerInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ContactUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput> | ContactCreateWithoutUserInput[] | ContactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput | ContactCreateOrConnectWithoutUserInput[]
    createMany?: ContactCreateManyUserInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type BasketUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<BasketCreateWithoutOwnerInput, BasketUncheckedCreateWithoutOwnerInput> | BasketCreateWithoutOwnerInput[] | BasketUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutOwnerInput | BasketCreateOrConnectWithoutOwnerInput[]
    createMany?: BasketCreateManyOwnerInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type RegionUpdateOneWithoutUsersNestedInput = {
    create?: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RegionCreateOrConnectWithoutUsersInput
    upsert?: RegionUpsertWithoutUsersInput
    disconnect?: RegionWhereInput | boolean
    delete?: RegionWhereInput | boolean
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutUsersInput, RegionUpdateWithoutUsersInput>, RegionUncheckedUpdateWithoutUsersInput>
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type CompanyUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput> | CompanyCreateWithoutOwnerInput[] | CompanyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput | CompanyCreateOrConnectWithoutOwnerInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutOwnerInput | CompanyUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: CompanyCreateManyOwnerInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutOwnerInput | CompanyUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutOwnerInput | CompanyUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<OrderCreateWithoutOwnerInput, OrderUncheckedCreateWithoutOwnerInput> | OrderCreateWithoutOwnerInput[] | OrderUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutOwnerInput | OrderCreateOrConnectWithoutOwnerInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutOwnerInput | OrderUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: OrderCreateManyOwnerInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutOwnerInput | OrderUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutOwnerInput | OrderUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ContactUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput> | ContactCreateWithoutUserInput[] | ContactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput | ContactCreateOrConnectWithoutUserInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutUserInput | ContactUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContactCreateManyUserInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutUserInput | ContactUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutUserInput | ContactUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type BasketUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<BasketCreateWithoutOwnerInput, BasketUncheckedCreateWithoutOwnerInput> | BasketCreateWithoutOwnerInput[] | BasketUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutOwnerInput | BasketCreateOrConnectWithoutOwnerInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutOwnerInput | BasketUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: BasketCreateManyOwnerInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutOwnerInput | BasketUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutOwnerInput | BasketUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput> | CompanyCreateWithoutOwnerInput[] | CompanyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput | CompanyCreateOrConnectWithoutOwnerInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutOwnerInput | CompanyUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: CompanyCreateManyOwnerInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutOwnerInput | CompanyUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutOwnerInput | CompanyUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<OrderCreateWithoutOwnerInput, OrderUncheckedCreateWithoutOwnerInput> | OrderCreateWithoutOwnerInput[] | OrderUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutOwnerInput | OrderCreateOrConnectWithoutOwnerInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutOwnerInput | OrderUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: OrderCreateManyOwnerInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutOwnerInput | OrderUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutOwnerInput | OrderUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ContactUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput> | ContactCreateWithoutUserInput[] | ContactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput | ContactCreateOrConnectWithoutUserInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutUserInput | ContactUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContactCreateManyUserInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutUserInput | ContactUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutUserInput | ContactUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type BasketUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<BasketCreateWithoutOwnerInput, BasketUncheckedCreateWithoutOwnerInput> | BasketCreateWithoutOwnerInput[] | BasketUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutOwnerInput | BasketCreateOrConnectWithoutOwnerInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutOwnerInput | BasketUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: BasketCreateManyOwnerInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutOwnerInput | BasketUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutOwnerInput | BasketUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCompaniesInput = {
    create?: XOR<UserCreateWithoutCompaniesInput, UserUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompaniesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCompaniesNestedInput = {
    create?: XOR<UserCreateWithoutCompaniesInput, UserUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompaniesInput
    upsert?: UserUpsertWithoutCompaniesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCompaniesInput, UserUpdateWithoutCompaniesInput>, UserUncheckedUpdateWithoutCompaniesInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type ToolCreateNestedManyWithoutBrandInput = {
    create?: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput> | ToolCreateWithoutBrandInput[] | ToolUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutBrandInput | ToolCreateOrConnectWithoutBrandInput[]
    createMany?: ToolCreateManyBrandInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput> | ToolCreateWithoutBrandInput[] | ToolUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutBrandInput | ToolCreateOrConnectWithoutBrandInput[]
    createMany?: ToolCreateManyBrandInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput> | ToolCreateWithoutBrandInput[] | ToolUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutBrandInput | ToolCreateOrConnectWithoutBrandInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutBrandInput | ToolUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ToolCreateManyBrandInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutBrandInput | ToolUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutBrandInput | ToolUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type ToolUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput> | ToolCreateWithoutBrandInput[] | ToolUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutBrandInput | ToolCreateOrConnectWithoutBrandInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutBrandInput | ToolUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ToolCreateManyBrandInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutBrandInput | ToolUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutBrandInput | ToolUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type ToolCreateNestedManyWithoutSizeInput = {
    create?: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput> | ToolCreateWithoutSizeInput[] | ToolUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutSizeInput | ToolCreateOrConnectWithoutSizeInput[]
    createMany?: ToolCreateManySizeInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUncheckedCreateNestedManyWithoutSizeInput = {
    create?: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput> | ToolCreateWithoutSizeInput[] | ToolUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutSizeInput | ToolCreateOrConnectWithoutSizeInput[]
    createMany?: ToolCreateManySizeInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUpdateManyWithoutSizeNestedInput = {
    create?: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput> | ToolCreateWithoutSizeInput[] | ToolUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutSizeInput | ToolCreateOrConnectWithoutSizeInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutSizeInput | ToolUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: ToolCreateManySizeInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutSizeInput | ToolUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutSizeInput | ToolUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type ToolUncheckedUpdateManyWithoutSizeNestedInput = {
    create?: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput> | ToolCreateWithoutSizeInput[] | ToolUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutSizeInput | ToolCreateOrConnectWithoutSizeInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutSizeInput | ToolUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: ToolCreateManySizeInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutSizeInput | ToolUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutSizeInput | ToolUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type ToolCreateNestedManyWithoutPowerInput = {
    create?: XOR<ToolCreateWithoutPowerInput, ToolUncheckedCreateWithoutPowerInput> | ToolCreateWithoutPowerInput[] | ToolUncheckedCreateWithoutPowerInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutPowerInput | ToolCreateOrConnectWithoutPowerInput[]
    createMany?: ToolCreateManyPowerInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUncheckedCreateNestedManyWithoutPowerInput = {
    create?: XOR<ToolCreateWithoutPowerInput, ToolUncheckedCreateWithoutPowerInput> | ToolCreateWithoutPowerInput[] | ToolUncheckedCreateWithoutPowerInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutPowerInput | ToolCreateOrConnectWithoutPowerInput[]
    createMany?: ToolCreateManyPowerInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUpdateManyWithoutPowerNestedInput = {
    create?: XOR<ToolCreateWithoutPowerInput, ToolUncheckedCreateWithoutPowerInput> | ToolCreateWithoutPowerInput[] | ToolUncheckedCreateWithoutPowerInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutPowerInput | ToolCreateOrConnectWithoutPowerInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutPowerInput | ToolUpsertWithWhereUniqueWithoutPowerInput[]
    createMany?: ToolCreateManyPowerInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutPowerInput | ToolUpdateWithWhereUniqueWithoutPowerInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutPowerInput | ToolUpdateManyWithWhereWithoutPowerInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type ToolUncheckedUpdateManyWithoutPowerNestedInput = {
    create?: XOR<ToolCreateWithoutPowerInput, ToolUncheckedCreateWithoutPowerInput> | ToolCreateWithoutPowerInput[] | ToolUncheckedCreateWithoutPowerInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutPowerInput | ToolCreateOrConnectWithoutPowerInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutPowerInput | ToolUpsertWithWhereUniqueWithoutPowerInput[]
    createMany?: ToolCreateManyPowerInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutPowerInput | ToolUpdateWithWhereUniqueWithoutPowerInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutPowerInput | ToolUpdateManyWithWhereWithoutPowerInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type BrandCreateNestedOneWithoutToolsInput = {
    create?: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutToolsInput
    connect?: BrandWhereUniqueInput
  }

  export type PowerCreateNestedOneWithoutToolsInput = {
    create?: XOR<PowerCreateWithoutToolsInput, PowerUncheckedCreateWithoutToolsInput>
    connectOrCreate?: PowerCreateOrConnectWithoutToolsInput
    connect?: PowerWhereUniqueInput
  }

  export type SizeCreateNestedOneWithoutToolsInput = {
    create?: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
    connectOrCreate?: SizeCreateOrConnectWithoutToolsInput
    connect?: SizeWhereUniqueInput
  }

  export type ProfessionToolCreateNestedManyWithoutToolInput = {
    create?: XOR<ProfessionToolCreateWithoutToolInput, ProfessionToolUncheckedCreateWithoutToolInput> | ProfessionToolCreateWithoutToolInput[] | ProfessionToolUncheckedCreateWithoutToolInput[]
    connectOrCreate?: ProfessionToolCreateOrConnectWithoutToolInput | ProfessionToolCreateOrConnectWithoutToolInput[]
    createMany?: ProfessionToolCreateManyToolInputEnvelope
    connect?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
  }

  export type OrderProductCreateNestedManyWithoutToolInput = {
    create?: XOR<OrderProductCreateWithoutToolInput, OrderProductUncheckedCreateWithoutToolInput> | OrderProductCreateWithoutToolInput[] | OrderProductUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutToolInput | OrderProductCreateOrConnectWithoutToolInput[]
    createMany?: OrderProductCreateManyToolInputEnvelope
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
  }

  export type BasketCreateNestedManyWithoutToolInput = {
    create?: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput> | BasketCreateWithoutToolInput[] | BasketUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutToolInput | BasketCreateOrConnectWithoutToolInput[]
    createMany?: BasketCreateManyToolInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type ProfessionToolUncheckedCreateNestedManyWithoutToolInput = {
    create?: XOR<ProfessionToolCreateWithoutToolInput, ProfessionToolUncheckedCreateWithoutToolInput> | ProfessionToolCreateWithoutToolInput[] | ProfessionToolUncheckedCreateWithoutToolInput[]
    connectOrCreate?: ProfessionToolCreateOrConnectWithoutToolInput | ProfessionToolCreateOrConnectWithoutToolInput[]
    createMany?: ProfessionToolCreateManyToolInputEnvelope
    connect?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
  }

  export type OrderProductUncheckedCreateNestedManyWithoutToolInput = {
    create?: XOR<OrderProductCreateWithoutToolInput, OrderProductUncheckedCreateWithoutToolInput> | OrderProductCreateWithoutToolInput[] | OrderProductUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutToolInput | OrderProductCreateOrConnectWithoutToolInput[]
    createMany?: OrderProductCreateManyToolInputEnvelope
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
  }

  export type BasketUncheckedCreateNestedManyWithoutToolInput = {
    create?: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput> | BasketCreateWithoutToolInput[] | BasketUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutToolInput | BasketCreateOrConnectWithoutToolInput[]
    createMany?: BasketCreateManyToolInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BrandUpdateOneWithoutToolsNestedInput = {
    create?: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutToolsInput
    upsert?: BrandUpsertWithoutToolsInput
    disconnect?: BrandWhereInput | boolean
    delete?: BrandWhereInput | boolean
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutToolsInput, BrandUpdateWithoutToolsInput>, BrandUncheckedUpdateWithoutToolsInput>
  }

  export type PowerUpdateOneWithoutToolsNestedInput = {
    create?: XOR<PowerCreateWithoutToolsInput, PowerUncheckedCreateWithoutToolsInput>
    connectOrCreate?: PowerCreateOrConnectWithoutToolsInput
    upsert?: PowerUpsertWithoutToolsInput
    disconnect?: PowerWhereInput | boolean
    delete?: PowerWhereInput | boolean
    connect?: PowerWhereUniqueInput
    update?: XOR<XOR<PowerUpdateToOneWithWhereWithoutToolsInput, PowerUpdateWithoutToolsInput>, PowerUncheckedUpdateWithoutToolsInput>
  }

  export type SizeUpdateOneWithoutToolsNestedInput = {
    create?: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
    connectOrCreate?: SizeCreateOrConnectWithoutToolsInput
    upsert?: SizeUpsertWithoutToolsInput
    disconnect?: SizeWhereInput | boolean
    delete?: SizeWhereInput | boolean
    connect?: SizeWhereUniqueInput
    update?: XOR<XOR<SizeUpdateToOneWithWhereWithoutToolsInput, SizeUpdateWithoutToolsInput>, SizeUncheckedUpdateWithoutToolsInput>
  }

  export type ProfessionToolUpdateManyWithoutToolNestedInput = {
    create?: XOR<ProfessionToolCreateWithoutToolInput, ProfessionToolUncheckedCreateWithoutToolInput> | ProfessionToolCreateWithoutToolInput[] | ProfessionToolUncheckedCreateWithoutToolInput[]
    connectOrCreate?: ProfessionToolCreateOrConnectWithoutToolInput | ProfessionToolCreateOrConnectWithoutToolInput[]
    upsert?: ProfessionToolUpsertWithWhereUniqueWithoutToolInput | ProfessionToolUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: ProfessionToolCreateManyToolInputEnvelope
    set?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    disconnect?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    delete?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    connect?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    update?: ProfessionToolUpdateWithWhereUniqueWithoutToolInput | ProfessionToolUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: ProfessionToolUpdateManyWithWhereWithoutToolInput | ProfessionToolUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: ProfessionToolScalarWhereInput | ProfessionToolScalarWhereInput[]
  }

  export type OrderProductUpdateManyWithoutToolNestedInput = {
    create?: XOR<OrderProductCreateWithoutToolInput, OrderProductUncheckedCreateWithoutToolInput> | OrderProductCreateWithoutToolInput[] | OrderProductUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutToolInput | OrderProductCreateOrConnectWithoutToolInput[]
    upsert?: OrderProductUpsertWithWhereUniqueWithoutToolInput | OrderProductUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: OrderProductCreateManyToolInputEnvelope
    set?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    disconnect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    delete?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    update?: OrderProductUpdateWithWhereUniqueWithoutToolInput | OrderProductUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: OrderProductUpdateManyWithWhereWithoutToolInput | OrderProductUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[]
  }

  export type BasketUpdateManyWithoutToolNestedInput = {
    create?: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput> | BasketCreateWithoutToolInput[] | BasketUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutToolInput | BasketCreateOrConnectWithoutToolInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutToolInput | BasketUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: BasketCreateManyToolInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutToolInput | BasketUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutToolInput | BasketUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type ProfessionToolUncheckedUpdateManyWithoutToolNestedInput = {
    create?: XOR<ProfessionToolCreateWithoutToolInput, ProfessionToolUncheckedCreateWithoutToolInput> | ProfessionToolCreateWithoutToolInput[] | ProfessionToolUncheckedCreateWithoutToolInput[]
    connectOrCreate?: ProfessionToolCreateOrConnectWithoutToolInput | ProfessionToolCreateOrConnectWithoutToolInput[]
    upsert?: ProfessionToolUpsertWithWhereUniqueWithoutToolInput | ProfessionToolUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: ProfessionToolCreateManyToolInputEnvelope
    set?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    disconnect?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    delete?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    connect?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    update?: ProfessionToolUpdateWithWhereUniqueWithoutToolInput | ProfessionToolUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: ProfessionToolUpdateManyWithWhereWithoutToolInput | ProfessionToolUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: ProfessionToolScalarWhereInput | ProfessionToolScalarWhereInput[]
  }

  export type OrderProductUncheckedUpdateManyWithoutToolNestedInput = {
    create?: XOR<OrderProductCreateWithoutToolInput, OrderProductUncheckedCreateWithoutToolInput> | OrderProductCreateWithoutToolInput[] | OrderProductUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutToolInput | OrderProductCreateOrConnectWithoutToolInput[]
    upsert?: OrderProductUpsertWithWhereUniqueWithoutToolInput | OrderProductUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: OrderProductCreateManyToolInputEnvelope
    set?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    disconnect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    delete?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    update?: OrderProductUpdateWithWhereUniqueWithoutToolInput | OrderProductUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: OrderProductUpdateManyWithWhereWithoutToolInput | OrderProductUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[]
  }

  export type BasketUncheckedUpdateManyWithoutToolNestedInput = {
    create?: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput> | BasketCreateWithoutToolInput[] | BasketUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutToolInput | BasketCreateOrConnectWithoutToolInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutToolInput | BasketUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: BasketCreateManyToolInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutToolInput | BasketUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutToolInput | BasketUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type MasterProfessionCreateNestedManyWithoutMasterInput = {
    create?: XOR<MasterProfessionCreateWithoutMasterInput, MasterProfessionUncheckedCreateWithoutMasterInput> | MasterProfessionCreateWithoutMasterInput[] | MasterProfessionUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterProfessionCreateOrConnectWithoutMasterInput | MasterProfessionCreateOrConnectWithoutMasterInput[]
    createMany?: MasterProfessionCreateManyMasterInputEnvelope
    connect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
  }

  export type OrderMasterCreateNestedManyWithoutMasterInput = {
    create?: XOR<OrderMasterCreateWithoutMasterInput, OrderMasterUncheckedCreateWithoutMasterInput> | OrderMasterCreateWithoutMasterInput[] | OrderMasterUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: OrderMasterCreateOrConnectWithoutMasterInput | OrderMasterCreateOrConnectWithoutMasterInput[]
    createMany?: OrderMasterCreateManyMasterInputEnvelope
    connect?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
  }

  export type MasterRatingsCreateNestedManyWithoutMasterInput = {
    create?: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput> | MasterRatingsCreateWithoutMasterInput[] | MasterRatingsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutMasterInput | MasterRatingsCreateOrConnectWithoutMasterInput[]
    createMany?: MasterRatingsCreateManyMasterInputEnvelope
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
  }

  export type MasterProfessionUncheckedCreateNestedManyWithoutMasterInput = {
    create?: XOR<MasterProfessionCreateWithoutMasterInput, MasterProfessionUncheckedCreateWithoutMasterInput> | MasterProfessionCreateWithoutMasterInput[] | MasterProfessionUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterProfessionCreateOrConnectWithoutMasterInput | MasterProfessionCreateOrConnectWithoutMasterInput[]
    createMany?: MasterProfessionCreateManyMasterInputEnvelope
    connect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
  }

  export type OrderMasterUncheckedCreateNestedManyWithoutMasterInput = {
    create?: XOR<OrderMasterCreateWithoutMasterInput, OrderMasterUncheckedCreateWithoutMasterInput> | OrderMasterCreateWithoutMasterInput[] | OrderMasterUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: OrderMasterCreateOrConnectWithoutMasterInput | OrderMasterCreateOrConnectWithoutMasterInput[]
    createMany?: OrderMasterCreateManyMasterInputEnvelope
    connect?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
  }

  export type MasterRatingsUncheckedCreateNestedManyWithoutMasterInput = {
    create?: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput> | MasterRatingsCreateWithoutMasterInput[] | MasterRatingsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutMasterInput | MasterRatingsCreateOrConnectWithoutMasterInput[]
    createMany?: MasterRatingsCreateManyMasterInputEnvelope
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
  }

  export type MasterProfessionUpdateManyWithoutMasterNestedInput = {
    create?: XOR<MasterProfessionCreateWithoutMasterInput, MasterProfessionUncheckedCreateWithoutMasterInput> | MasterProfessionCreateWithoutMasterInput[] | MasterProfessionUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterProfessionCreateOrConnectWithoutMasterInput | MasterProfessionCreateOrConnectWithoutMasterInput[]
    upsert?: MasterProfessionUpsertWithWhereUniqueWithoutMasterInput | MasterProfessionUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: MasterProfessionCreateManyMasterInputEnvelope
    set?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    disconnect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    delete?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    connect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    update?: MasterProfessionUpdateWithWhereUniqueWithoutMasterInput | MasterProfessionUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: MasterProfessionUpdateManyWithWhereWithoutMasterInput | MasterProfessionUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: MasterProfessionScalarWhereInput | MasterProfessionScalarWhereInput[]
  }

  export type OrderMasterUpdateManyWithoutMasterNestedInput = {
    create?: XOR<OrderMasterCreateWithoutMasterInput, OrderMasterUncheckedCreateWithoutMasterInput> | OrderMasterCreateWithoutMasterInput[] | OrderMasterUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: OrderMasterCreateOrConnectWithoutMasterInput | OrderMasterCreateOrConnectWithoutMasterInput[]
    upsert?: OrderMasterUpsertWithWhereUniqueWithoutMasterInput | OrderMasterUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: OrderMasterCreateManyMasterInputEnvelope
    set?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    disconnect?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    delete?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    connect?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    update?: OrderMasterUpdateWithWhereUniqueWithoutMasterInput | OrderMasterUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: OrderMasterUpdateManyWithWhereWithoutMasterInput | OrderMasterUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: OrderMasterScalarWhereInput | OrderMasterScalarWhereInput[]
  }

  export type MasterRatingsUpdateManyWithoutMasterNestedInput = {
    create?: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput> | MasterRatingsCreateWithoutMasterInput[] | MasterRatingsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutMasterInput | MasterRatingsCreateOrConnectWithoutMasterInput[]
    upsert?: MasterRatingsUpsertWithWhereUniqueWithoutMasterInput | MasterRatingsUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: MasterRatingsCreateManyMasterInputEnvelope
    set?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    disconnect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    delete?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    update?: MasterRatingsUpdateWithWhereUniqueWithoutMasterInput | MasterRatingsUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: MasterRatingsUpdateManyWithWhereWithoutMasterInput | MasterRatingsUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
  }

  export type MasterProfessionUncheckedUpdateManyWithoutMasterNestedInput = {
    create?: XOR<MasterProfessionCreateWithoutMasterInput, MasterProfessionUncheckedCreateWithoutMasterInput> | MasterProfessionCreateWithoutMasterInput[] | MasterProfessionUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterProfessionCreateOrConnectWithoutMasterInput | MasterProfessionCreateOrConnectWithoutMasterInput[]
    upsert?: MasterProfessionUpsertWithWhereUniqueWithoutMasterInput | MasterProfessionUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: MasterProfessionCreateManyMasterInputEnvelope
    set?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    disconnect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    delete?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    connect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    update?: MasterProfessionUpdateWithWhereUniqueWithoutMasterInput | MasterProfessionUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: MasterProfessionUpdateManyWithWhereWithoutMasterInput | MasterProfessionUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: MasterProfessionScalarWhereInput | MasterProfessionScalarWhereInput[]
  }

  export type OrderMasterUncheckedUpdateManyWithoutMasterNestedInput = {
    create?: XOR<OrderMasterCreateWithoutMasterInput, OrderMasterUncheckedCreateWithoutMasterInput> | OrderMasterCreateWithoutMasterInput[] | OrderMasterUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: OrderMasterCreateOrConnectWithoutMasterInput | OrderMasterCreateOrConnectWithoutMasterInput[]
    upsert?: OrderMasterUpsertWithWhereUniqueWithoutMasterInput | OrderMasterUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: OrderMasterCreateManyMasterInputEnvelope
    set?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    disconnect?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    delete?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    connect?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    update?: OrderMasterUpdateWithWhereUniqueWithoutMasterInput | OrderMasterUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: OrderMasterUpdateManyWithWhereWithoutMasterInput | OrderMasterUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: OrderMasterScalarWhereInput | OrderMasterScalarWhereInput[]
  }

  export type MasterRatingsUncheckedUpdateManyWithoutMasterNestedInput = {
    create?: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput> | MasterRatingsCreateWithoutMasterInput[] | MasterRatingsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutMasterInput | MasterRatingsCreateOrConnectWithoutMasterInput[]
    upsert?: MasterRatingsUpsertWithWhereUniqueWithoutMasterInput | MasterRatingsUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: MasterRatingsCreateManyMasterInputEnvelope
    set?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    disconnect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    delete?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    update?: MasterRatingsUpdateWithWhereUniqueWithoutMasterInput | MasterRatingsUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: MasterRatingsUpdateManyWithWhereWithoutMasterInput | MasterRatingsUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
  }

  export type ProfessionCreateNestedOneWithoutMasterProfessionsInput = {
    create?: XOR<ProfessionCreateWithoutMasterProfessionsInput, ProfessionUncheckedCreateWithoutMasterProfessionsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutMasterProfessionsInput
    connect?: ProfessionWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutMasterProfessionsInput = {
    create?: XOR<LevelCreateWithoutMasterProfessionsInput, LevelUncheckedCreateWithoutMasterProfessionsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutMasterProfessionsInput
    connect?: LevelWhereUniqueInput
  }

  export type MasterCreateNestedOneWithoutMasterProfessionsInput = {
    create?: XOR<MasterCreateWithoutMasterProfessionsInput, MasterUncheckedCreateWithoutMasterProfessionsInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterProfessionsInput
    connect?: MasterWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProfessionUpdateOneWithoutMasterProfessionsNestedInput = {
    create?: XOR<ProfessionCreateWithoutMasterProfessionsInput, ProfessionUncheckedCreateWithoutMasterProfessionsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutMasterProfessionsInput
    upsert?: ProfessionUpsertWithoutMasterProfessionsInput
    disconnect?: ProfessionWhereInput | boolean
    delete?: ProfessionWhereInput | boolean
    connect?: ProfessionWhereUniqueInput
    update?: XOR<XOR<ProfessionUpdateToOneWithWhereWithoutMasterProfessionsInput, ProfessionUpdateWithoutMasterProfessionsInput>, ProfessionUncheckedUpdateWithoutMasterProfessionsInput>
  }

  export type LevelUpdateOneWithoutMasterProfessionsNestedInput = {
    create?: XOR<LevelCreateWithoutMasterProfessionsInput, LevelUncheckedCreateWithoutMasterProfessionsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutMasterProfessionsInput
    upsert?: LevelUpsertWithoutMasterProfessionsInput
    disconnect?: LevelWhereInput | boolean
    delete?: LevelWhereInput | boolean
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutMasterProfessionsInput, LevelUpdateWithoutMasterProfessionsInput>, LevelUncheckedUpdateWithoutMasterProfessionsInput>
  }

  export type MasterUpdateOneWithoutMasterProfessionsNestedInput = {
    create?: XOR<MasterCreateWithoutMasterProfessionsInput, MasterUncheckedCreateWithoutMasterProfessionsInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterProfessionsInput
    upsert?: MasterUpsertWithoutMasterProfessionsInput
    disconnect?: MasterWhereInput | boolean
    delete?: MasterWhereInput | boolean
    connect?: MasterWhereUniqueInput
    update?: XOR<XOR<MasterUpdateToOneWithWhereWithoutMasterProfessionsInput, MasterUpdateWithoutMasterProfessionsInput>, MasterUncheckedUpdateWithoutMasterProfessionsInput>
  }

  export type MasterProfessionCreateNestedManyWithoutLevelInput = {
    create?: XOR<MasterProfessionCreateWithoutLevelInput, MasterProfessionUncheckedCreateWithoutLevelInput> | MasterProfessionCreateWithoutLevelInput[] | MasterProfessionUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterProfessionCreateOrConnectWithoutLevelInput | MasterProfessionCreateOrConnectWithoutLevelInput[]
    createMany?: MasterProfessionCreateManyLevelInputEnvelope
    connect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
  }

  export type ProfessionLevelCreateNestedManyWithoutLevelInput = {
    create?: XOR<ProfessionLevelCreateWithoutLevelInput, ProfessionLevelUncheckedCreateWithoutLevelInput> | ProfessionLevelCreateWithoutLevelInput[] | ProfessionLevelUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: ProfessionLevelCreateOrConnectWithoutLevelInput | ProfessionLevelCreateOrConnectWithoutLevelInput[]
    createMany?: ProfessionLevelCreateManyLevelInputEnvelope
    connect?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
  }

  export type OrderProductCreateNestedManyWithoutLevelInput = {
    create?: XOR<OrderProductCreateWithoutLevelInput, OrderProductUncheckedCreateWithoutLevelInput> | OrderProductCreateWithoutLevelInput[] | OrderProductUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutLevelInput | OrderProductCreateOrConnectWithoutLevelInput[]
    createMany?: OrderProductCreateManyLevelInputEnvelope
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
  }

  export type BasketCreateNestedManyWithoutLevelInput = {
    create?: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput> | BasketCreateWithoutLevelInput[] | BasketUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutLevelInput | BasketCreateOrConnectWithoutLevelInput[]
    createMany?: BasketCreateManyLevelInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type MasterProfessionUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<MasterProfessionCreateWithoutLevelInput, MasterProfessionUncheckedCreateWithoutLevelInput> | MasterProfessionCreateWithoutLevelInput[] | MasterProfessionUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterProfessionCreateOrConnectWithoutLevelInput | MasterProfessionCreateOrConnectWithoutLevelInput[]
    createMany?: MasterProfessionCreateManyLevelInputEnvelope
    connect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
  }

  export type ProfessionLevelUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<ProfessionLevelCreateWithoutLevelInput, ProfessionLevelUncheckedCreateWithoutLevelInput> | ProfessionLevelCreateWithoutLevelInput[] | ProfessionLevelUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: ProfessionLevelCreateOrConnectWithoutLevelInput | ProfessionLevelCreateOrConnectWithoutLevelInput[]
    createMany?: ProfessionLevelCreateManyLevelInputEnvelope
    connect?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
  }

  export type OrderProductUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<OrderProductCreateWithoutLevelInput, OrderProductUncheckedCreateWithoutLevelInput> | OrderProductCreateWithoutLevelInput[] | OrderProductUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutLevelInput | OrderProductCreateOrConnectWithoutLevelInput[]
    createMany?: OrderProductCreateManyLevelInputEnvelope
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
  }

  export type BasketUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput> | BasketCreateWithoutLevelInput[] | BasketUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutLevelInput | BasketCreateOrConnectWithoutLevelInput[]
    createMany?: BasketCreateManyLevelInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type MasterProfessionUpdateManyWithoutLevelNestedInput = {
    create?: XOR<MasterProfessionCreateWithoutLevelInput, MasterProfessionUncheckedCreateWithoutLevelInput> | MasterProfessionCreateWithoutLevelInput[] | MasterProfessionUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterProfessionCreateOrConnectWithoutLevelInput | MasterProfessionCreateOrConnectWithoutLevelInput[]
    upsert?: MasterProfessionUpsertWithWhereUniqueWithoutLevelInput | MasterProfessionUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: MasterProfessionCreateManyLevelInputEnvelope
    set?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    disconnect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    delete?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    connect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    update?: MasterProfessionUpdateWithWhereUniqueWithoutLevelInput | MasterProfessionUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: MasterProfessionUpdateManyWithWhereWithoutLevelInput | MasterProfessionUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: MasterProfessionScalarWhereInput | MasterProfessionScalarWhereInput[]
  }

  export type ProfessionLevelUpdateManyWithoutLevelNestedInput = {
    create?: XOR<ProfessionLevelCreateWithoutLevelInput, ProfessionLevelUncheckedCreateWithoutLevelInput> | ProfessionLevelCreateWithoutLevelInput[] | ProfessionLevelUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: ProfessionLevelCreateOrConnectWithoutLevelInput | ProfessionLevelCreateOrConnectWithoutLevelInput[]
    upsert?: ProfessionLevelUpsertWithWhereUniqueWithoutLevelInput | ProfessionLevelUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: ProfessionLevelCreateManyLevelInputEnvelope
    set?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    disconnect?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    delete?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    connect?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    update?: ProfessionLevelUpdateWithWhereUniqueWithoutLevelInput | ProfessionLevelUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: ProfessionLevelUpdateManyWithWhereWithoutLevelInput | ProfessionLevelUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: ProfessionLevelScalarWhereInput | ProfessionLevelScalarWhereInput[]
  }

  export type OrderProductUpdateManyWithoutLevelNestedInput = {
    create?: XOR<OrderProductCreateWithoutLevelInput, OrderProductUncheckedCreateWithoutLevelInput> | OrderProductCreateWithoutLevelInput[] | OrderProductUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutLevelInput | OrderProductCreateOrConnectWithoutLevelInput[]
    upsert?: OrderProductUpsertWithWhereUniqueWithoutLevelInput | OrderProductUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: OrderProductCreateManyLevelInputEnvelope
    set?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    disconnect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    delete?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    update?: OrderProductUpdateWithWhereUniqueWithoutLevelInput | OrderProductUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: OrderProductUpdateManyWithWhereWithoutLevelInput | OrderProductUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[]
  }

  export type BasketUpdateManyWithoutLevelNestedInput = {
    create?: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput> | BasketCreateWithoutLevelInput[] | BasketUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutLevelInput | BasketCreateOrConnectWithoutLevelInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutLevelInput | BasketUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: BasketCreateManyLevelInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutLevelInput | BasketUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutLevelInput | BasketUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type MasterProfessionUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<MasterProfessionCreateWithoutLevelInput, MasterProfessionUncheckedCreateWithoutLevelInput> | MasterProfessionCreateWithoutLevelInput[] | MasterProfessionUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterProfessionCreateOrConnectWithoutLevelInput | MasterProfessionCreateOrConnectWithoutLevelInput[]
    upsert?: MasterProfessionUpsertWithWhereUniqueWithoutLevelInput | MasterProfessionUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: MasterProfessionCreateManyLevelInputEnvelope
    set?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    disconnect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    delete?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    connect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    update?: MasterProfessionUpdateWithWhereUniqueWithoutLevelInput | MasterProfessionUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: MasterProfessionUpdateManyWithWhereWithoutLevelInput | MasterProfessionUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: MasterProfessionScalarWhereInput | MasterProfessionScalarWhereInput[]
  }

  export type ProfessionLevelUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<ProfessionLevelCreateWithoutLevelInput, ProfessionLevelUncheckedCreateWithoutLevelInput> | ProfessionLevelCreateWithoutLevelInput[] | ProfessionLevelUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: ProfessionLevelCreateOrConnectWithoutLevelInput | ProfessionLevelCreateOrConnectWithoutLevelInput[]
    upsert?: ProfessionLevelUpsertWithWhereUniqueWithoutLevelInput | ProfessionLevelUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: ProfessionLevelCreateManyLevelInputEnvelope
    set?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    disconnect?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    delete?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    connect?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    update?: ProfessionLevelUpdateWithWhereUniqueWithoutLevelInput | ProfessionLevelUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: ProfessionLevelUpdateManyWithWhereWithoutLevelInput | ProfessionLevelUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: ProfessionLevelScalarWhereInput | ProfessionLevelScalarWhereInput[]
  }

  export type OrderProductUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<OrderProductCreateWithoutLevelInput, OrderProductUncheckedCreateWithoutLevelInput> | OrderProductCreateWithoutLevelInput[] | OrderProductUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutLevelInput | OrderProductCreateOrConnectWithoutLevelInput[]
    upsert?: OrderProductUpsertWithWhereUniqueWithoutLevelInput | OrderProductUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: OrderProductCreateManyLevelInputEnvelope
    set?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    disconnect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    delete?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    update?: OrderProductUpdateWithWhereUniqueWithoutLevelInput | OrderProductUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: OrderProductUpdateManyWithWhereWithoutLevelInput | OrderProductUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[]
  }

  export type BasketUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput> | BasketCreateWithoutLevelInput[] | BasketUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutLevelInput | BasketCreateOrConnectWithoutLevelInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutLevelInput | BasketUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: BasketCreateManyLevelInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutLevelInput | BasketUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutLevelInput | BasketUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type MasterProfessionCreateNestedManyWithoutProfessionInput = {
    create?: XOR<MasterProfessionCreateWithoutProfessionInput, MasterProfessionUncheckedCreateWithoutProfessionInput> | MasterProfessionCreateWithoutProfessionInput[] | MasterProfessionUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: MasterProfessionCreateOrConnectWithoutProfessionInput | MasterProfessionCreateOrConnectWithoutProfessionInput[]
    createMany?: MasterProfessionCreateManyProfessionInputEnvelope
    connect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
  }

  export type ProfessionLevelCreateNestedManyWithoutProfessionInput = {
    create?: XOR<ProfessionLevelCreateWithoutProfessionInput, ProfessionLevelUncheckedCreateWithoutProfessionInput> | ProfessionLevelCreateWithoutProfessionInput[] | ProfessionLevelUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: ProfessionLevelCreateOrConnectWithoutProfessionInput | ProfessionLevelCreateOrConnectWithoutProfessionInput[]
    createMany?: ProfessionLevelCreateManyProfessionInputEnvelope
    connect?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
  }

  export type ProfessionToolCreateNestedManyWithoutProfessionInput = {
    create?: XOR<ProfessionToolCreateWithoutProfessionInput, ProfessionToolUncheckedCreateWithoutProfessionInput> | ProfessionToolCreateWithoutProfessionInput[] | ProfessionToolUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: ProfessionToolCreateOrConnectWithoutProfessionInput | ProfessionToolCreateOrConnectWithoutProfessionInput[]
    createMany?: ProfessionToolCreateManyProfessionInputEnvelope
    connect?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
  }

  export type OrderProductCreateNestedManyWithoutProfessionInput = {
    create?: XOR<OrderProductCreateWithoutProfessionInput, OrderProductUncheckedCreateWithoutProfessionInput> | OrderProductCreateWithoutProfessionInput[] | OrderProductUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutProfessionInput | OrderProductCreateOrConnectWithoutProfessionInput[]
    createMany?: OrderProductCreateManyProfessionInputEnvelope
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
  }

  export type BasketCreateNestedManyWithoutProfessionInput = {
    create?: XOR<BasketCreateWithoutProfessionInput, BasketUncheckedCreateWithoutProfessionInput> | BasketCreateWithoutProfessionInput[] | BasketUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutProfessionInput | BasketCreateOrConnectWithoutProfessionInput[]
    createMany?: BasketCreateManyProfessionInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type MasterProfessionUncheckedCreateNestedManyWithoutProfessionInput = {
    create?: XOR<MasterProfessionCreateWithoutProfessionInput, MasterProfessionUncheckedCreateWithoutProfessionInput> | MasterProfessionCreateWithoutProfessionInput[] | MasterProfessionUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: MasterProfessionCreateOrConnectWithoutProfessionInput | MasterProfessionCreateOrConnectWithoutProfessionInput[]
    createMany?: MasterProfessionCreateManyProfessionInputEnvelope
    connect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
  }

  export type ProfessionLevelUncheckedCreateNestedManyWithoutProfessionInput = {
    create?: XOR<ProfessionLevelCreateWithoutProfessionInput, ProfessionLevelUncheckedCreateWithoutProfessionInput> | ProfessionLevelCreateWithoutProfessionInput[] | ProfessionLevelUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: ProfessionLevelCreateOrConnectWithoutProfessionInput | ProfessionLevelCreateOrConnectWithoutProfessionInput[]
    createMany?: ProfessionLevelCreateManyProfessionInputEnvelope
    connect?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
  }

  export type ProfessionToolUncheckedCreateNestedManyWithoutProfessionInput = {
    create?: XOR<ProfessionToolCreateWithoutProfessionInput, ProfessionToolUncheckedCreateWithoutProfessionInput> | ProfessionToolCreateWithoutProfessionInput[] | ProfessionToolUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: ProfessionToolCreateOrConnectWithoutProfessionInput | ProfessionToolCreateOrConnectWithoutProfessionInput[]
    createMany?: ProfessionToolCreateManyProfessionInputEnvelope
    connect?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
  }

  export type OrderProductUncheckedCreateNestedManyWithoutProfessionInput = {
    create?: XOR<OrderProductCreateWithoutProfessionInput, OrderProductUncheckedCreateWithoutProfessionInput> | OrderProductCreateWithoutProfessionInput[] | OrderProductUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutProfessionInput | OrderProductCreateOrConnectWithoutProfessionInput[]
    createMany?: OrderProductCreateManyProfessionInputEnvelope
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
  }

  export type BasketUncheckedCreateNestedManyWithoutProfessionInput = {
    create?: XOR<BasketCreateWithoutProfessionInput, BasketUncheckedCreateWithoutProfessionInput> | BasketCreateWithoutProfessionInput[] | BasketUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutProfessionInput | BasketCreateOrConnectWithoutProfessionInput[]
    createMany?: BasketCreateManyProfessionInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type MasterProfessionUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<MasterProfessionCreateWithoutProfessionInput, MasterProfessionUncheckedCreateWithoutProfessionInput> | MasterProfessionCreateWithoutProfessionInput[] | MasterProfessionUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: MasterProfessionCreateOrConnectWithoutProfessionInput | MasterProfessionCreateOrConnectWithoutProfessionInput[]
    upsert?: MasterProfessionUpsertWithWhereUniqueWithoutProfessionInput | MasterProfessionUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: MasterProfessionCreateManyProfessionInputEnvelope
    set?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    disconnect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    delete?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    connect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    update?: MasterProfessionUpdateWithWhereUniqueWithoutProfessionInput | MasterProfessionUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: MasterProfessionUpdateManyWithWhereWithoutProfessionInput | MasterProfessionUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: MasterProfessionScalarWhereInput | MasterProfessionScalarWhereInput[]
  }

  export type ProfessionLevelUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<ProfessionLevelCreateWithoutProfessionInput, ProfessionLevelUncheckedCreateWithoutProfessionInput> | ProfessionLevelCreateWithoutProfessionInput[] | ProfessionLevelUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: ProfessionLevelCreateOrConnectWithoutProfessionInput | ProfessionLevelCreateOrConnectWithoutProfessionInput[]
    upsert?: ProfessionLevelUpsertWithWhereUniqueWithoutProfessionInput | ProfessionLevelUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: ProfessionLevelCreateManyProfessionInputEnvelope
    set?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    disconnect?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    delete?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    connect?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    update?: ProfessionLevelUpdateWithWhereUniqueWithoutProfessionInput | ProfessionLevelUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: ProfessionLevelUpdateManyWithWhereWithoutProfessionInput | ProfessionLevelUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: ProfessionLevelScalarWhereInput | ProfessionLevelScalarWhereInput[]
  }

  export type ProfessionToolUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<ProfessionToolCreateWithoutProfessionInput, ProfessionToolUncheckedCreateWithoutProfessionInput> | ProfessionToolCreateWithoutProfessionInput[] | ProfessionToolUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: ProfessionToolCreateOrConnectWithoutProfessionInput | ProfessionToolCreateOrConnectWithoutProfessionInput[]
    upsert?: ProfessionToolUpsertWithWhereUniqueWithoutProfessionInput | ProfessionToolUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: ProfessionToolCreateManyProfessionInputEnvelope
    set?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    disconnect?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    delete?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    connect?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    update?: ProfessionToolUpdateWithWhereUniqueWithoutProfessionInput | ProfessionToolUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: ProfessionToolUpdateManyWithWhereWithoutProfessionInput | ProfessionToolUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: ProfessionToolScalarWhereInput | ProfessionToolScalarWhereInput[]
  }

  export type OrderProductUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<OrderProductCreateWithoutProfessionInput, OrderProductUncheckedCreateWithoutProfessionInput> | OrderProductCreateWithoutProfessionInput[] | OrderProductUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutProfessionInput | OrderProductCreateOrConnectWithoutProfessionInput[]
    upsert?: OrderProductUpsertWithWhereUniqueWithoutProfessionInput | OrderProductUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: OrderProductCreateManyProfessionInputEnvelope
    set?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    disconnect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    delete?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    update?: OrderProductUpdateWithWhereUniqueWithoutProfessionInput | OrderProductUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: OrderProductUpdateManyWithWhereWithoutProfessionInput | OrderProductUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[]
  }

  export type BasketUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<BasketCreateWithoutProfessionInput, BasketUncheckedCreateWithoutProfessionInput> | BasketCreateWithoutProfessionInput[] | BasketUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutProfessionInput | BasketCreateOrConnectWithoutProfessionInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutProfessionInput | BasketUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: BasketCreateManyProfessionInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutProfessionInput | BasketUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutProfessionInput | BasketUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type MasterProfessionUncheckedUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<MasterProfessionCreateWithoutProfessionInput, MasterProfessionUncheckedCreateWithoutProfessionInput> | MasterProfessionCreateWithoutProfessionInput[] | MasterProfessionUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: MasterProfessionCreateOrConnectWithoutProfessionInput | MasterProfessionCreateOrConnectWithoutProfessionInput[]
    upsert?: MasterProfessionUpsertWithWhereUniqueWithoutProfessionInput | MasterProfessionUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: MasterProfessionCreateManyProfessionInputEnvelope
    set?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    disconnect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    delete?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    connect?: MasterProfessionWhereUniqueInput | MasterProfessionWhereUniqueInput[]
    update?: MasterProfessionUpdateWithWhereUniqueWithoutProfessionInput | MasterProfessionUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: MasterProfessionUpdateManyWithWhereWithoutProfessionInput | MasterProfessionUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: MasterProfessionScalarWhereInput | MasterProfessionScalarWhereInput[]
  }

  export type ProfessionLevelUncheckedUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<ProfessionLevelCreateWithoutProfessionInput, ProfessionLevelUncheckedCreateWithoutProfessionInput> | ProfessionLevelCreateWithoutProfessionInput[] | ProfessionLevelUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: ProfessionLevelCreateOrConnectWithoutProfessionInput | ProfessionLevelCreateOrConnectWithoutProfessionInput[]
    upsert?: ProfessionLevelUpsertWithWhereUniqueWithoutProfessionInput | ProfessionLevelUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: ProfessionLevelCreateManyProfessionInputEnvelope
    set?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    disconnect?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    delete?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    connect?: ProfessionLevelWhereUniqueInput | ProfessionLevelWhereUniqueInput[]
    update?: ProfessionLevelUpdateWithWhereUniqueWithoutProfessionInput | ProfessionLevelUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: ProfessionLevelUpdateManyWithWhereWithoutProfessionInput | ProfessionLevelUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: ProfessionLevelScalarWhereInput | ProfessionLevelScalarWhereInput[]
  }

  export type ProfessionToolUncheckedUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<ProfessionToolCreateWithoutProfessionInput, ProfessionToolUncheckedCreateWithoutProfessionInput> | ProfessionToolCreateWithoutProfessionInput[] | ProfessionToolUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: ProfessionToolCreateOrConnectWithoutProfessionInput | ProfessionToolCreateOrConnectWithoutProfessionInput[]
    upsert?: ProfessionToolUpsertWithWhereUniqueWithoutProfessionInput | ProfessionToolUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: ProfessionToolCreateManyProfessionInputEnvelope
    set?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    disconnect?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    delete?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    connect?: ProfessionToolWhereUniqueInput | ProfessionToolWhereUniqueInput[]
    update?: ProfessionToolUpdateWithWhereUniqueWithoutProfessionInput | ProfessionToolUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: ProfessionToolUpdateManyWithWhereWithoutProfessionInput | ProfessionToolUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: ProfessionToolScalarWhereInput | ProfessionToolScalarWhereInput[]
  }

  export type OrderProductUncheckedUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<OrderProductCreateWithoutProfessionInput, OrderProductUncheckedCreateWithoutProfessionInput> | OrderProductCreateWithoutProfessionInput[] | OrderProductUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutProfessionInput | OrderProductCreateOrConnectWithoutProfessionInput[]
    upsert?: OrderProductUpsertWithWhereUniqueWithoutProfessionInput | OrderProductUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: OrderProductCreateManyProfessionInputEnvelope
    set?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    disconnect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    delete?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    update?: OrderProductUpdateWithWhereUniqueWithoutProfessionInput | OrderProductUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: OrderProductUpdateManyWithWhereWithoutProfessionInput | OrderProductUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[]
  }

  export type BasketUncheckedUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<BasketCreateWithoutProfessionInput, BasketUncheckedCreateWithoutProfessionInput> | BasketCreateWithoutProfessionInput[] | BasketUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutProfessionInput | BasketCreateOrConnectWithoutProfessionInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutProfessionInput | BasketUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: BasketCreateManyProfessionInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutProfessionInput | BasketUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutProfessionInput | BasketUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type ProfessionCreateNestedOneWithoutProfessionLevelsInput = {
    create?: XOR<ProfessionCreateWithoutProfessionLevelsInput, ProfessionUncheckedCreateWithoutProfessionLevelsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutProfessionLevelsInput
    connect?: ProfessionWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutProfessionLevelsInput = {
    create?: XOR<LevelCreateWithoutProfessionLevelsInput, LevelUncheckedCreateWithoutProfessionLevelsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutProfessionLevelsInput
    connect?: LevelWhereUniqueInput
  }

  export type ProfessionUpdateOneRequiredWithoutProfessionLevelsNestedInput = {
    create?: XOR<ProfessionCreateWithoutProfessionLevelsInput, ProfessionUncheckedCreateWithoutProfessionLevelsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutProfessionLevelsInput
    upsert?: ProfessionUpsertWithoutProfessionLevelsInput
    connect?: ProfessionWhereUniqueInput
    update?: XOR<XOR<ProfessionUpdateToOneWithWhereWithoutProfessionLevelsInput, ProfessionUpdateWithoutProfessionLevelsInput>, ProfessionUncheckedUpdateWithoutProfessionLevelsInput>
  }

  export type LevelUpdateOneRequiredWithoutProfessionLevelsNestedInput = {
    create?: XOR<LevelCreateWithoutProfessionLevelsInput, LevelUncheckedCreateWithoutProfessionLevelsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutProfessionLevelsInput
    upsert?: LevelUpsertWithoutProfessionLevelsInput
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutProfessionLevelsInput, LevelUpdateWithoutProfessionLevelsInput>, LevelUncheckedUpdateWithoutProfessionLevelsInput>
  }

  export type ProfessionCreateNestedOneWithoutProfessionToolsInput = {
    create?: XOR<ProfessionCreateWithoutProfessionToolsInput, ProfessionUncheckedCreateWithoutProfessionToolsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutProfessionToolsInput
    connect?: ProfessionWhereUniqueInput
  }

  export type ToolCreateNestedOneWithoutProfessionToolsInput = {
    create?: XOR<ToolCreateWithoutProfessionToolsInput, ToolUncheckedCreateWithoutProfessionToolsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutProfessionToolsInput
    connect?: ToolWhereUniqueInput
  }

  export type ProfessionUpdateOneRequiredWithoutProfessionToolsNestedInput = {
    create?: XOR<ProfessionCreateWithoutProfessionToolsInput, ProfessionUncheckedCreateWithoutProfessionToolsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutProfessionToolsInput
    upsert?: ProfessionUpsertWithoutProfessionToolsInput
    connect?: ProfessionWhereUniqueInput
    update?: XOR<XOR<ProfessionUpdateToOneWithWhereWithoutProfessionToolsInput, ProfessionUpdateWithoutProfessionToolsInput>, ProfessionUncheckedUpdateWithoutProfessionToolsInput>
  }

  export type ToolUpdateOneRequiredWithoutProfessionToolsNestedInput = {
    create?: XOR<ToolCreateWithoutProfessionToolsInput, ToolUncheckedCreateWithoutProfessionToolsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutProfessionToolsInput
    upsert?: ToolUpsertWithoutProfessionToolsInput
    connect?: ToolWhereUniqueInput
    update?: XOR<XOR<ToolUpdateToOneWithWhereWithoutProfessionToolsInput, ToolUpdateWithoutProfessionToolsInput>, ToolUncheckedUpdateWithoutProfessionToolsInput>
  }

  export type OrderProductCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderProductCreateWithoutOrderInput, OrderProductUncheckedCreateWithoutOrderInput> | OrderProductCreateWithoutOrderInput[] | OrderProductUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutOrderInput | OrderProductCreateOrConnectWithoutOrderInput[]
    createMany?: OrderProductCreateManyOrderInputEnvelope
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutOrderInput = {
    create?: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput> | CommentCreateWithoutOrderInput[] | CommentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrderInput | CommentCreateOrConnectWithoutOrderInput[]
    createMany?: CommentCreateManyOrderInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type OrderMasterCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderMasterCreateWithoutOrderInput, OrderMasterUncheckedCreateWithoutOrderInput> | OrderMasterCreateWithoutOrderInput[] | OrderMasterUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderMasterCreateOrConnectWithoutOrderInput | OrderMasterCreateOrConnectWithoutOrderInput[]
    createMany?: OrderMasterCreateManyOrderInputEnvelope
    connect?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutOrderInput = {
    create?: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrderInput
    connect?: UserWhereUniqueInput
  }

  export type OrderProductUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderProductCreateWithoutOrderInput, OrderProductUncheckedCreateWithoutOrderInput> | OrderProductCreateWithoutOrderInput[] | OrderProductUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutOrderInput | OrderProductCreateOrConnectWithoutOrderInput[]
    createMany?: OrderProductCreateManyOrderInputEnvelope
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput> | CommentCreateWithoutOrderInput[] | CommentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrderInput | CommentCreateOrConnectWithoutOrderInput[]
    createMany?: CommentCreateManyOrderInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type OrderMasterUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderMasterCreateWithoutOrderInput, OrderMasterUncheckedCreateWithoutOrderInput> | OrderMasterCreateWithoutOrderInput[] | OrderMasterUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderMasterCreateOrConnectWithoutOrderInput | OrderMasterCreateOrConnectWithoutOrderInput[]
    createMany?: OrderMasterCreateManyOrderInputEnvelope
    connect?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentType
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type OrderProductUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderProductCreateWithoutOrderInput, OrderProductUncheckedCreateWithoutOrderInput> | OrderProductCreateWithoutOrderInput[] | OrderProductUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutOrderInput | OrderProductCreateOrConnectWithoutOrderInput[]
    upsert?: OrderProductUpsertWithWhereUniqueWithoutOrderInput | OrderProductUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderProductCreateManyOrderInputEnvelope
    set?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    disconnect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    delete?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    update?: OrderProductUpdateWithWhereUniqueWithoutOrderInput | OrderProductUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderProductUpdateManyWithWhereWithoutOrderInput | OrderProductUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutOrderNestedInput = {
    create?: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput> | CommentCreateWithoutOrderInput[] | CommentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrderInput | CommentCreateOrConnectWithoutOrderInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutOrderInput | CommentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: CommentCreateManyOrderInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutOrderInput | CommentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutOrderInput | CommentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type OrderMasterUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderMasterCreateWithoutOrderInput, OrderMasterUncheckedCreateWithoutOrderInput> | OrderMasterCreateWithoutOrderInput[] | OrderMasterUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderMasterCreateOrConnectWithoutOrderInput | OrderMasterCreateOrConnectWithoutOrderInput[]
    upsert?: OrderMasterUpsertWithWhereUniqueWithoutOrderInput | OrderMasterUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderMasterCreateManyOrderInputEnvelope
    set?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    disconnect?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    delete?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    connect?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    update?: OrderMasterUpdateWithWhereUniqueWithoutOrderInput | OrderMasterUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderMasterUpdateManyWithWhereWithoutOrderInput | OrderMasterUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderMasterScalarWhereInput | OrderMasterScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutOrderNestedInput = {
    create?: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrderInput
    upsert?: UserUpsertWithoutOrderInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrderInput, UserUpdateWithoutOrderInput>, UserUncheckedUpdateWithoutOrderInput>
  }

  export type OrderProductUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderProductCreateWithoutOrderInput, OrderProductUncheckedCreateWithoutOrderInput> | OrderProductCreateWithoutOrderInput[] | OrderProductUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderProductCreateOrConnectWithoutOrderInput | OrderProductCreateOrConnectWithoutOrderInput[]
    upsert?: OrderProductUpsertWithWhereUniqueWithoutOrderInput | OrderProductUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderProductCreateManyOrderInputEnvelope
    set?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    disconnect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    delete?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[]
    update?: OrderProductUpdateWithWhereUniqueWithoutOrderInput | OrderProductUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderProductUpdateManyWithWhereWithoutOrderInput | OrderProductUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput> | CommentCreateWithoutOrderInput[] | CommentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrderInput | CommentCreateOrConnectWithoutOrderInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutOrderInput | CommentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: CommentCreateManyOrderInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutOrderInput | CommentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutOrderInput | CommentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type OrderMasterUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderMasterCreateWithoutOrderInput, OrderMasterUncheckedCreateWithoutOrderInput> | OrderMasterCreateWithoutOrderInput[] | OrderMasterUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderMasterCreateOrConnectWithoutOrderInput | OrderMasterCreateOrConnectWithoutOrderInput[]
    upsert?: OrderMasterUpsertWithWhereUniqueWithoutOrderInput | OrderMasterUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderMasterCreateManyOrderInputEnvelope
    set?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    disconnect?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    delete?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    connect?: OrderMasterWhereUniqueInput | OrderMasterWhereUniqueInput[]
    update?: OrderMasterUpdateWithWhereUniqueWithoutOrderInput | OrderMasterUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderMasterUpdateManyWithWhereWithoutOrderInput | OrderMasterUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderMasterScalarWhereInput | OrderMasterScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutOrderProductsInput = {
    create?: XOR<OrderCreateWithoutOrderProductsInput, OrderUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderProductsInput
    connect?: OrderWhereUniqueInput
  }

  export type ProfessionCreateNestedOneWithoutOrderProductsInput = {
    create?: XOR<ProfessionCreateWithoutOrderProductsInput, ProfessionUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutOrderProductsInput
    connect?: ProfessionWhereUniqueInput
  }

  export type ToolCreateNestedOneWithoutOrderProductsInput = {
    create?: XOR<ToolCreateWithoutOrderProductsInput, ToolUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutOrderProductsInput
    connect?: ToolWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutOrderProductLevelInput = {
    create?: XOR<LevelCreateWithoutOrderProductLevelInput, LevelUncheckedCreateWithoutOrderProductLevelInput>
    connectOrCreate?: LevelCreateOrConnectWithoutOrderProductLevelInput
    connect?: LevelWhereUniqueInput
  }

  export type NullableEnumTimeUnitFieldUpdateOperationsInput = {
    set?: $Enums.TimeUnit | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrderUpdateOneRequiredWithoutOrderProductsNestedInput = {
    create?: XOR<OrderCreateWithoutOrderProductsInput, OrderUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderProductsInput
    upsert?: OrderUpsertWithoutOrderProductsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrderProductsInput, OrderUpdateWithoutOrderProductsInput>, OrderUncheckedUpdateWithoutOrderProductsInput>
  }

  export type ProfessionUpdateOneWithoutOrderProductsNestedInput = {
    create?: XOR<ProfessionCreateWithoutOrderProductsInput, ProfessionUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutOrderProductsInput
    upsert?: ProfessionUpsertWithoutOrderProductsInput
    disconnect?: ProfessionWhereInput | boolean
    delete?: ProfessionWhereInput | boolean
    connect?: ProfessionWhereUniqueInput
    update?: XOR<XOR<ProfessionUpdateToOneWithWhereWithoutOrderProductsInput, ProfessionUpdateWithoutOrderProductsInput>, ProfessionUncheckedUpdateWithoutOrderProductsInput>
  }

  export type ToolUpdateOneWithoutOrderProductsNestedInput = {
    create?: XOR<ToolCreateWithoutOrderProductsInput, ToolUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutOrderProductsInput
    upsert?: ToolUpsertWithoutOrderProductsInput
    disconnect?: ToolWhereInput | boolean
    delete?: ToolWhereInput | boolean
    connect?: ToolWhereUniqueInput
    update?: XOR<XOR<ToolUpdateToOneWithWhereWithoutOrderProductsInput, ToolUpdateWithoutOrderProductsInput>, ToolUncheckedUpdateWithoutOrderProductsInput>
  }

  export type LevelUpdateOneWithoutOrderProductLevelNestedInput = {
    create?: XOR<LevelCreateWithoutOrderProductLevelInput, LevelUncheckedCreateWithoutOrderProductLevelInput>
    connectOrCreate?: LevelCreateOrConnectWithoutOrderProductLevelInput
    upsert?: LevelUpsertWithoutOrderProductLevelInput
    disconnect?: LevelWhereInput | boolean
    delete?: LevelWhereInput | boolean
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutOrderProductLevelInput, LevelUpdateWithoutOrderProductLevelInput>, LevelUncheckedUpdateWithoutOrderProductLevelInput>
  }

  export type OrderCreateNestedOneWithoutMastersInput = {
    create?: XOR<OrderCreateWithoutMastersInput, OrderUncheckedCreateWithoutMastersInput>
    connectOrCreate?: OrderCreateOrConnectWithoutMastersInput
    connect?: OrderWhereUniqueInput
  }

  export type MasterCreateNestedOneWithoutOrdermastersInput = {
    create?: XOR<MasterCreateWithoutOrdermastersInput, MasterUncheckedCreateWithoutOrdermastersInput>
    connectOrCreate?: MasterCreateOrConnectWithoutOrdermastersInput
    connect?: MasterWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutMastersNestedInput = {
    create?: XOR<OrderCreateWithoutMastersInput, OrderUncheckedCreateWithoutMastersInput>
    connectOrCreate?: OrderCreateOrConnectWithoutMastersInput
    upsert?: OrderUpsertWithoutMastersInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutMastersInput, OrderUpdateWithoutMastersInput>, OrderUncheckedUpdateWithoutMastersInput>
  }

  export type MasterUpdateOneRequiredWithoutOrdermastersNestedInput = {
    create?: XOR<MasterCreateWithoutOrdermastersInput, MasterUncheckedCreateWithoutOrdermastersInput>
    connectOrCreate?: MasterCreateOrConnectWithoutOrdermastersInput
    upsert?: MasterUpsertWithoutOrdermastersInput
    connect?: MasterWhereUniqueInput
    update?: XOR<XOR<MasterUpdateToOneWithWhereWithoutOrdermastersInput, MasterUpdateWithoutOrdermastersInput>, MasterUncheckedUpdateWithoutOrdermastersInput>
  }

  export type UserCreateNestedOneWithoutBasketInput = {
    create?: XOR<UserCreateWithoutBasketInput, UserUncheckedCreateWithoutBasketInput>
    connectOrCreate?: UserCreateOrConnectWithoutBasketInput
    connect?: UserWhereUniqueInput
  }

  export type ProfessionCreateNestedOneWithoutBasketInput = {
    create?: XOR<ProfessionCreateWithoutBasketInput, ProfessionUncheckedCreateWithoutBasketInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutBasketInput
    connect?: ProfessionWhereUniqueInput
  }

  export type ToolCreateNestedOneWithoutBasketInput = {
    create?: XOR<ToolCreateWithoutBasketInput, ToolUncheckedCreateWithoutBasketInput>
    connectOrCreate?: ToolCreateOrConnectWithoutBasketInput
    connect?: ToolWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutBasketInput = {
    create?: XOR<LevelCreateWithoutBasketInput, LevelUncheckedCreateWithoutBasketInput>
    connectOrCreate?: LevelCreateOrConnectWithoutBasketInput
    connect?: LevelWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBasketNestedInput = {
    create?: XOR<UserCreateWithoutBasketInput, UserUncheckedCreateWithoutBasketInput>
    connectOrCreate?: UserCreateOrConnectWithoutBasketInput
    upsert?: UserUpsertWithoutBasketInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBasketInput, UserUpdateWithoutBasketInput>, UserUncheckedUpdateWithoutBasketInput>
  }

  export type ProfessionUpdateOneWithoutBasketNestedInput = {
    create?: XOR<ProfessionCreateWithoutBasketInput, ProfessionUncheckedCreateWithoutBasketInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutBasketInput
    upsert?: ProfessionUpsertWithoutBasketInput
    disconnect?: ProfessionWhereInput | boolean
    delete?: ProfessionWhereInput | boolean
    connect?: ProfessionWhereUniqueInput
    update?: XOR<XOR<ProfessionUpdateToOneWithWhereWithoutBasketInput, ProfessionUpdateWithoutBasketInput>, ProfessionUncheckedUpdateWithoutBasketInput>
  }

  export type ToolUpdateOneWithoutBasketNestedInput = {
    create?: XOR<ToolCreateWithoutBasketInput, ToolUncheckedCreateWithoutBasketInput>
    connectOrCreate?: ToolCreateOrConnectWithoutBasketInput
    upsert?: ToolUpsertWithoutBasketInput
    disconnect?: ToolWhereInput | boolean
    delete?: ToolWhereInput | boolean
    connect?: ToolWhereUniqueInput
    update?: XOR<XOR<ToolUpdateToOneWithWhereWithoutBasketInput, ToolUpdateWithoutBasketInput>, ToolUncheckedUpdateWithoutBasketInput>
  }

  export type LevelUpdateOneWithoutBasketNestedInput = {
    create?: XOR<LevelCreateWithoutBasketInput, LevelUncheckedCreateWithoutBasketInput>
    connectOrCreate?: LevelCreateOrConnectWithoutBasketInput
    upsert?: LevelUpsertWithoutBasketInput
    disconnect?: LevelWhereInput | boolean
    delete?: LevelWhereInput | boolean
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutBasketInput, LevelUpdateWithoutBasketInput>, LevelUncheckedUpdateWithoutBasketInput>
  }

  export type UserCreateNestedOneWithoutCommentInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    connect?: UserWhereUniqueInput
  }

  export type OrderCreateNestedOneWithoutCommentsInput = {
    create?: XOR<OrderCreateWithoutCommentsInput, OrderUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutCommentsInput
    connect?: OrderWhereUniqueInput
  }

  export type MasterRatingsCreateNestedManyWithoutCommentInput = {
    create?: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput> | MasterRatingsCreateWithoutCommentInput[] | MasterRatingsUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutCommentInput | MasterRatingsCreateOrConnectWithoutCommentInput[]
    createMany?: MasterRatingsCreateManyCommentInputEnvelope
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
  }

  export type MasterRatingsUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput> | MasterRatingsCreateWithoutCommentInput[] | MasterRatingsUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutCommentInput | MasterRatingsCreateOrConnectWithoutCommentInput[]
    createMany?: MasterRatingsCreateManyCommentInputEnvelope
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    upsert?: UserUpsertWithoutCommentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentInput, UserUpdateWithoutCommentInput>, UserUncheckedUpdateWithoutCommentInput>
  }

  export type OrderUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<OrderCreateWithoutCommentsInput, OrderUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutCommentsInput
    upsert?: OrderUpsertWithoutCommentsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutCommentsInput, OrderUpdateWithoutCommentsInput>, OrderUncheckedUpdateWithoutCommentsInput>
  }

  export type MasterRatingsUpdateManyWithoutCommentNestedInput = {
    create?: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput> | MasterRatingsCreateWithoutCommentInput[] | MasterRatingsUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutCommentInput | MasterRatingsCreateOrConnectWithoutCommentInput[]
    upsert?: MasterRatingsUpsertWithWhereUniqueWithoutCommentInput | MasterRatingsUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: MasterRatingsCreateManyCommentInputEnvelope
    set?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    disconnect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    delete?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    update?: MasterRatingsUpdateWithWhereUniqueWithoutCommentInput | MasterRatingsUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: MasterRatingsUpdateManyWithWhereWithoutCommentInput | MasterRatingsUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
  }

  export type MasterRatingsUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput> | MasterRatingsCreateWithoutCommentInput[] | MasterRatingsUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutCommentInput | MasterRatingsCreateOrConnectWithoutCommentInput[]
    upsert?: MasterRatingsUpsertWithWhereUniqueWithoutCommentInput | MasterRatingsUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: MasterRatingsCreateManyCommentInputEnvelope
    set?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    disconnect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    delete?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    update?: MasterRatingsUpdateWithWhereUniqueWithoutCommentInput | MasterRatingsUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: MasterRatingsUpdateManyWithWhereWithoutCommentInput | MasterRatingsUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
  }

  export type MasterCreateNestedOneWithoutMasterRatingInput = {
    create?: XOR<MasterCreateWithoutMasterRatingInput, MasterUncheckedCreateWithoutMasterRatingInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterRatingInput
    connect?: MasterWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutMasterRatingsInput = {
    create?: XOR<CommentCreateWithoutMasterRatingsInput, CommentUncheckedCreateWithoutMasterRatingsInput>
    connectOrCreate?: CommentCreateOrConnectWithoutMasterRatingsInput
    connect?: CommentWhereUniqueInput
  }

  export type MasterUpdateOneRequiredWithoutMasterRatingNestedInput = {
    create?: XOR<MasterCreateWithoutMasterRatingInput, MasterUncheckedCreateWithoutMasterRatingInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterRatingInput
    upsert?: MasterUpsertWithoutMasterRatingInput
    connect?: MasterWhereUniqueInput
    update?: XOR<XOR<MasterUpdateToOneWithWhereWithoutMasterRatingInput, MasterUpdateWithoutMasterRatingInput>, MasterUncheckedUpdateWithoutMasterRatingInput>
  }

  export type CommentUpdateOneRequiredWithoutMasterRatingsNestedInput = {
    create?: XOR<CommentCreateWithoutMasterRatingsInput, CommentUncheckedCreateWithoutMasterRatingsInput>
    connectOrCreate?: CommentCreateOrConnectWithoutMasterRatingsInput
    upsert?: CommentUpsertWithoutMasterRatingsInput
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutMasterRatingsInput, CommentUpdateWithoutMasterRatingsInput>, CommentUncheckedUpdateWithoutMasterRatingsInput>
  }

  export type UserCreateNestedOneWithoutContactInput = {
    create?: XOR<UserCreateWithoutContactInput, UserUncheckedCreateWithoutContactInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutContactNestedInput = {
    create?: XOR<UserCreateWithoutContactInput, UserUncheckedCreateWithoutContactInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactInput
    upsert?: UserUpsertWithoutContactInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContactInput, UserUpdateWithoutContactInput>, UserUncheckedUpdateWithoutContactInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type NestedEnumTimeUnitNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TimeUnit | EnumTimeUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.TimeUnit[] | ListEnumTimeUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TimeUnit[] | ListEnumTimeUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTimeUnitNullableFilter<$PrismaModel> | $Enums.TimeUnit | null
  }

  export type NestedEnumTimeUnitNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TimeUnit | EnumTimeUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.TimeUnit[] | ListEnumTimeUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TimeUnit[] | ListEnumTimeUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTimeUnitNullableWithAggregatesFilter<$PrismaModel> | $Enums.TimeUnit | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTimeUnitNullableFilter<$PrismaModel>
    _max?: NestedEnumTimeUnitNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserCreateWithoutRegionInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    companies?: CompanyCreateNestedManyWithoutOwnerInput
    order?: OrderCreateNestedManyWithoutOwnerInput
    contact?: ContactCreateNestedManyWithoutUserInput
    basket?: BasketCreateNestedManyWithoutOwnerInput
    comment?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRegionInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companies?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    order?: OrderUncheckedCreateNestedManyWithoutOwnerInput
    contact?: ContactUncheckedCreateNestedManyWithoutUserInput
    basket?: BasketUncheckedCreateNestedManyWithoutOwnerInput
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRegionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput>
  }

  export type UserCreateManyRegionInputEnvelope = {
    data: UserCreateManyRegionInput | UserCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRegionInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRegionInput, UserUncheckedUpdateWithoutRegionInput>
    create: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRegionInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRegionInput, UserUncheckedUpdateWithoutRegionInput>
  }

  export type UserUpdateManyWithWhereWithoutRegionInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRegionInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    regionId?: StringNullableFilter<"User"> | string | null
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    refreshToken?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type RegionCreateWithoutUsersInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegionUncheckedCreateWithoutUsersInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegionCreateOrConnectWithoutUsersInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    ip?: string | null
    userAgent?: string | null
    device?: string | null
    brand?: string | null
    model?: string | null
    os?: string | null
    osVersion?: string | null
    client?: string | null
    clientType?: string | null
    clientVersion?: string | null
    isBot?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    ip?: string | null
    userAgent?: string | null
    device?: string | null
    brand?: string | null
    model?: string | null
    os?: string | null
    osVersion?: string | null
    client?: string | null
    clientType?: string | null
    clientVersion?: string | null
    isBot?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutOwnerInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    taxId?: string | null
    bankCode?: string | null
    bankAccount?: string | null
    bankName?: string | null
    oked?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUncheckedCreateWithoutOwnerInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    taxId?: string | null
    bankCode?: string | null
    bankAccount?: string | null
    bankName?: string | null
    oked?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyCreateOrConnectWithoutOwnerInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput>
  }

  export type CompanyCreateManyOwnerInputEnvelope = {
    data: CompanyCreateManyOwnerInput | CompanyCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutOwnerInput = {
    id?: string
    address: string
    latitude: string
    longitude: string
    date: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
    isPaid?: boolean
    paymentType?: $Enums.PaymentType
    withDelivery: boolean
    status?: $Enums.OrderStatus
    deliveryComment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: OrderProductCreateNestedManyWithoutOrderInput
    comments?: CommentCreateNestedManyWithoutOrderInput
    masters?: OrderMasterCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOwnerInput = {
    id?: string
    address: string
    latitude: string
    longitude: string
    date: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
    isPaid?: boolean
    paymentType?: $Enums.PaymentType
    withDelivery: boolean
    status?: $Enums.OrderStatus
    deliveryComment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: OrderProductUncheckedCreateNestedManyWithoutOrderInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrderInput
    masters?: OrderMasterUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOwnerInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOwnerInput, OrderUncheckedCreateWithoutOwnerInput>
  }

  export type OrderCreateManyOwnerInputEnvelope = {
    data: OrderCreateManyOwnerInput | OrderCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ContactCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactUncheckedCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactCreateOrConnectWithoutUserInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput>
  }

  export type ContactCreateManyUserInputEnvelope = {
    data: ContactCreateManyUserInput | ContactCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BasketCreateWithoutOwnerInput = {
    id?: string
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    profession?: ProfessionCreateNestedOneWithoutBasketInput
    tool?: ToolCreateNestedOneWithoutBasketInput
    level?: LevelCreateNestedOneWithoutBasketInput
  }

  export type BasketUncheckedCreateWithoutOwnerInput = {
    id?: string
    professionId?: string | null
    toolId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BasketCreateOrConnectWithoutOwnerInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutOwnerInput, BasketUncheckedCreateWithoutOwnerInput>
  }

  export type BasketCreateManyOwnerInputEnvelope = {
    data: BasketCreateManyOwnerInput | BasketCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutCommentsInput
    MasterRatings?: MasterRatingsCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: string
    message: string
    orderId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MasterRatings?: MasterRatingsUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RegionUpsertWithoutUsersInput = {
    update: XOR<RegionUpdateWithoutUsersInput, RegionUncheckedUpdateWithoutUsersInput>
    create: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutUsersInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutUsersInput, RegionUncheckedUpdateWithoutUsersInput>
  }

  export type RegionUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    ip?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    device?: StringNullableFilter<"Session"> | string | null
    brand?: StringNullableFilter<"Session"> | string | null
    model?: StringNullableFilter<"Session"> | string | null
    os?: StringNullableFilter<"Session"> | string | null
    osVersion?: StringNullableFilter<"Session"> | string | null
    client?: StringNullableFilter<"Session"> | string | null
    clientType?: StringNullableFilter<"Session"> | string | null
    clientVersion?: StringNullableFilter<"Session"> | string | null
    isBot?: BoolNullableFilter<"Session"> | boolean | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type CompanyUpsertWithWhereUniqueWithoutOwnerInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutOwnerInput, CompanyUncheckedUpdateWithoutOwnerInput>
    create: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutOwnerInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutOwnerInput, CompanyUncheckedUpdateWithoutOwnerInput>
  }

  export type CompanyUpdateManyWithWhereWithoutOwnerInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutOwnerInput>
  }

  export type CompanyScalarWhereInput = {
    AND?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    OR?: CompanyScalarWhereInput[]
    NOT?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    id?: StringFilter<"Company"> | string
    nameUz?: StringFilter<"Company"> | string
    nameRu?: StringNullableFilter<"Company"> | string | null
    nameEn?: StringNullableFilter<"Company"> | string | null
    taxId?: StringNullableFilter<"Company"> | string | null
    bankCode?: StringNullableFilter<"Company"> | string | null
    bankAccount?: StringNullableFilter<"Company"> | string | null
    bankName?: StringNullableFilter<"Company"> | string | null
    oked?: StringNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    ownerId?: StringFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
  }

  export type OrderUpsertWithWhereUniqueWithoutOwnerInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutOwnerInput, OrderUncheckedUpdateWithoutOwnerInput>
    create: XOR<OrderCreateWithoutOwnerInput, OrderUncheckedCreateWithoutOwnerInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutOwnerInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutOwnerInput, OrderUncheckedUpdateWithoutOwnerInput>
  }

  export type OrderUpdateManyWithWhereWithoutOwnerInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutOwnerInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: StringFilter<"Order"> | string
    ownerId?: StringFilter<"Order"> | string
    address?: StringFilter<"Order"> | string
    latitude?: StringFilter<"Order"> | string
    longitude?: StringFilter<"Order"> | string
    date?: DateTimeFilter<"Order"> | Date | string
    totalPrice?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFilter<"Order"> | boolean
    paymentType?: EnumPaymentTypeFilter<"Order"> | $Enums.PaymentType
    withDelivery?: BoolFilter<"Order"> | boolean
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    deliveryComment?: StringFilter<"Order"> | string
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
  }

  export type ContactUpsertWithWhereUniqueWithoutUserInput = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutUserInput, ContactUncheckedUpdateWithoutUserInput>
    create: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput>
  }

  export type ContactUpdateWithWhereUniqueWithoutUserInput = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutUserInput, ContactUncheckedUpdateWithoutUserInput>
  }

  export type ContactUpdateManyWithWhereWithoutUserInput = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutUserInput>
  }

  export type ContactScalarWhereInput = {
    AND?: ContactScalarWhereInput | ContactScalarWhereInput[]
    OR?: ContactScalarWhereInput[]
    NOT?: ContactScalarWhereInput | ContactScalarWhereInput[]
    id?: StringFilter<"Contact"> | string
    firstName?: StringFilter<"Contact"> | string
    lastName?: StringFilter<"Contact"> | string
    phoneNumber?: StringFilter<"Contact"> | string
    address?: StringFilter<"Contact"> | string
    message?: StringNullableFilter<"Contact"> | string | null
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
    userId?: StringFilter<"Contact"> | string
  }

  export type BasketUpsertWithWhereUniqueWithoutOwnerInput = {
    where: BasketWhereUniqueInput
    update: XOR<BasketUpdateWithoutOwnerInput, BasketUncheckedUpdateWithoutOwnerInput>
    create: XOR<BasketCreateWithoutOwnerInput, BasketUncheckedCreateWithoutOwnerInput>
  }

  export type BasketUpdateWithWhereUniqueWithoutOwnerInput = {
    where: BasketWhereUniqueInput
    data: XOR<BasketUpdateWithoutOwnerInput, BasketUncheckedUpdateWithoutOwnerInput>
  }

  export type BasketUpdateManyWithWhereWithoutOwnerInput = {
    where: BasketScalarWhereInput
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyWithoutOwnerInput>
  }

  export type BasketScalarWhereInput = {
    AND?: BasketScalarWhereInput | BasketScalarWhereInput[]
    OR?: BasketScalarWhereInput[]
    NOT?: BasketScalarWhereInput | BasketScalarWhereInput[]
    id?: StringFilter<"Basket"> | string
    ownerId?: StringFilter<"Basket"> | string
    professionId?: StringNullableFilter<"Basket"> | string | null
    toolId?: StringNullableFilter<"Basket"> | string | null
    levelId?: StringNullableFilter<"Basket"> | string | null
    quantity?: IntFilter<"Basket"> | number
    timeUnit?: EnumTimeUnitNullableFilter<"Basket"> | $Enums.TimeUnit | null
    workingTime?: FloatNullableFilter<"Basket"> | number | null
    price?: DecimalFilter<"Basket"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"Basket"> | Date | string
    updatedAt?: DateTimeFilter<"Basket"> | Date | string
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    message?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    orderId?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
  }

  export type UserCreateWithoutCompaniesInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: RegionCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    order?: OrderCreateNestedManyWithoutOwnerInput
    contact?: ContactCreateNestedManyWithoutUserInput
    basket?: BasketCreateNestedManyWithoutOwnerInput
    comment?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompaniesInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    regionId?: string | null
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    order?: OrderUncheckedCreateNestedManyWithoutOwnerInput
    contact?: ContactUncheckedCreateNestedManyWithoutUserInput
    basket?: BasketUncheckedCreateNestedManyWithoutOwnerInput
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompaniesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompaniesInput, UserUncheckedCreateWithoutCompaniesInput>
  }

  export type UserUpsertWithoutCompaniesInput = {
    update: XOR<UserUpdateWithoutCompaniesInput, UserUncheckedUpdateWithoutCompaniesInput>
    create: XOR<UserCreateWithoutCompaniesInput, UserUncheckedCreateWithoutCompaniesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCompaniesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCompaniesInput, UserUncheckedUpdateWithoutCompaniesInput>
  }

  export type UserUpdateWithoutCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    order?: OrderUpdateManyWithoutOwnerNestedInput
    contact?: ContactUpdateManyWithoutUserNestedInput
    basket?: BasketUpdateManyWithoutOwnerNestedInput
    comment?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    order?: OrderUncheckedUpdateManyWithoutOwnerNestedInput
    contact?: ContactUncheckedUpdateManyWithoutUserNestedInput
    basket?: BasketUncheckedUpdateManyWithoutOwnerNestedInput
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: RegionCreateNestedOneWithoutUsersInput
    companies?: CompanyCreateNestedManyWithoutOwnerInput
    order?: OrderCreateNestedManyWithoutOwnerInput
    contact?: ContactCreateNestedManyWithoutUserInput
    basket?: BasketCreateNestedManyWithoutOwnerInput
    comment?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    regionId?: string | null
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    order?: OrderUncheckedCreateNestedManyWithoutOwnerInput
    contact?: ContactUncheckedCreateNestedManyWithoutUserInput
    basket?: BasketUncheckedCreateNestedManyWithoutOwnerInput
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneWithoutUsersNestedInput
    companies?: CompanyUpdateManyWithoutOwnerNestedInput
    order?: OrderUpdateManyWithoutOwnerNestedInput
    contact?: ContactUpdateManyWithoutUserNestedInput
    basket?: BasketUpdateManyWithoutOwnerNestedInput
    comment?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    order?: OrderUncheckedUpdateManyWithoutOwnerNestedInput
    contact?: ContactUncheckedUpdateManyWithoutUserNestedInput
    basket?: BasketUncheckedUpdateManyWithoutOwnerNestedInput
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ToolCreateWithoutBrandInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    power?: PowerCreateNestedOneWithoutToolsInput
    size?: SizeCreateNestedOneWithoutToolsInput
    professionTools?: ProfessionToolCreateNestedManyWithoutToolInput
    orderProducts?: OrderProductCreateNestedManyWithoutToolInput
    basket?: BasketCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutBrandInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    powerId?: string | null
    sizeId?: string | null
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    professionTools?: ProfessionToolUncheckedCreateNestedManyWithoutToolInput
    orderProducts?: OrderProductUncheckedCreateNestedManyWithoutToolInput
    basket?: BasketUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutBrandInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput>
  }

  export type ToolCreateManyBrandInputEnvelope = {
    data: ToolCreateManyBrandInput | ToolCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type ToolUpsertWithWhereUniqueWithoutBrandInput = {
    where: ToolWhereUniqueInput
    update: XOR<ToolUpdateWithoutBrandInput, ToolUncheckedUpdateWithoutBrandInput>
    create: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput>
  }

  export type ToolUpdateWithWhereUniqueWithoutBrandInput = {
    where: ToolWhereUniqueInput
    data: XOR<ToolUpdateWithoutBrandInput, ToolUncheckedUpdateWithoutBrandInput>
  }

  export type ToolUpdateManyWithWhereWithoutBrandInput = {
    where: ToolScalarWhereInput
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyWithoutBrandInput>
  }

  export type ToolScalarWhereInput = {
    AND?: ToolScalarWhereInput | ToolScalarWhereInput[]
    OR?: ToolScalarWhereInput[]
    NOT?: ToolScalarWhereInput | ToolScalarWhereInput[]
    id?: StringFilter<"Tool"> | string
    nameUz?: StringFilter<"Tool"> | string
    nameRu?: StringNullableFilter<"Tool"> | string | null
    nameEn?: StringNullableFilter<"Tool"> | string | null
    descriptionUz?: StringFilter<"Tool"> | string
    descriptionRu?: StringNullableFilter<"Tool"> | string | null
    descriptionEn?: StringNullableFilter<"Tool"> | string | null
    price?: DecimalFilter<"Tool"> | Decimal | DecimalJsLike | number | string
    quantity?: IntFilter<"Tool"> | number
    code?: StringFilter<"Tool"> | string
    brandId?: StringNullableFilter<"Tool"> | string | null
    powerId?: StringNullableFilter<"Tool"> | string | null
    sizeId?: StringNullableFilter<"Tool"> | string | null
    img?: StringFilter<"Tool"> | string
    isAvailable?: BoolFilter<"Tool"> | boolean
    createdAt?: DateTimeFilter<"Tool"> | Date | string
    updatedAt?: DateTimeFilter<"Tool"> | Date | string
  }

  export type ToolCreateWithoutSizeInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: BrandCreateNestedOneWithoutToolsInput
    power?: PowerCreateNestedOneWithoutToolsInput
    professionTools?: ProfessionToolCreateNestedManyWithoutToolInput
    orderProducts?: OrderProductCreateNestedManyWithoutToolInput
    basket?: BasketCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutSizeInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    brandId?: string | null
    powerId?: string | null
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    professionTools?: ProfessionToolUncheckedCreateNestedManyWithoutToolInput
    orderProducts?: OrderProductUncheckedCreateNestedManyWithoutToolInput
    basket?: BasketUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutSizeInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput>
  }

  export type ToolCreateManySizeInputEnvelope = {
    data: ToolCreateManySizeInput | ToolCreateManySizeInput[]
    skipDuplicates?: boolean
  }

  export type ToolUpsertWithWhereUniqueWithoutSizeInput = {
    where: ToolWhereUniqueInput
    update: XOR<ToolUpdateWithoutSizeInput, ToolUncheckedUpdateWithoutSizeInput>
    create: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput>
  }

  export type ToolUpdateWithWhereUniqueWithoutSizeInput = {
    where: ToolWhereUniqueInput
    data: XOR<ToolUpdateWithoutSizeInput, ToolUncheckedUpdateWithoutSizeInput>
  }

  export type ToolUpdateManyWithWhereWithoutSizeInput = {
    where: ToolScalarWhereInput
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyWithoutSizeInput>
  }

  export type ToolCreateWithoutPowerInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: BrandCreateNestedOneWithoutToolsInput
    size?: SizeCreateNestedOneWithoutToolsInput
    professionTools?: ProfessionToolCreateNestedManyWithoutToolInput
    orderProducts?: OrderProductCreateNestedManyWithoutToolInput
    basket?: BasketCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutPowerInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    brandId?: string | null
    sizeId?: string | null
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    professionTools?: ProfessionToolUncheckedCreateNestedManyWithoutToolInput
    orderProducts?: OrderProductUncheckedCreateNestedManyWithoutToolInput
    basket?: BasketUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutPowerInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutPowerInput, ToolUncheckedCreateWithoutPowerInput>
  }

  export type ToolCreateManyPowerInputEnvelope = {
    data: ToolCreateManyPowerInput | ToolCreateManyPowerInput[]
    skipDuplicates?: boolean
  }

  export type ToolUpsertWithWhereUniqueWithoutPowerInput = {
    where: ToolWhereUniqueInput
    update: XOR<ToolUpdateWithoutPowerInput, ToolUncheckedUpdateWithoutPowerInput>
    create: XOR<ToolCreateWithoutPowerInput, ToolUncheckedCreateWithoutPowerInput>
  }

  export type ToolUpdateWithWhereUniqueWithoutPowerInput = {
    where: ToolWhereUniqueInput
    data: XOR<ToolUpdateWithoutPowerInput, ToolUncheckedUpdateWithoutPowerInput>
  }

  export type ToolUpdateManyWithWhereWithoutPowerInput = {
    where: ToolScalarWhereInput
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyWithoutPowerInput>
  }

  export type BrandCreateWithoutToolsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandUncheckedCreateWithoutToolsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandCreateOrConnectWithoutToolsInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
  }

  export type PowerCreateWithoutToolsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PowerUncheckedCreateWithoutToolsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PowerCreateOrConnectWithoutToolsInput = {
    where: PowerWhereUniqueInput
    create: XOR<PowerCreateWithoutToolsInput, PowerUncheckedCreateWithoutToolsInput>
  }

  export type SizeCreateWithoutToolsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SizeUncheckedCreateWithoutToolsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SizeCreateOrConnectWithoutToolsInput = {
    where: SizeWhereUniqueInput
    create: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
  }

  export type ProfessionToolCreateWithoutToolInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profession: ProfessionCreateNestedOneWithoutProfessionToolsInput
  }

  export type ProfessionToolUncheckedCreateWithoutToolInput = {
    id?: string
    professionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionToolCreateOrConnectWithoutToolInput = {
    where: ProfessionToolWhereUniqueInput
    create: XOR<ProfessionToolCreateWithoutToolInput, ProfessionToolUncheckedCreateWithoutToolInput>
  }

  export type ProfessionToolCreateManyToolInputEnvelope = {
    data: ProfessionToolCreateManyToolInput | ProfessionToolCreateManyToolInput[]
    skipDuplicates?: boolean
  }

  export type OrderProductCreateWithoutToolInput = {
    id?: string
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutOrderProductsInput
    profession?: ProfessionCreateNestedOneWithoutOrderProductsInput
    level?: LevelCreateNestedOneWithoutOrderProductLevelInput
  }

  export type OrderProductUncheckedCreateWithoutToolInput = {
    id?: string
    orderId: string
    professionId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderProductCreateOrConnectWithoutToolInput = {
    where: OrderProductWhereUniqueInput
    create: XOR<OrderProductCreateWithoutToolInput, OrderProductUncheckedCreateWithoutToolInput>
  }

  export type OrderProductCreateManyToolInputEnvelope = {
    data: OrderProductCreateManyToolInput | OrderProductCreateManyToolInput[]
    skipDuplicates?: boolean
  }

  export type BasketCreateWithoutToolInput = {
    id?: string
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutBasketInput
    profession?: ProfessionCreateNestedOneWithoutBasketInput
    level?: LevelCreateNestedOneWithoutBasketInput
  }

  export type BasketUncheckedCreateWithoutToolInput = {
    id?: string
    ownerId: string
    professionId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BasketCreateOrConnectWithoutToolInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput>
  }

  export type BasketCreateManyToolInputEnvelope = {
    data: BasketCreateManyToolInput | BasketCreateManyToolInput[]
    skipDuplicates?: boolean
  }

  export type BrandUpsertWithoutToolsInput = {
    update: XOR<BrandUpdateWithoutToolsInput, BrandUncheckedUpdateWithoutToolsInput>
    create: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutToolsInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutToolsInput, BrandUncheckedUpdateWithoutToolsInput>
  }

  export type BrandUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUncheckedUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PowerUpsertWithoutToolsInput = {
    update: XOR<PowerUpdateWithoutToolsInput, PowerUncheckedUpdateWithoutToolsInput>
    create: XOR<PowerCreateWithoutToolsInput, PowerUncheckedCreateWithoutToolsInput>
    where?: PowerWhereInput
  }

  export type PowerUpdateToOneWithWhereWithoutToolsInput = {
    where?: PowerWhereInput
    data: XOR<PowerUpdateWithoutToolsInput, PowerUncheckedUpdateWithoutToolsInput>
  }

  export type PowerUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PowerUncheckedUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeUpsertWithoutToolsInput = {
    update: XOR<SizeUpdateWithoutToolsInput, SizeUncheckedUpdateWithoutToolsInput>
    create: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
    where?: SizeWhereInput
  }

  export type SizeUpdateToOneWithWhereWithoutToolsInput = {
    where?: SizeWhereInput
    data: XOR<SizeUpdateWithoutToolsInput, SizeUncheckedUpdateWithoutToolsInput>
  }

  export type SizeUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeUncheckedUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionToolUpsertWithWhereUniqueWithoutToolInput = {
    where: ProfessionToolWhereUniqueInput
    update: XOR<ProfessionToolUpdateWithoutToolInput, ProfessionToolUncheckedUpdateWithoutToolInput>
    create: XOR<ProfessionToolCreateWithoutToolInput, ProfessionToolUncheckedCreateWithoutToolInput>
  }

  export type ProfessionToolUpdateWithWhereUniqueWithoutToolInput = {
    where: ProfessionToolWhereUniqueInput
    data: XOR<ProfessionToolUpdateWithoutToolInput, ProfessionToolUncheckedUpdateWithoutToolInput>
  }

  export type ProfessionToolUpdateManyWithWhereWithoutToolInput = {
    where: ProfessionToolScalarWhereInput
    data: XOR<ProfessionToolUpdateManyMutationInput, ProfessionToolUncheckedUpdateManyWithoutToolInput>
  }

  export type ProfessionToolScalarWhereInput = {
    AND?: ProfessionToolScalarWhereInput | ProfessionToolScalarWhereInput[]
    OR?: ProfessionToolScalarWhereInput[]
    NOT?: ProfessionToolScalarWhereInput | ProfessionToolScalarWhereInput[]
    id?: StringFilter<"ProfessionTool"> | string
    professionId?: StringFilter<"ProfessionTool"> | string
    toolId?: StringFilter<"ProfessionTool"> | string
    createdAt?: DateTimeFilter<"ProfessionTool"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionTool"> | Date | string
  }

  export type OrderProductUpsertWithWhereUniqueWithoutToolInput = {
    where: OrderProductWhereUniqueInput
    update: XOR<OrderProductUpdateWithoutToolInput, OrderProductUncheckedUpdateWithoutToolInput>
    create: XOR<OrderProductCreateWithoutToolInput, OrderProductUncheckedCreateWithoutToolInput>
  }

  export type OrderProductUpdateWithWhereUniqueWithoutToolInput = {
    where: OrderProductWhereUniqueInput
    data: XOR<OrderProductUpdateWithoutToolInput, OrderProductUncheckedUpdateWithoutToolInput>
  }

  export type OrderProductUpdateManyWithWhereWithoutToolInput = {
    where: OrderProductScalarWhereInput
    data: XOR<OrderProductUpdateManyMutationInput, OrderProductUncheckedUpdateManyWithoutToolInput>
  }

  export type OrderProductScalarWhereInput = {
    AND?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[]
    OR?: OrderProductScalarWhereInput[]
    NOT?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[]
    id?: StringFilter<"OrderProduct"> | string
    orderId?: StringFilter<"OrderProduct"> | string
    professionId?: StringNullableFilter<"OrderProduct"> | string | null
    toolId?: StringNullableFilter<"OrderProduct"> | string | null
    levelId?: StringNullableFilter<"OrderProduct"> | string | null
    quantity?: IntFilter<"OrderProduct"> | number
    timeUnit?: EnumTimeUnitNullableFilter<"OrderProduct"> | $Enums.TimeUnit | null
    workingTime?: FloatNullableFilter<"OrderProduct"> | number | null
    price?: DecimalFilter<"OrderProduct"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"OrderProduct"> | Date | string
    updatedAt?: DateTimeFilter<"OrderProduct"> | Date | string
  }

  export type BasketUpsertWithWhereUniqueWithoutToolInput = {
    where: BasketWhereUniqueInput
    update: XOR<BasketUpdateWithoutToolInput, BasketUncheckedUpdateWithoutToolInput>
    create: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput>
  }

  export type BasketUpdateWithWhereUniqueWithoutToolInput = {
    where: BasketWhereUniqueInput
    data: XOR<BasketUpdateWithoutToolInput, BasketUncheckedUpdateWithoutToolInput>
  }

  export type BasketUpdateManyWithWhereWithoutToolInput = {
    where: BasketScalarWhereInput
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyWithoutToolInput>
  }

  export type MasterProfessionCreateWithoutMasterInput = {
    id?: string
    minWorkingHours?: number | null
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    experience: number
    createdAt?: Date | string
    updatedAt?: Date | string
    profession?: ProfessionCreateNestedOneWithoutMasterProfessionsInput
    level?: LevelCreateNestedOneWithoutMasterProfessionsInput
  }

  export type MasterProfessionUncheckedCreateWithoutMasterInput = {
    id?: string
    professionId?: string | null
    minWorkingHours?: number | null
    levelId?: string | null
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    experience: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterProfessionCreateOrConnectWithoutMasterInput = {
    where: MasterProfessionWhereUniqueInput
    create: XOR<MasterProfessionCreateWithoutMasterInput, MasterProfessionUncheckedCreateWithoutMasterInput>
  }

  export type MasterProfessionCreateManyMasterInputEnvelope = {
    data: MasterProfessionCreateManyMasterInput | MasterProfessionCreateManyMasterInput[]
    skipDuplicates?: boolean
  }

  export type OrderMasterCreateWithoutMasterInput = {
    id?: string
    order: OrderCreateNestedOneWithoutMastersInput
  }

  export type OrderMasterUncheckedCreateWithoutMasterInput = {
    id?: string
    orderId: string
  }

  export type OrderMasterCreateOrConnectWithoutMasterInput = {
    where: OrderMasterWhereUniqueInput
    create: XOR<OrderMasterCreateWithoutMasterInput, OrderMasterUncheckedCreateWithoutMasterInput>
  }

  export type OrderMasterCreateManyMasterInputEnvelope = {
    data: OrderMasterCreateManyMasterInput | OrderMasterCreateManyMasterInput[]
    skipDuplicates?: boolean
  }

  export type MasterRatingsCreateWithoutMasterInput = {
    id?: string
    star: number
    Comment: CommentCreateNestedOneWithoutMasterRatingsInput
  }

  export type MasterRatingsUncheckedCreateWithoutMasterInput = {
    id?: string
    star: number
    commentId: string
  }

  export type MasterRatingsCreateOrConnectWithoutMasterInput = {
    where: MasterRatingsWhereUniqueInput
    create: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput>
  }

  export type MasterRatingsCreateManyMasterInputEnvelope = {
    data: MasterRatingsCreateManyMasterInput | MasterRatingsCreateManyMasterInput[]
    skipDuplicates?: boolean
  }

  export type MasterProfessionUpsertWithWhereUniqueWithoutMasterInput = {
    where: MasterProfessionWhereUniqueInput
    update: XOR<MasterProfessionUpdateWithoutMasterInput, MasterProfessionUncheckedUpdateWithoutMasterInput>
    create: XOR<MasterProfessionCreateWithoutMasterInput, MasterProfessionUncheckedCreateWithoutMasterInput>
  }

  export type MasterProfessionUpdateWithWhereUniqueWithoutMasterInput = {
    where: MasterProfessionWhereUniqueInput
    data: XOR<MasterProfessionUpdateWithoutMasterInput, MasterProfessionUncheckedUpdateWithoutMasterInput>
  }

  export type MasterProfessionUpdateManyWithWhereWithoutMasterInput = {
    where: MasterProfessionScalarWhereInput
    data: XOR<MasterProfessionUpdateManyMutationInput, MasterProfessionUncheckedUpdateManyWithoutMasterInput>
  }

  export type MasterProfessionScalarWhereInput = {
    AND?: MasterProfessionScalarWhereInput | MasterProfessionScalarWhereInput[]
    OR?: MasterProfessionScalarWhereInput[]
    NOT?: MasterProfessionScalarWhereInput | MasterProfessionScalarWhereInput[]
    id?: StringFilter<"MasterProfession"> | string
    professionId?: StringNullableFilter<"MasterProfession"> | string | null
    minWorkingHours?: IntNullableFilter<"MasterProfession"> | number | null
    levelId?: StringNullableFilter<"MasterProfession"> | string | null
    priceHourly?: DecimalFilter<"MasterProfession"> | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFilter<"MasterProfession"> | Decimal | DecimalJsLike | number | string
    experience?: FloatFilter<"MasterProfession"> | number
    masterId?: StringNullableFilter<"MasterProfession"> | string | null
    createdAt?: DateTimeFilter<"MasterProfession"> | Date | string
    updatedAt?: DateTimeFilter<"MasterProfession"> | Date | string
  }

  export type OrderMasterUpsertWithWhereUniqueWithoutMasterInput = {
    where: OrderMasterWhereUniqueInput
    update: XOR<OrderMasterUpdateWithoutMasterInput, OrderMasterUncheckedUpdateWithoutMasterInput>
    create: XOR<OrderMasterCreateWithoutMasterInput, OrderMasterUncheckedCreateWithoutMasterInput>
  }

  export type OrderMasterUpdateWithWhereUniqueWithoutMasterInput = {
    where: OrderMasterWhereUniqueInput
    data: XOR<OrderMasterUpdateWithoutMasterInput, OrderMasterUncheckedUpdateWithoutMasterInput>
  }

  export type OrderMasterUpdateManyWithWhereWithoutMasterInput = {
    where: OrderMasterScalarWhereInput
    data: XOR<OrderMasterUpdateManyMutationInput, OrderMasterUncheckedUpdateManyWithoutMasterInput>
  }

  export type OrderMasterScalarWhereInput = {
    AND?: OrderMasterScalarWhereInput | OrderMasterScalarWhereInput[]
    OR?: OrderMasterScalarWhereInput[]
    NOT?: OrderMasterScalarWhereInput | OrderMasterScalarWhereInput[]
    id?: StringFilter<"OrderMaster"> | string
    orderId?: StringFilter<"OrderMaster"> | string
    masterid?: StringFilter<"OrderMaster"> | string
  }

  export type MasterRatingsUpsertWithWhereUniqueWithoutMasterInput = {
    where: MasterRatingsWhereUniqueInput
    update: XOR<MasterRatingsUpdateWithoutMasterInput, MasterRatingsUncheckedUpdateWithoutMasterInput>
    create: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput>
  }

  export type MasterRatingsUpdateWithWhereUniqueWithoutMasterInput = {
    where: MasterRatingsWhereUniqueInput
    data: XOR<MasterRatingsUpdateWithoutMasterInput, MasterRatingsUncheckedUpdateWithoutMasterInput>
  }

  export type MasterRatingsUpdateManyWithWhereWithoutMasterInput = {
    where: MasterRatingsScalarWhereInput
    data: XOR<MasterRatingsUpdateManyMutationInput, MasterRatingsUncheckedUpdateManyWithoutMasterInput>
  }

  export type MasterRatingsScalarWhereInput = {
    AND?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
    OR?: MasterRatingsScalarWhereInput[]
    NOT?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
    id?: StringFilter<"MasterRatings"> | string
    star?: FloatFilter<"MasterRatings"> | number
    masterId?: StringFilter<"MasterRatings"> | string
    commentId?: StringFilter<"MasterRatings"> | string
  }

  export type ProfessionCreateWithoutMasterProfessionsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    img: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    professionLevels?: ProfessionLevelCreateNestedManyWithoutProfessionInput
    professionTools?: ProfessionToolCreateNestedManyWithoutProfessionInput
    orderProducts?: OrderProductCreateNestedManyWithoutProfessionInput
    basket?: BasketCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionUncheckedCreateWithoutMasterProfessionsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    img: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    professionLevels?: ProfessionLevelUncheckedCreateNestedManyWithoutProfessionInput
    professionTools?: ProfessionToolUncheckedCreateNestedManyWithoutProfessionInput
    orderProducts?: OrderProductUncheckedCreateNestedManyWithoutProfessionInput
    basket?: BasketUncheckedCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionCreateOrConnectWithoutMasterProfessionsInput = {
    where: ProfessionWhereUniqueInput
    create: XOR<ProfessionCreateWithoutMasterProfessionsInput, ProfessionUncheckedCreateWithoutMasterProfessionsInput>
  }

  export type LevelCreateWithoutMasterProfessionsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    professionLevels?: ProfessionLevelCreateNestedManyWithoutLevelInput
    orderProductLevel?: OrderProductCreateNestedManyWithoutLevelInput
    basket?: BasketCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutMasterProfessionsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    professionLevels?: ProfessionLevelUncheckedCreateNestedManyWithoutLevelInput
    orderProductLevel?: OrderProductUncheckedCreateNestedManyWithoutLevelInput
    basket?: BasketUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutMasterProfessionsInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutMasterProfessionsInput, LevelUncheckedCreateWithoutMasterProfessionsInput>
  }

  export type MasterCreateWithoutMasterProfessionsInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    isActive?: boolean
    birthYear: number
    img: string
    passportImg: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ordermasters?: OrderMasterCreateNestedManyWithoutMasterInput
    masterRating?: MasterRatingsCreateNestedManyWithoutMasterInput
  }

  export type MasterUncheckedCreateWithoutMasterProfessionsInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    isActive?: boolean
    birthYear: number
    img: string
    passportImg: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ordermasters?: OrderMasterUncheckedCreateNestedManyWithoutMasterInput
    masterRating?: MasterRatingsUncheckedCreateNestedManyWithoutMasterInput
  }

  export type MasterCreateOrConnectWithoutMasterProfessionsInput = {
    where: MasterWhereUniqueInput
    create: XOR<MasterCreateWithoutMasterProfessionsInput, MasterUncheckedCreateWithoutMasterProfessionsInput>
  }

  export type ProfessionUpsertWithoutMasterProfessionsInput = {
    update: XOR<ProfessionUpdateWithoutMasterProfessionsInput, ProfessionUncheckedUpdateWithoutMasterProfessionsInput>
    create: XOR<ProfessionCreateWithoutMasterProfessionsInput, ProfessionUncheckedCreateWithoutMasterProfessionsInput>
    where?: ProfessionWhereInput
  }

  export type ProfessionUpdateToOneWithWhereWithoutMasterProfessionsInput = {
    where?: ProfessionWhereInput
    data: XOR<ProfessionUpdateWithoutMasterProfessionsInput, ProfessionUncheckedUpdateWithoutMasterProfessionsInput>
  }

  export type ProfessionUpdateWithoutMasterProfessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professionLevels?: ProfessionLevelUpdateManyWithoutProfessionNestedInput
    professionTools?: ProfessionToolUpdateManyWithoutProfessionNestedInput
    orderProducts?: OrderProductUpdateManyWithoutProfessionNestedInput
    basket?: BasketUpdateManyWithoutProfessionNestedInput
  }

  export type ProfessionUncheckedUpdateWithoutMasterProfessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professionLevels?: ProfessionLevelUncheckedUpdateManyWithoutProfessionNestedInput
    professionTools?: ProfessionToolUncheckedUpdateManyWithoutProfessionNestedInput
    orderProducts?: OrderProductUncheckedUpdateManyWithoutProfessionNestedInput
    basket?: BasketUncheckedUpdateManyWithoutProfessionNestedInput
  }

  export type LevelUpsertWithoutMasterProfessionsInput = {
    update: XOR<LevelUpdateWithoutMasterProfessionsInput, LevelUncheckedUpdateWithoutMasterProfessionsInput>
    create: XOR<LevelCreateWithoutMasterProfessionsInput, LevelUncheckedCreateWithoutMasterProfessionsInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutMasterProfessionsInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutMasterProfessionsInput, LevelUncheckedUpdateWithoutMasterProfessionsInput>
  }

  export type LevelUpdateWithoutMasterProfessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professionLevels?: ProfessionLevelUpdateManyWithoutLevelNestedInput
    orderProductLevel?: OrderProductUpdateManyWithoutLevelNestedInput
    basket?: BasketUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutMasterProfessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professionLevels?: ProfessionLevelUncheckedUpdateManyWithoutLevelNestedInput
    orderProductLevel?: OrderProductUncheckedUpdateManyWithoutLevelNestedInput
    basket?: BasketUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type MasterUpsertWithoutMasterProfessionsInput = {
    update: XOR<MasterUpdateWithoutMasterProfessionsInput, MasterUncheckedUpdateWithoutMasterProfessionsInput>
    create: XOR<MasterCreateWithoutMasterProfessionsInput, MasterUncheckedCreateWithoutMasterProfessionsInput>
    where?: MasterWhereInput
  }

  export type MasterUpdateToOneWithWhereWithoutMasterProfessionsInput = {
    where?: MasterWhereInput
    data: XOR<MasterUpdateWithoutMasterProfessionsInput, MasterUncheckedUpdateWithoutMasterProfessionsInput>
  }

  export type MasterUpdateWithoutMasterProfessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    birthYear?: IntFieldUpdateOperationsInput | number
    img?: StringFieldUpdateOperationsInput | string
    passportImg?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ordermasters?: OrderMasterUpdateManyWithoutMasterNestedInput
    masterRating?: MasterRatingsUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateWithoutMasterProfessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    birthYear?: IntFieldUpdateOperationsInput | number
    img?: StringFieldUpdateOperationsInput | string
    passportImg?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ordermasters?: OrderMasterUncheckedUpdateManyWithoutMasterNestedInput
    masterRating?: MasterRatingsUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type MasterProfessionCreateWithoutLevelInput = {
    id?: string
    minWorkingHours?: number | null
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    experience: number
    createdAt?: Date | string
    updatedAt?: Date | string
    profession?: ProfessionCreateNestedOneWithoutMasterProfessionsInput
    master?: MasterCreateNestedOneWithoutMasterProfessionsInput
  }

  export type MasterProfessionUncheckedCreateWithoutLevelInput = {
    id?: string
    professionId?: string | null
    minWorkingHours?: number | null
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    experience: number
    masterId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterProfessionCreateOrConnectWithoutLevelInput = {
    where: MasterProfessionWhereUniqueInput
    create: XOR<MasterProfessionCreateWithoutLevelInput, MasterProfessionUncheckedCreateWithoutLevelInput>
  }

  export type MasterProfessionCreateManyLevelInputEnvelope = {
    data: MasterProfessionCreateManyLevelInput | MasterProfessionCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type ProfessionLevelCreateWithoutLevelInput = {
    id?: string
    minWorkingHours: number
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    profession: ProfessionCreateNestedOneWithoutProfessionLevelsInput
  }

  export type ProfessionLevelUncheckedCreateWithoutLevelInput = {
    id?: string
    professionId: string
    minWorkingHours: number
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionLevelCreateOrConnectWithoutLevelInput = {
    where: ProfessionLevelWhereUniqueInput
    create: XOR<ProfessionLevelCreateWithoutLevelInput, ProfessionLevelUncheckedCreateWithoutLevelInput>
  }

  export type ProfessionLevelCreateManyLevelInputEnvelope = {
    data: ProfessionLevelCreateManyLevelInput | ProfessionLevelCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type OrderProductCreateWithoutLevelInput = {
    id?: string
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutOrderProductsInput
    profession?: ProfessionCreateNestedOneWithoutOrderProductsInput
    tool?: ToolCreateNestedOneWithoutOrderProductsInput
  }

  export type OrderProductUncheckedCreateWithoutLevelInput = {
    id?: string
    orderId: string
    professionId?: string | null
    toolId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderProductCreateOrConnectWithoutLevelInput = {
    where: OrderProductWhereUniqueInput
    create: XOR<OrderProductCreateWithoutLevelInput, OrderProductUncheckedCreateWithoutLevelInput>
  }

  export type OrderProductCreateManyLevelInputEnvelope = {
    data: OrderProductCreateManyLevelInput | OrderProductCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type BasketCreateWithoutLevelInput = {
    id?: string
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutBasketInput
    profession?: ProfessionCreateNestedOneWithoutBasketInput
    tool?: ToolCreateNestedOneWithoutBasketInput
  }

  export type BasketUncheckedCreateWithoutLevelInput = {
    id?: string
    ownerId: string
    professionId?: string | null
    toolId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BasketCreateOrConnectWithoutLevelInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput>
  }

  export type BasketCreateManyLevelInputEnvelope = {
    data: BasketCreateManyLevelInput | BasketCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type MasterProfessionUpsertWithWhereUniqueWithoutLevelInput = {
    where: MasterProfessionWhereUniqueInput
    update: XOR<MasterProfessionUpdateWithoutLevelInput, MasterProfessionUncheckedUpdateWithoutLevelInput>
    create: XOR<MasterProfessionCreateWithoutLevelInput, MasterProfessionUncheckedCreateWithoutLevelInput>
  }

  export type MasterProfessionUpdateWithWhereUniqueWithoutLevelInput = {
    where: MasterProfessionWhereUniqueInput
    data: XOR<MasterProfessionUpdateWithoutLevelInput, MasterProfessionUncheckedUpdateWithoutLevelInput>
  }

  export type MasterProfessionUpdateManyWithWhereWithoutLevelInput = {
    where: MasterProfessionScalarWhereInput
    data: XOR<MasterProfessionUpdateManyMutationInput, MasterProfessionUncheckedUpdateManyWithoutLevelInput>
  }

  export type ProfessionLevelUpsertWithWhereUniqueWithoutLevelInput = {
    where: ProfessionLevelWhereUniqueInput
    update: XOR<ProfessionLevelUpdateWithoutLevelInput, ProfessionLevelUncheckedUpdateWithoutLevelInput>
    create: XOR<ProfessionLevelCreateWithoutLevelInput, ProfessionLevelUncheckedCreateWithoutLevelInput>
  }

  export type ProfessionLevelUpdateWithWhereUniqueWithoutLevelInput = {
    where: ProfessionLevelWhereUniqueInput
    data: XOR<ProfessionLevelUpdateWithoutLevelInput, ProfessionLevelUncheckedUpdateWithoutLevelInput>
  }

  export type ProfessionLevelUpdateManyWithWhereWithoutLevelInput = {
    where: ProfessionLevelScalarWhereInput
    data: XOR<ProfessionLevelUpdateManyMutationInput, ProfessionLevelUncheckedUpdateManyWithoutLevelInput>
  }

  export type ProfessionLevelScalarWhereInput = {
    AND?: ProfessionLevelScalarWhereInput | ProfessionLevelScalarWhereInput[]
    OR?: ProfessionLevelScalarWhereInput[]
    NOT?: ProfessionLevelScalarWhereInput | ProfessionLevelScalarWhereInput[]
    id?: StringFilter<"ProfessionLevel"> | string
    professionId?: StringFilter<"ProfessionLevel"> | string
    levelId?: StringFilter<"ProfessionLevel"> | string
    minWorkingHours?: IntFilter<"ProfessionLevel"> | number
    priceHourly?: DecimalFilter<"ProfessionLevel"> | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFilter<"ProfessionLevel"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"ProfessionLevel"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionLevel"> | Date | string
  }

  export type OrderProductUpsertWithWhereUniqueWithoutLevelInput = {
    where: OrderProductWhereUniqueInput
    update: XOR<OrderProductUpdateWithoutLevelInput, OrderProductUncheckedUpdateWithoutLevelInput>
    create: XOR<OrderProductCreateWithoutLevelInput, OrderProductUncheckedCreateWithoutLevelInput>
  }

  export type OrderProductUpdateWithWhereUniqueWithoutLevelInput = {
    where: OrderProductWhereUniqueInput
    data: XOR<OrderProductUpdateWithoutLevelInput, OrderProductUncheckedUpdateWithoutLevelInput>
  }

  export type OrderProductUpdateManyWithWhereWithoutLevelInput = {
    where: OrderProductScalarWhereInput
    data: XOR<OrderProductUpdateManyMutationInput, OrderProductUncheckedUpdateManyWithoutLevelInput>
  }

  export type BasketUpsertWithWhereUniqueWithoutLevelInput = {
    where: BasketWhereUniqueInput
    update: XOR<BasketUpdateWithoutLevelInput, BasketUncheckedUpdateWithoutLevelInput>
    create: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput>
  }

  export type BasketUpdateWithWhereUniqueWithoutLevelInput = {
    where: BasketWhereUniqueInput
    data: XOR<BasketUpdateWithoutLevelInput, BasketUncheckedUpdateWithoutLevelInput>
  }

  export type BasketUpdateManyWithWhereWithoutLevelInput = {
    where: BasketScalarWhereInput
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyWithoutLevelInput>
  }

  export type MasterProfessionCreateWithoutProfessionInput = {
    id?: string
    minWorkingHours?: number | null
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    experience: number
    createdAt?: Date | string
    updatedAt?: Date | string
    level?: LevelCreateNestedOneWithoutMasterProfessionsInput
    master?: MasterCreateNestedOneWithoutMasterProfessionsInput
  }

  export type MasterProfessionUncheckedCreateWithoutProfessionInput = {
    id?: string
    minWorkingHours?: number | null
    levelId?: string | null
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    experience: number
    masterId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterProfessionCreateOrConnectWithoutProfessionInput = {
    where: MasterProfessionWhereUniqueInput
    create: XOR<MasterProfessionCreateWithoutProfessionInput, MasterProfessionUncheckedCreateWithoutProfessionInput>
  }

  export type MasterProfessionCreateManyProfessionInputEnvelope = {
    data: MasterProfessionCreateManyProfessionInput | MasterProfessionCreateManyProfessionInput[]
    skipDuplicates?: boolean
  }

  export type ProfessionLevelCreateWithoutProfessionInput = {
    id?: string
    minWorkingHours: number
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    level: LevelCreateNestedOneWithoutProfessionLevelsInput
  }

  export type ProfessionLevelUncheckedCreateWithoutProfessionInput = {
    id?: string
    levelId: string
    minWorkingHours: number
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionLevelCreateOrConnectWithoutProfessionInput = {
    where: ProfessionLevelWhereUniqueInput
    create: XOR<ProfessionLevelCreateWithoutProfessionInput, ProfessionLevelUncheckedCreateWithoutProfessionInput>
  }

  export type ProfessionLevelCreateManyProfessionInputEnvelope = {
    data: ProfessionLevelCreateManyProfessionInput | ProfessionLevelCreateManyProfessionInput[]
    skipDuplicates?: boolean
  }

  export type ProfessionToolCreateWithoutProfessionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tool: ToolCreateNestedOneWithoutProfessionToolsInput
  }

  export type ProfessionToolUncheckedCreateWithoutProfessionInput = {
    id?: string
    toolId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionToolCreateOrConnectWithoutProfessionInput = {
    where: ProfessionToolWhereUniqueInput
    create: XOR<ProfessionToolCreateWithoutProfessionInput, ProfessionToolUncheckedCreateWithoutProfessionInput>
  }

  export type ProfessionToolCreateManyProfessionInputEnvelope = {
    data: ProfessionToolCreateManyProfessionInput | ProfessionToolCreateManyProfessionInput[]
    skipDuplicates?: boolean
  }

  export type OrderProductCreateWithoutProfessionInput = {
    id?: string
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutOrderProductsInput
    tool?: ToolCreateNestedOneWithoutOrderProductsInput
    level?: LevelCreateNestedOneWithoutOrderProductLevelInput
  }

  export type OrderProductUncheckedCreateWithoutProfessionInput = {
    id?: string
    orderId: string
    toolId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderProductCreateOrConnectWithoutProfessionInput = {
    where: OrderProductWhereUniqueInput
    create: XOR<OrderProductCreateWithoutProfessionInput, OrderProductUncheckedCreateWithoutProfessionInput>
  }

  export type OrderProductCreateManyProfessionInputEnvelope = {
    data: OrderProductCreateManyProfessionInput | OrderProductCreateManyProfessionInput[]
    skipDuplicates?: boolean
  }

  export type BasketCreateWithoutProfessionInput = {
    id?: string
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutBasketInput
    tool?: ToolCreateNestedOneWithoutBasketInput
    level?: LevelCreateNestedOneWithoutBasketInput
  }

  export type BasketUncheckedCreateWithoutProfessionInput = {
    id?: string
    ownerId: string
    toolId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BasketCreateOrConnectWithoutProfessionInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutProfessionInput, BasketUncheckedCreateWithoutProfessionInput>
  }

  export type BasketCreateManyProfessionInputEnvelope = {
    data: BasketCreateManyProfessionInput | BasketCreateManyProfessionInput[]
    skipDuplicates?: boolean
  }

  export type MasterProfessionUpsertWithWhereUniqueWithoutProfessionInput = {
    where: MasterProfessionWhereUniqueInput
    update: XOR<MasterProfessionUpdateWithoutProfessionInput, MasterProfessionUncheckedUpdateWithoutProfessionInput>
    create: XOR<MasterProfessionCreateWithoutProfessionInput, MasterProfessionUncheckedCreateWithoutProfessionInput>
  }

  export type MasterProfessionUpdateWithWhereUniqueWithoutProfessionInput = {
    where: MasterProfessionWhereUniqueInput
    data: XOR<MasterProfessionUpdateWithoutProfessionInput, MasterProfessionUncheckedUpdateWithoutProfessionInput>
  }

  export type MasterProfessionUpdateManyWithWhereWithoutProfessionInput = {
    where: MasterProfessionScalarWhereInput
    data: XOR<MasterProfessionUpdateManyMutationInput, MasterProfessionUncheckedUpdateManyWithoutProfessionInput>
  }

  export type ProfessionLevelUpsertWithWhereUniqueWithoutProfessionInput = {
    where: ProfessionLevelWhereUniqueInput
    update: XOR<ProfessionLevelUpdateWithoutProfessionInput, ProfessionLevelUncheckedUpdateWithoutProfessionInput>
    create: XOR<ProfessionLevelCreateWithoutProfessionInput, ProfessionLevelUncheckedCreateWithoutProfessionInput>
  }

  export type ProfessionLevelUpdateWithWhereUniqueWithoutProfessionInput = {
    where: ProfessionLevelWhereUniqueInput
    data: XOR<ProfessionLevelUpdateWithoutProfessionInput, ProfessionLevelUncheckedUpdateWithoutProfessionInput>
  }

  export type ProfessionLevelUpdateManyWithWhereWithoutProfessionInput = {
    where: ProfessionLevelScalarWhereInput
    data: XOR<ProfessionLevelUpdateManyMutationInput, ProfessionLevelUncheckedUpdateManyWithoutProfessionInput>
  }

  export type ProfessionToolUpsertWithWhereUniqueWithoutProfessionInput = {
    where: ProfessionToolWhereUniqueInput
    update: XOR<ProfessionToolUpdateWithoutProfessionInput, ProfessionToolUncheckedUpdateWithoutProfessionInput>
    create: XOR<ProfessionToolCreateWithoutProfessionInput, ProfessionToolUncheckedCreateWithoutProfessionInput>
  }

  export type ProfessionToolUpdateWithWhereUniqueWithoutProfessionInput = {
    where: ProfessionToolWhereUniqueInput
    data: XOR<ProfessionToolUpdateWithoutProfessionInput, ProfessionToolUncheckedUpdateWithoutProfessionInput>
  }

  export type ProfessionToolUpdateManyWithWhereWithoutProfessionInput = {
    where: ProfessionToolScalarWhereInput
    data: XOR<ProfessionToolUpdateManyMutationInput, ProfessionToolUncheckedUpdateManyWithoutProfessionInput>
  }

  export type OrderProductUpsertWithWhereUniqueWithoutProfessionInput = {
    where: OrderProductWhereUniqueInput
    update: XOR<OrderProductUpdateWithoutProfessionInput, OrderProductUncheckedUpdateWithoutProfessionInput>
    create: XOR<OrderProductCreateWithoutProfessionInput, OrderProductUncheckedCreateWithoutProfessionInput>
  }

  export type OrderProductUpdateWithWhereUniqueWithoutProfessionInput = {
    where: OrderProductWhereUniqueInput
    data: XOR<OrderProductUpdateWithoutProfessionInput, OrderProductUncheckedUpdateWithoutProfessionInput>
  }

  export type OrderProductUpdateManyWithWhereWithoutProfessionInput = {
    where: OrderProductScalarWhereInput
    data: XOR<OrderProductUpdateManyMutationInput, OrderProductUncheckedUpdateManyWithoutProfessionInput>
  }

  export type BasketUpsertWithWhereUniqueWithoutProfessionInput = {
    where: BasketWhereUniqueInput
    update: XOR<BasketUpdateWithoutProfessionInput, BasketUncheckedUpdateWithoutProfessionInput>
    create: XOR<BasketCreateWithoutProfessionInput, BasketUncheckedCreateWithoutProfessionInput>
  }

  export type BasketUpdateWithWhereUniqueWithoutProfessionInput = {
    where: BasketWhereUniqueInput
    data: XOR<BasketUpdateWithoutProfessionInput, BasketUncheckedUpdateWithoutProfessionInput>
  }

  export type BasketUpdateManyWithWhereWithoutProfessionInput = {
    where: BasketScalarWhereInput
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyWithoutProfessionInput>
  }

  export type ProfessionCreateWithoutProfessionLevelsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    img: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionCreateNestedManyWithoutProfessionInput
    professionTools?: ProfessionToolCreateNestedManyWithoutProfessionInput
    orderProducts?: OrderProductCreateNestedManyWithoutProfessionInput
    basket?: BasketCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionUncheckedCreateWithoutProfessionLevelsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    img: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionUncheckedCreateNestedManyWithoutProfessionInput
    professionTools?: ProfessionToolUncheckedCreateNestedManyWithoutProfessionInput
    orderProducts?: OrderProductUncheckedCreateNestedManyWithoutProfessionInput
    basket?: BasketUncheckedCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionCreateOrConnectWithoutProfessionLevelsInput = {
    where: ProfessionWhereUniqueInput
    create: XOR<ProfessionCreateWithoutProfessionLevelsInput, ProfessionUncheckedCreateWithoutProfessionLevelsInput>
  }

  export type LevelCreateWithoutProfessionLevelsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionCreateNestedManyWithoutLevelInput
    orderProductLevel?: OrderProductCreateNestedManyWithoutLevelInput
    basket?: BasketCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutProfessionLevelsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionUncheckedCreateNestedManyWithoutLevelInput
    orderProductLevel?: OrderProductUncheckedCreateNestedManyWithoutLevelInput
    basket?: BasketUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutProfessionLevelsInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutProfessionLevelsInput, LevelUncheckedCreateWithoutProfessionLevelsInput>
  }

  export type ProfessionUpsertWithoutProfessionLevelsInput = {
    update: XOR<ProfessionUpdateWithoutProfessionLevelsInput, ProfessionUncheckedUpdateWithoutProfessionLevelsInput>
    create: XOR<ProfessionCreateWithoutProfessionLevelsInput, ProfessionUncheckedCreateWithoutProfessionLevelsInput>
    where?: ProfessionWhereInput
  }

  export type ProfessionUpdateToOneWithWhereWithoutProfessionLevelsInput = {
    where?: ProfessionWhereInput
    data: XOR<ProfessionUpdateWithoutProfessionLevelsInput, ProfessionUncheckedUpdateWithoutProfessionLevelsInput>
  }

  export type ProfessionUpdateWithoutProfessionLevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUpdateManyWithoutProfessionNestedInput
    professionTools?: ProfessionToolUpdateManyWithoutProfessionNestedInput
    orderProducts?: OrderProductUpdateManyWithoutProfessionNestedInput
    basket?: BasketUpdateManyWithoutProfessionNestedInput
  }

  export type ProfessionUncheckedUpdateWithoutProfessionLevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUncheckedUpdateManyWithoutProfessionNestedInput
    professionTools?: ProfessionToolUncheckedUpdateManyWithoutProfessionNestedInput
    orderProducts?: OrderProductUncheckedUpdateManyWithoutProfessionNestedInput
    basket?: BasketUncheckedUpdateManyWithoutProfessionNestedInput
  }

  export type LevelUpsertWithoutProfessionLevelsInput = {
    update: XOR<LevelUpdateWithoutProfessionLevelsInput, LevelUncheckedUpdateWithoutProfessionLevelsInput>
    create: XOR<LevelCreateWithoutProfessionLevelsInput, LevelUncheckedCreateWithoutProfessionLevelsInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutProfessionLevelsInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutProfessionLevelsInput, LevelUncheckedUpdateWithoutProfessionLevelsInput>
  }

  export type LevelUpdateWithoutProfessionLevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUpdateManyWithoutLevelNestedInput
    orderProductLevel?: OrderProductUpdateManyWithoutLevelNestedInput
    basket?: BasketUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutProfessionLevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUncheckedUpdateManyWithoutLevelNestedInput
    orderProductLevel?: OrderProductUncheckedUpdateManyWithoutLevelNestedInput
    basket?: BasketUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type ProfessionCreateWithoutProfessionToolsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    img: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionCreateNestedManyWithoutProfessionInput
    professionLevels?: ProfessionLevelCreateNestedManyWithoutProfessionInput
    orderProducts?: OrderProductCreateNestedManyWithoutProfessionInput
    basket?: BasketCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionUncheckedCreateWithoutProfessionToolsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    img: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionUncheckedCreateNestedManyWithoutProfessionInput
    professionLevels?: ProfessionLevelUncheckedCreateNestedManyWithoutProfessionInput
    orderProducts?: OrderProductUncheckedCreateNestedManyWithoutProfessionInput
    basket?: BasketUncheckedCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionCreateOrConnectWithoutProfessionToolsInput = {
    where: ProfessionWhereUniqueInput
    create: XOR<ProfessionCreateWithoutProfessionToolsInput, ProfessionUncheckedCreateWithoutProfessionToolsInput>
  }

  export type ToolCreateWithoutProfessionToolsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: BrandCreateNestedOneWithoutToolsInput
    power?: PowerCreateNestedOneWithoutToolsInput
    size?: SizeCreateNestedOneWithoutToolsInput
    orderProducts?: OrderProductCreateNestedManyWithoutToolInput
    basket?: BasketCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutProfessionToolsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    brandId?: string | null
    powerId?: string | null
    sizeId?: string | null
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: OrderProductUncheckedCreateNestedManyWithoutToolInput
    basket?: BasketUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutProfessionToolsInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutProfessionToolsInput, ToolUncheckedCreateWithoutProfessionToolsInput>
  }

  export type ProfessionUpsertWithoutProfessionToolsInput = {
    update: XOR<ProfessionUpdateWithoutProfessionToolsInput, ProfessionUncheckedUpdateWithoutProfessionToolsInput>
    create: XOR<ProfessionCreateWithoutProfessionToolsInput, ProfessionUncheckedCreateWithoutProfessionToolsInput>
    where?: ProfessionWhereInput
  }

  export type ProfessionUpdateToOneWithWhereWithoutProfessionToolsInput = {
    where?: ProfessionWhereInput
    data: XOR<ProfessionUpdateWithoutProfessionToolsInput, ProfessionUncheckedUpdateWithoutProfessionToolsInput>
  }

  export type ProfessionUpdateWithoutProfessionToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUpdateManyWithoutProfessionNestedInput
    professionLevels?: ProfessionLevelUpdateManyWithoutProfessionNestedInput
    orderProducts?: OrderProductUpdateManyWithoutProfessionNestedInput
    basket?: BasketUpdateManyWithoutProfessionNestedInput
  }

  export type ProfessionUncheckedUpdateWithoutProfessionToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUncheckedUpdateManyWithoutProfessionNestedInput
    professionLevels?: ProfessionLevelUncheckedUpdateManyWithoutProfessionNestedInput
    orderProducts?: OrderProductUncheckedUpdateManyWithoutProfessionNestedInput
    basket?: BasketUncheckedUpdateManyWithoutProfessionNestedInput
  }

  export type ToolUpsertWithoutProfessionToolsInput = {
    update: XOR<ToolUpdateWithoutProfessionToolsInput, ToolUncheckedUpdateWithoutProfessionToolsInput>
    create: XOR<ToolCreateWithoutProfessionToolsInput, ToolUncheckedCreateWithoutProfessionToolsInput>
    where?: ToolWhereInput
  }

  export type ToolUpdateToOneWithWhereWithoutProfessionToolsInput = {
    where?: ToolWhereInput
    data: XOR<ToolUpdateWithoutProfessionToolsInput, ToolUncheckedUpdateWithoutProfessionToolsInput>
  }

  export type ToolUpdateWithoutProfessionToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneWithoutToolsNestedInput
    power?: PowerUpdateOneWithoutToolsNestedInput
    size?: SizeUpdateOneWithoutToolsNestedInput
    orderProducts?: OrderProductUpdateManyWithoutToolNestedInput
    basket?: BasketUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutProfessionToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    powerId?: NullableStringFieldUpdateOperationsInput | string | null
    sizeId?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: OrderProductUncheckedUpdateManyWithoutToolNestedInput
    basket?: BasketUncheckedUpdateManyWithoutToolNestedInput
  }

  export type OrderProductCreateWithoutOrderInput = {
    id?: string
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    profession?: ProfessionCreateNestedOneWithoutOrderProductsInput
    tool?: ToolCreateNestedOneWithoutOrderProductsInput
    level?: LevelCreateNestedOneWithoutOrderProductLevelInput
  }

  export type OrderProductUncheckedCreateWithoutOrderInput = {
    id?: string
    professionId?: string | null
    toolId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderProductCreateOrConnectWithoutOrderInput = {
    where: OrderProductWhereUniqueInput
    create: XOR<OrderProductCreateWithoutOrderInput, OrderProductUncheckedCreateWithoutOrderInput>
  }

  export type OrderProductCreateManyOrderInputEnvelope = {
    data: OrderProductCreateManyOrderInput | OrderProductCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutOrderInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCommentInput
    MasterRatings?: MasterRatingsCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutOrderInput = {
    id?: string
    message: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MasterRatings?: MasterRatingsUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutOrderInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput>
  }

  export type CommentCreateManyOrderInputEnvelope = {
    data: CommentCreateManyOrderInput | CommentCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type OrderMasterCreateWithoutOrderInput = {
    id?: string
    master: MasterCreateNestedOneWithoutOrdermastersInput
  }

  export type OrderMasterUncheckedCreateWithoutOrderInput = {
    id?: string
    masterid: string
  }

  export type OrderMasterCreateOrConnectWithoutOrderInput = {
    where: OrderMasterWhereUniqueInput
    create: XOR<OrderMasterCreateWithoutOrderInput, OrderMasterUncheckedCreateWithoutOrderInput>
  }

  export type OrderMasterCreateManyOrderInputEnvelope = {
    data: OrderMasterCreateManyOrderInput | OrderMasterCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutOrderInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: RegionCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    companies?: CompanyCreateNestedManyWithoutOwnerInput
    contact?: ContactCreateNestedManyWithoutUserInput
    basket?: BasketCreateNestedManyWithoutOwnerInput
    comment?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrderInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    regionId?: string | null
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companies?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    contact?: ContactUncheckedCreateNestedManyWithoutUserInput
    basket?: BasketUncheckedCreateNestedManyWithoutOwnerInput
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
  }

  export type OrderProductUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderProductWhereUniqueInput
    update: XOR<OrderProductUpdateWithoutOrderInput, OrderProductUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderProductCreateWithoutOrderInput, OrderProductUncheckedCreateWithoutOrderInput>
  }

  export type OrderProductUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderProductWhereUniqueInput
    data: XOR<OrderProductUpdateWithoutOrderInput, OrderProductUncheckedUpdateWithoutOrderInput>
  }

  export type OrderProductUpdateManyWithWhereWithoutOrderInput = {
    where: OrderProductScalarWhereInput
    data: XOR<OrderProductUpdateManyMutationInput, OrderProductUncheckedUpdateManyWithoutOrderInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutOrderInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutOrderInput, CommentUncheckedUpdateWithoutOrderInput>
    create: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutOrderInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutOrderInput, CommentUncheckedUpdateWithoutOrderInput>
  }

  export type CommentUpdateManyWithWhereWithoutOrderInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderMasterUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderMasterWhereUniqueInput
    update: XOR<OrderMasterUpdateWithoutOrderInput, OrderMasterUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderMasterCreateWithoutOrderInput, OrderMasterUncheckedCreateWithoutOrderInput>
  }

  export type OrderMasterUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderMasterWhereUniqueInput
    data: XOR<OrderMasterUpdateWithoutOrderInput, OrderMasterUncheckedUpdateWithoutOrderInput>
  }

  export type OrderMasterUpdateManyWithWhereWithoutOrderInput = {
    where: OrderMasterScalarWhereInput
    data: XOR<OrderMasterUpdateManyMutationInput, OrderMasterUncheckedUpdateManyWithoutOrderInput>
  }

  export type UserUpsertWithoutOrderInput = {
    update: XOR<UserUpdateWithoutOrderInput, UserUncheckedUpdateWithoutOrderInput>
    create: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrderInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrderInput, UserUncheckedUpdateWithoutOrderInput>
  }

  export type UserUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companies?: CompanyUpdateManyWithoutOwnerNestedInput
    contact?: ContactUpdateManyWithoutUserNestedInput
    basket?: BasketUpdateManyWithoutOwnerNestedInput
    comment?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    contact?: ContactUncheckedUpdateManyWithoutUserNestedInput
    basket?: BasketUncheckedUpdateManyWithoutOwnerNestedInput
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderCreateWithoutOrderProductsInput = {
    id?: string
    address: string
    latitude: string
    longitude: string
    date: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
    isPaid?: boolean
    paymentType?: $Enums.PaymentType
    withDelivery: boolean
    status?: $Enums.OrderStatus
    deliveryComment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentCreateNestedManyWithoutOrderInput
    masters?: OrderMasterCreateNestedManyWithoutOrderInput
    owner: UserCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOrderProductsInput = {
    id?: string
    ownerId: string
    address: string
    latitude: string
    longitude: string
    date: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
    isPaid?: boolean
    paymentType?: $Enums.PaymentType
    withDelivery: boolean
    status?: $Enums.OrderStatus
    deliveryComment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutOrderInput
    masters?: OrderMasterUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOrderProductsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrderProductsInput, OrderUncheckedCreateWithoutOrderProductsInput>
  }

  export type ProfessionCreateWithoutOrderProductsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    img: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionCreateNestedManyWithoutProfessionInput
    professionLevels?: ProfessionLevelCreateNestedManyWithoutProfessionInput
    professionTools?: ProfessionToolCreateNestedManyWithoutProfessionInput
    basket?: BasketCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionUncheckedCreateWithoutOrderProductsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    img: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionUncheckedCreateNestedManyWithoutProfessionInput
    professionLevels?: ProfessionLevelUncheckedCreateNestedManyWithoutProfessionInput
    professionTools?: ProfessionToolUncheckedCreateNestedManyWithoutProfessionInput
    basket?: BasketUncheckedCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionCreateOrConnectWithoutOrderProductsInput = {
    where: ProfessionWhereUniqueInput
    create: XOR<ProfessionCreateWithoutOrderProductsInput, ProfessionUncheckedCreateWithoutOrderProductsInput>
  }

  export type ToolCreateWithoutOrderProductsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: BrandCreateNestedOneWithoutToolsInput
    power?: PowerCreateNestedOneWithoutToolsInput
    size?: SizeCreateNestedOneWithoutToolsInput
    professionTools?: ProfessionToolCreateNestedManyWithoutToolInput
    basket?: BasketCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutOrderProductsInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    brandId?: string | null
    powerId?: string | null
    sizeId?: string | null
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    professionTools?: ProfessionToolUncheckedCreateNestedManyWithoutToolInput
    basket?: BasketUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutOrderProductsInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutOrderProductsInput, ToolUncheckedCreateWithoutOrderProductsInput>
  }

  export type LevelCreateWithoutOrderProductLevelInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionCreateNestedManyWithoutLevelInput
    professionLevels?: ProfessionLevelCreateNestedManyWithoutLevelInput
    basket?: BasketCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutOrderProductLevelInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionUncheckedCreateNestedManyWithoutLevelInput
    professionLevels?: ProfessionLevelUncheckedCreateNestedManyWithoutLevelInput
    basket?: BasketUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutOrderProductLevelInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutOrderProductLevelInput, LevelUncheckedCreateWithoutOrderProductLevelInput>
  }

  export type OrderUpsertWithoutOrderProductsInput = {
    update: XOR<OrderUpdateWithoutOrderProductsInput, OrderUncheckedUpdateWithoutOrderProductsInput>
    create: XOR<OrderCreateWithoutOrderProductsInput, OrderUncheckedCreateWithoutOrderProductsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrderProductsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrderProductsInput, OrderUncheckedUpdateWithoutOrderProductsInput>
  }

  export type OrderUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
    longitude?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    deliveryComment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUpdateManyWithoutOrderNestedInput
    masters?: OrderMasterUpdateManyWithoutOrderNestedInput
    owner?: UserUpdateOneRequiredWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
    longitude?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    deliveryComment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutOrderNestedInput
    masters?: OrderMasterUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type ProfessionUpsertWithoutOrderProductsInput = {
    update: XOR<ProfessionUpdateWithoutOrderProductsInput, ProfessionUncheckedUpdateWithoutOrderProductsInput>
    create: XOR<ProfessionCreateWithoutOrderProductsInput, ProfessionUncheckedCreateWithoutOrderProductsInput>
    where?: ProfessionWhereInput
  }

  export type ProfessionUpdateToOneWithWhereWithoutOrderProductsInput = {
    where?: ProfessionWhereInput
    data: XOR<ProfessionUpdateWithoutOrderProductsInput, ProfessionUncheckedUpdateWithoutOrderProductsInput>
  }

  export type ProfessionUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUpdateManyWithoutProfessionNestedInput
    professionLevels?: ProfessionLevelUpdateManyWithoutProfessionNestedInput
    professionTools?: ProfessionToolUpdateManyWithoutProfessionNestedInput
    basket?: BasketUpdateManyWithoutProfessionNestedInput
  }

  export type ProfessionUncheckedUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUncheckedUpdateManyWithoutProfessionNestedInput
    professionLevels?: ProfessionLevelUncheckedUpdateManyWithoutProfessionNestedInput
    professionTools?: ProfessionToolUncheckedUpdateManyWithoutProfessionNestedInput
    basket?: BasketUncheckedUpdateManyWithoutProfessionNestedInput
  }

  export type ToolUpsertWithoutOrderProductsInput = {
    update: XOR<ToolUpdateWithoutOrderProductsInput, ToolUncheckedUpdateWithoutOrderProductsInput>
    create: XOR<ToolCreateWithoutOrderProductsInput, ToolUncheckedCreateWithoutOrderProductsInput>
    where?: ToolWhereInput
  }

  export type ToolUpdateToOneWithWhereWithoutOrderProductsInput = {
    where?: ToolWhereInput
    data: XOR<ToolUpdateWithoutOrderProductsInput, ToolUncheckedUpdateWithoutOrderProductsInput>
  }

  export type ToolUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneWithoutToolsNestedInput
    power?: PowerUpdateOneWithoutToolsNestedInput
    size?: SizeUpdateOneWithoutToolsNestedInput
    professionTools?: ProfessionToolUpdateManyWithoutToolNestedInput
    basket?: BasketUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    powerId?: NullableStringFieldUpdateOperationsInput | string | null
    sizeId?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professionTools?: ProfessionToolUncheckedUpdateManyWithoutToolNestedInput
    basket?: BasketUncheckedUpdateManyWithoutToolNestedInput
  }

  export type LevelUpsertWithoutOrderProductLevelInput = {
    update: XOR<LevelUpdateWithoutOrderProductLevelInput, LevelUncheckedUpdateWithoutOrderProductLevelInput>
    create: XOR<LevelCreateWithoutOrderProductLevelInput, LevelUncheckedCreateWithoutOrderProductLevelInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutOrderProductLevelInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutOrderProductLevelInput, LevelUncheckedUpdateWithoutOrderProductLevelInput>
  }

  export type LevelUpdateWithoutOrderProductLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUpdateManyWithoutLevelNestedInput
    professionLevels?: ProfessionLevelUpdateManyWithoutLevelNestedInput
    basket?: BasketUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutOrderProductLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUncheckedUpdateManyWithoutLevelNestedInput
    professionLevels?: ProfessionLevelUncheckedUpdateManyWithoutLevelNestedInput
    basket?: BasketUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type OrderCreateWithoutMastersInput = {
    id?: string
    address: string
    latitude: string
    longitude: string
    date: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
    isPaid?: boolean
    paymentType?: $Enums.PaymentType
    withDelivery: boolean
    status?: $Enums.OrderStatus
    deliveryComment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: OrderProductCreateNestedManyWithoutOrderInput
    comments?: CommentCreateNestedManyWithoutOrderInput
    owner: UserCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutMastersInput = {
    id?: string
    ownerId: string
    address: string
    latitude: string
    longitude: string
    date: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
    isPaid?: boolean
    paymentType?: $Enums.PaymentType
    withDelivery: boolean
    status?: $Enums.OrderStatus
    deliveryComment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: OrderProductUncheckedCreateNestedManyWithoutOrderInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutMastersInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutMastersInput, OrderUncheckedCreateWithoutMastersInput>
  }

  export type MasterCreateWithoutOrdermastersInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    isActive?: boolean
    birthYear: number
    img: string
    passportImg: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionCreateNestedManyWithoutMasterInput
    masterRating?: MasterRatingsCreateNestedManyWithoutMasterInput
  }

  export type MasterUncheckedCreateWithoutOrdermastersInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    isActive?: boolean
    birthYear: number
    img: string
    passportImg: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionUncheckedCreateNestedManyWithoutMasterInput
    masterRating?: MasterRatingsUncheckedCreateNestedManyWithoutMasterInput
  }

  export type MasterCreateOrConnectWithoutOrdermastersInput = {
    where: MasterWhereUniqueInput
    create: XOR<MasterCreateWithoutOrdermastersInput, MasterUncheckedCreateWithoutOrdermastersInput>
  }

  export type OrderUpsertWithoutMastersInput = {
    update: XOR<OrderUpdateWithoutMastersInput, OrderUncheckedUpdateWithoutMastersInput>
    create: XOR<OrderCreateWithoutMastersInput, OrderUncheckedCreateWithoutMastersInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutMastersInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutMastersInput, OrderUncheckedUpdateWithoutMastersInput>
  }

  export type OrderUpdateWithoutMastersInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
    longitude?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    deliveryComment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: OrderProductUpdateManyWithoutOrderNestedInput
    comments?: CommentUpdateManyWithoutOrderNestedInput
    owner?: UserUpdateOneRequiredWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutMastersInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
    longitude?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    deliveryComment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: OrderProductUncheckedUpdateManyWithoutOrderNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type MasterUpsertWithoutOrdermastersInput = {
    update: XOR<MasterUpdateWithoutOrdermastersInput, MasterUncheckedUpdateWithoutOrdermastersInput>
    create: XOR<MasterCreateWithoutOrdermastersInput, MasterUncheckedCreateWithoutOrdermastersInput>
    where?: MasterWhereInput
  }

  export type MasterUpdateToOneWithWhereWithoutOrdermastersInput = {
    where?: MasterWhereInput
    data: XOR<MasterUpdateWithoutOrdermastersInput, MasterUncheckedUpdateWithoutOrdermastersInput>
  }

  export type MasterUpdateWithoutOrdermastersInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    birthYear?: IntFieldUpdateOperationsInput | number
    img?: StringFieldUpdateOperationsInput | string
    passportImg?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUpdateManyWithoutMasterNestedInput
    masterRating?: MasterRatingsUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateWithoutOrdermastersInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    birthYear?: IntFieldUpdateOperationsInput | number
    img?: StringFieldUpdateOperationsInput | string
    passportImg?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUncheckedUpdateManyWithoutMasterNestedInput
    masterRating?: MasterRatingsUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type UserCreateWithoutBasketInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: RegionCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    companies?: CompanyCreateNestedManyWithoutOwnerInput
    order?: OrderCreateNestedManyWithoutOwnerInput
    contact?: ContactCreateNestedManyWithoutUserInput
    comment?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBasketInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    regionId?: string | null
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companies?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    order?: OrderUncheckedCreateNestedManyWithoutOwnerInput
    contact?: ContactUncheckedCreateNestedManyWithoutUserInput
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBasketInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBasketInput, UserUncheckedCreateWithoutBasketInput>
  }

  export type ProfessionCreateWithoutBasketInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    img: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionCreateNestedManyWithoutProfessionInput
    professionLevels?: ProfessionLevelCreateNestedManyWithoutProfessionInput
    professionTools?: ProfessionToolCreateNestedManyWithoutProfessionInput
    orderProducts?: OrderProductCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionUncheckedCreateWithoutBasketInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    img: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionUncheckedCreateNestedManyWithoutProfessionInput
    professionLevels?: ProfessionLevelUncheckedCreateNestedManyWithoutProfessionInput
    professionTools?: ProfessionToolUncheckedCreateNestedManyWithoutProfessionInput
    orderProducts?: OrderProductUncheckedCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionCreateOrConnectWithoutBasketInput = {
    where: ProfessionWhereUniqueInput
    create: XOR<ProfessionCreateWithoutBasketInput, ProfessionUncheckedCreateWithoutBasketInput>
  }

  export type ToolCreateWithoutBasketInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: BrandCreateNestedOneWithoutToolsInput
    power?: PowerCreateNestedOneWithoutToolsInput
    size?: SizeCreateNestedOneWithoutToolsInput
    professionTools?: ProfessionToolCreateNestedManyWithoutToolInput
    orderProducts?: OrderProductCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutBasketInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    brandId?: string | null
    powerId?: string | null
    sizeId?: string | null
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    professionTools?: ProfessionToolUncheckedCreateNestedManyWithoutToolInput
    orderProducts?: OrderProductUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutBasketInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutBasketInput, ToolUncheckedCreateWithoutBasketInput>
  }

  export type LevelCreateWithoutBasketInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionCreateNestedManyWithoutLevelInput
    professionLevels?: ProfessionLevelCreateNestedManyWithoutLevelInput
    orderProductLevel?: OrderProductCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutBasketInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionUncheckedCreateNestedManyWithoutLevelInput
    professionLevels?: ProfessionLevelUncheckedCreateNestedManyWithoutLevelInput
    orderProductLevel?: OrderProductUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutBasketInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutBasketInput, LevelUncheckedCreateWithoutBasketInput>
  }

  export type UserUpsertWithoutBasketInput = {
    update: XOR<UserUpdateWithoutBasketInput, UserUncheckedUpdateWithoutBasketInput>
    create: XOR<UserCreateWithoutBasketInput, UserUncheckedCreateWithoutBasketInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBasketInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBasketInput, UserUncheckedUpdateWithoutBasketInput>
  }

  export type UserUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companies?: CompanyUpdateManyWithoutOwnerNestedInput
    order?: OrderUpdateManyWithoutOwnerNestedInput
    contact?: ContactUpdateManyWithoutUserNestedInput
    comment?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    order?: OrderUncheckedUpdateManyWithoutOwnerNestedInput
    contact?: ContactUncheckedUpdateManyWithoutUserNestedInput
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProfessionUpsertWithoutBasketInput = {
    update: XOR<ProfessionUpdateWithoutBasketInput, ProfessionUncheckedUpdateWithoutBasketInput>
    create: XOR<ProfessionCreateWithoutBasketInput, ProfessionUncheckedCreateWithoutBasketInput>
    where?: ProfessionWhereInput
  }

  export type ProfessionUpdateToOneWithWhereWithoutBasketInput = {
    where?: ProfessionWhereInput
    data: XOR<ProfessionUpdateWithoutBasketInput, ProfessionUncheckedUpdateWithoutBasketInput>
  }

  export type ProfessionUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUpdateManyWithoutProfessionNestedInput
    professionLevels?: ProfessionLevelUpdateManyWithoutProfessionNestedInput
    professionTools?: ProfessionToolUpdateManyWithoutProfessionNestedInput
    orderProducts?: OrderProductUpdateManyWithoutProfessionNestedInput
  }

  export type ProfessionUncheckedUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUncheckedUpdateManyWithoutProfessionNestedInput
    professionLevels?: ProfessionLevelUncheckedUpdateManyWithoutProfessionNestedInput
    professionTools?: ProfessionToolUncheckedUpdateManyWithoutProfessionNestedInput
    orderProducts?: OrderProductUncheckedUpdateManyWithoutProfessionNestedInput
  }

  export type ToolUpsertWithoutBasketInput = {
    update: XOR<ToolUpdateWithoutBasketInput, ToolUncheckedUpdateWithoutBasketInput>
    create: XOR<ToolCreateWithoutBasketInput, ToolUncheckedCreateWithoutBasketInput>
    where?: ToolWhereInput
  }

  export type ToolUpdateToOneWithWhereWithoutBasketInput = {
    where?: ToolWhereInput
    data: XOR<ToolUpdateWithoutBasketInput, ToolUncheckedUpdateWithoutBasketInput>
  }

  export type ToolUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneWithoutToolsNestedInput
    power?: PowerUpdateOneWithoutToolsNestedInput
    size?: SizeUpdateOneWithoutToolsNestedInput
    professionTools?: ProfessionToolUpdateManyWithoutToolNestedInput
    orderProducts?: OrderProductUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    powerId?: NullableStringFieldUpdateOperationsInput | string | null
    sizeId?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professionTools?: ProfessionToolUncheckedUpdateManyWithoutToolNestedInput
    orderProducts?: OrderProductUncheckedUpdateManyWithoutToolNestedInput
  }

  export type LevelUpsertWithoutBasketInput = {
    update: XOR<LevelUpdateWithoutBasketInput, LevelUncheckedUpdateWithoutBasketInput>
    create: XOR<LevelCreateWithoutBasketInput, LevelUncheckedCreateWithoutBasketInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutBasketInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutBasketInput, LevelUncheckedUpdateWithoutBasketInput>
  }

  export type LevelUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUpdateManyWithoutLevelNestedInput
    professionLevels?: ProfessionLevelUpdateManyWithoutLevelNestedInput
    orderProductLevel?: OrderProductUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUncheckedUpdateManyWithoutLevelNestedInput
    professionLevels?: ProfessionLevelUncheckedUpdateManyWithoutLevelNestedInput
    orderProductLevel?: OrderProductUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type UserCreateWithoutCommentInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: RegionCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    companies?: CompanyCreateNestedManyWithoutOwnerInput
    order?: OrderCreateNestedManyWithoutOwnerInput
    contact?: ContactCreateNestedManyWithoutUserInput
    basket?: BasketCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutCommentInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    regionId?: string | null
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companies?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    order?: OrderUncheckedCreateNestedManyWithoutOwnerInput
    contact?: ContactUncheckedCreateNestedManyWithoutUserInput
    basket?: BasketUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutCommentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
  }

  export type OrderCreateWithoutCommentsInput = {
    id?: string
    address: string
    latitude: string
    longitude: string
    date: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
    isPaid?: boolean
    paymentType?: $Enums.PaymentType
    withDelivery: boolean
    status?: $Enums.OrderStatus
    deliveryComment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: OrderProductCreateNestedManyWithoutOrderInput
    masters?: OrderMasterCreateNestedManyWithoutOrderInput
    owner: UserCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutCommentsInput = {
    id?: string
    ownerId: string
    address: string
    latitude: string
    longitude: string
    date: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
    isPaid?: boolean
    paymentType?: $Enums.PaymentType
    withDelivery: boolean
    status?: $Enums.OrderStatus
    deliveryComment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: OrderProductUncheckedCreateNestedManyWithoutOrderInput
    masters?: OrderMasterUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutCommentsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutCommentsInput, OrderUncheckedCreateWithoutCommentsInput>
  }

  export type MasterRatingsCreateWithoutCommentInput = {
    id?: string
    star: number
    Master: MasterCreateNestedOneWithoutMasterRatingInput
  }

  export type MasterRatingsUncheckedCreateWithoutCommentInput = {
    id?: string
    star: number
    masterId: string
  }

  export type MasterRatingsCreateOrConnectWithoutCommentInput = {
    where: MasterRatingsWhereUniqueInput
    create: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput>
  }

  export type MasterRatingsCreateManyCommentInputEnvelope = {
    data: MasterRatingsCreateManyCommentInput | MasterRatingsCreateManyCommentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCommentInput = {
    update: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
  }

  export type UserUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companies?: CompanyUpdateManyWithoutOwnerNestedInput
    order?: OrderUpdateManyWithoutOwnerNestedInput
    contact?: ContactUpdateManyWithoutUserNestedInput
    basket?: BasketUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    order?: OrderUncheckedUpdateManyWithoutOwnerNestedInput
    contact?: ContactUncheckedUpdateManyWithoutUserNestedInput
    basket?: BasketUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type OrderUpsertWithoutCommentsInput = {
    update: XOR<OrderUpdateWithoutCommentsInput, OrderUncheckedUpdateWithoutCommentsInput>
    create: XOR<OrderCreateWithoutCommentsInput, OrderUncheckedCreateWithoutCommentsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutCommentsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutCommentsInput, OrderUncheckedUpdateWithoutCommentsInput>
  }

  export type OrderUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
    longitude?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    deliveryComment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: OrderProductUpdateManyWithoutOrderNestedInput
    masters?: OrderMasterUpdateManyWithoutOrderNestedInput
    owner?: UserUpdateOneRequiredWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
    longitude?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    deliveryComment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: OrderProductUncheckedUpdateManyWithoutOrderNestedInput
    masters?: OrderMasterUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type MasterRatingsUpsertWithWhereUniqueWithoutCommentInput = {
    where: MasterRatingsWhereUniqueInput
    update: XOR<MasterRatingsUpdateWithoutCommentInput, MasterRatingsUncheckedUpdateWithoutCommentInput>
    create: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput>
  }

  export type MasterRatingsUpdateWithWhereUniqueWithoutCommentInput = {
    where: MasterRatingsWhereUniqueInput
    data: XOR<MasterRatingsUpdateWithoutCommentInput, MasterRatingsUncheckedUpdateWithoutCommentInput>
  }

  export type MasterRatingsUpdateManyWithWhereWithoutCommentInput = {
    where: MasterRatingsScalarWhereInput
    data: XOR<MasterRatingsUpdateManyMutationInput, MasterRatingsUncheckedUpdateManyWithoutCommentInput>
  }

  export type MasterCreateWithoutMasterRatingInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    isActive?: boolean
    birthYear: number
    img: string
    passportImg: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionCreateNestedManyWithoutMasterInput
    ordermasters?: OrderMasterCreateNestedManyWithoutMasterInput
  }

  export type MasterUncheckedCreateWithoutMasterRatingInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    isActive?: boolean
    birthYear: number
    img: string
    passportImg: string
    about: string
    createdAt?: Date | string
    updatedAt?: Date | string
    masterProfessions?: MasterProfessionUncheckedCreateNestedManyWithoutMasterInput
    ordermasters?: OrderMasterUncheckedCreateNestedManyWithoutMasterInput
  }

  export type MasterCreateOrConnectWithoutMasterRatingInput = {
    where: MasterWhereUniqueInput
    create: XOR<MasterCreateWithoutMasterRatingInput, MasterUncheckedCreateWithoutMasterRatingInput>
  }

  export type CommentCreateWithoutMasterRatingsInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCommentInput
    order: OrderCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutMasterRatingsInput = {
    id?: string
    message: string
    userId: string
    orderId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutMasterRatingsInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutMasterRatingsInput, CommentUncheckedCreateWithoutMasterRatingsInput>
  }

  export type MasterUpsertWithoutMasterRatingInput = {
    update: XOR<MasterUpdateWithoutMasterRatingInput, MasterUncheckedUpdateWithoutMasterRatingInput>
    create: XOR<MasterCreateWithoutMasterRatingInput, MasterUncheckedCreateWithoutMasterRatingInput>
    where?: MasterWhereInput
  }

  export type MasterUpdateToOneWithWhereWithoutMasterRatingInput = {
    where?: MasterWhereInput
    data: XOR<MasterUpdateWithoutMasterRatingInput, MasterUncheckedUpdateWithoutMasterRatingInput>
  }

  export type MasterUpdateWithoutMasterRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    birthYear?: IntFieldUpdateOperationsInput | number
    img?: StringFieldUpdateOperationsInput | string
    passportImg?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUpdateManyWithoutMasterNestedInput
    ordermasters?: OrderMasterUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateWithoutMasterRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    birthYear?: IntFieldUpdateOperationsInput | number
    img?: StringFieldUpdateOperationsInput | string
    passportImg?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterProfessions?: MasterProfessionUncheckedUpdateManyWithoutMasterNestedInput
    ordermasters?: OrderMasterUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type CommentUpsertWithoutMasterRatingsInput = {
    update: XOR<CommentUpdateWithoutMasterRatingsInput, CommentUncheckedUpdateWithoutMasterRatingsInput>
    create: XOR<CommentCreateWithoutMasterRatingsInput, CommentUncheckedCreateWithoutMasterRatingsInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutMasterRatingsInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutMasterRatingsInput, CommentUncheckedUpdateWithoutMasterRatingsInput>
  }

  export type CommentUpdateWithoutMasterRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentNestedInput
    order?: OrderUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutMasterRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutContactInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: RegionCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    companies?: CompanyCreateNestedManyWithoutOwnerInput
    order?: OrderCreateNestedManyWithoutOwnerInput
    basket?: BasketCreateNestedManyWithoutOwnerInput
    comment?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutContactInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    regionId?: string | null
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companies?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    order?: OrderUncheckedCreateNestedManyWithoutOwnerInput
    basket?: BasketUncheckedCreateNestedManyWithoutOwnerInput
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutContactInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContactInput, UserUncheckedCreateWithoutContactInput>
  }

  export type UserUpsertWithoutContactInput = {
    update: XOR<UserUpdateWithoutContactInput, UserUncheckedUpdateWithoutContactInput>
    create: XOR<UserCreateWithoutContactInput, UserUncheckedCreateWithoutContactInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContactInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContactInput, UserUncheckedUpdateWithoutContactInput>
  }

  export type UserUpdateWithoutContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companies?: CompanyUpdateManyWithoutOwnerNestedInput
    order?: OrderUpdateManyWithoutOwnerNestedInput
    basket?: BasketUpdateManyWithoutOwnerNestedInput
    comment?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    order?: OrderUncheckedUpdateManyWithoutOwnerNestedInput
    basket?: BasketUncheckedUpdateManyWithoutOwnerNestedInput
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyRegionInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    password: string
    status?: $Enums.UserStatus
    role?: $Enums.UserRole
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companies?: CompanyUpdateManyWithoutOwnerNestedInput
    order?: OrderUpdateManyWithoutOwnerNestedInput
    contact?: ContactUpdateManyWithoutUserNestedInput
    basket?: BasketUpdateManyWithoutOwnerNestedInput
    comment?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    order?: OrderUncheckedUpdateManyWithoutOwnerNestedInput
    contact?: ContactUncheckedUpdateManyWithoutUserNestedInput
    basket?: BasketUncheckedUpdateManyWithoutOwnerNestedInput
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyUserInput = {
    id?: string
    ip?: string | null
    userAgent?: string | null
    device?: string | null
    brand?: string | null
    model?: string | null
    os?: string | null
    osVersion?: string | null
    client?: string | null
    clientType?: string | null
    clientVersion?: string | null
    isBot?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyCreateManyOwnerInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    taxId?: string | null
    bankCode?: string | null
    bankAccount?: string | null
    bankName?: string | null
    oked?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderCreateManyOwnerInput = {
    id?: string
    address: string
    latitude: string
    longitude: string
    date: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
    isPaid?: boolean
    paymentType?: $Enums.PaymentType
    withDelivery: boolean
    status?: $Enums.OrderStatus
    deliveryComment: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactCreateManyUserInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BasketCreateManyOwnerInput = {
    id?: string
    professionId?: string | null
    toolId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateManyUserInput = {
    id?: string
    message: string
    orderId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    client?: NullableStringFieldUpdateOperationsInput | string | null
    clientType?: NullableStringFieldUpdateOperationsInput | string | null
    clientVersion?: NullableStringFieldUpdateOperationsInput | string | null
    isBot?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    client?: NullableStringFieldUpdateOperationsInput | string | null
    clientType?: NullableStringFieldUpdateOperationsInput | string | null
    clientVersion?: NullableStringFieldUpdateOperationsInput | string | null
    isBot?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    client?: NullableStringFieldUpdateOperationsInput | string | null
    clientType?: NullableStringFieldUpdateOperationsInput | string | null
    clientVersion?: NullableStringFieldUpdateOperationsInput | string | null
    isBot?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    bankCode?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    bankCode?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    bankCode?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
    longitude?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    deliveryComment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: OrderProductUpdateManyWithoutOrderNestedInput
    comments?: CommentUpdateManyWithoutOrderNestedInput
    masters?: OrderMasterUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
    longitude?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    deliveryComment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: OrderProductUncheckedUpdateManyWithoutOrderNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrderNestedInput
    masters?: OrderMasterUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: StringFieldUpdateOperationsInput | string
    longitude?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    deliveryComment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BasketUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: ProfessionUpdateOneWithoutBasketNestedInput
    tool?: ToolUpdateOneWithoutBasketNestedInput
    level?: LevelUpdateOneWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BasketUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutCommentsNestedInput
    MasterRatings?: MasterRatingsUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MasterRatings?: MasterRatingsUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ToolCreateManyBrandInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    powerId?: string | null
    sizeId?: string | null
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ToolUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    power?: PowerUpdateOneWithoutToolsNestedInput
    size?: SizeUpdateOneWithoutToolsNestedInput
    professionTools?: ProfessionToolUpdateManyWithoutToolNestedInput
    orderProducts?: OrderProductUpdateManyWithoutToolNestedInput
    basket?: BasketUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    powerId?: NullableStringFieldUpdateOperationsInput | string | null
    sizeId?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professionTools?: ProfessionToolUncheckedUpdateManyWithoutToolNestedInput
    orderProducts?: OrderProductUncheckedUpdateManyWithoutToolNestedInput
    basket?: BasketUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    powerId?: NullableStringFieldUpdateOperationsInput | string | null
    sizeId?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ToolCreateManySizeInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    brandId?: string | null
    powerId?: string | null
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ToolUpdateWithoutSizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneWithoutToolsNestedInput
    power?: PowerUpdateOneWithoutToolsNestedInput
    professionTools?: ProfessionToolUpdateManyWithoutToolNestedInput
    orderProducts?: OrderProductUpdateManyWithoutToolNestedInput
    basket?: BasketUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutSizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    powerId?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professionTools?: ProfessionToolUncheckedUpdateManyWithoutToolNestedInput
    orderProducts?: OrderProductUncheckedUpdateManyWithoutToolNestedInput
    basket?: BasketUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateManyWithoutSizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    powerId?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ToolCreateManyPowerInput = {
    id?: string
    nameUz: string
    nameRu?: string | null
    nameEn?: string | null
    descriptionUz: string
    descriptionRu?: string | null
    descriptionEn?: string | null
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    code: string
    brandId?: string | null
    sizeId?: string | null
    img: string
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ToolUpdateWithoutPowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneWithoutToolsNestedInput
    size?: SizeUpdateOneWithoutToolsNestedInput
    professionTools?: ProfessionToolUpdateManyWithoutToolNestedInput
    orderProducts?: OrderProductUpdateManyWithoutToolNestedInput
    basket?: BasketUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutPowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    sizeId?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professionTools?: ProfessionToolUncheckedUpdateManyWithoutToolNestedInput
    orderProducts?: OrderProductUncheckedUpdateManyWithoutToolNestedInput
    basket?: BasketUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateManyWithoutPowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRu?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRu?: NullableStringFieldUpdateOperationsInput | string | null
    descriptionEn?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    sizeId?: NullableStringFieldUpdateOperationsInput | string | null
    img?: StringFieldUpdateOperationsInput | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionToolCreateManyToolInput = {
    id?: string
    professionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderProductCreateManyToolInput = {
    id?: string
    orderId: string
    professionId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BasketCreateManyToolInput = {
    id?: string
    ownerId: string
    professionId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionToolUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: ProfessionUpdateOneRequiredWithoutProfessionToolsNestedInput
  }

  export type ProfessionToolUncheckedUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionToolUncheckedUpdateManyWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderProductUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutOrderProductsNestedInput
    profession?: ProfessionUpdateOneWithoutOrderProductsNestedInput
    level?: LevelUpdateOneWithoutOrderProductLevelNestedInput
  }

  export type OrderProductUncheckedUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderProductUncheckedUpdateManyWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BasketUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutBasketNestedInput
    profession?: ProfessionUpdateOneWithoutBasketNestedInput
    level?: LevelUpdateOneWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BasketUncheckedUpdateManyWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterProfessionCreateManyMasterInput = {
    id?: string
    professionId?: string | null
    minWorkingHours?: number | null
    levelId?: string | null
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    experience: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderMasterCreateManyMasterInput = {
    id?: string
    orderId: string
  }

  export type MasterRatingsCreateManyMasterInput = {
    id?: string
    star: number
    commentId: string
  }

  export type MasterProfessionUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    experience?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: ProfessionUpdateOneWithoutMasterProfessionsNestedInput
    level?: LevelUpdateOneWithoutMasterProfessionsNestedInput
  }

  export type MasterProfessionUncheckedUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    experience?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterProfessionUncheckedUpdateManyWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    experience?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderMasterUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: OrderUpdateOneRequiredWithoutMastersNestedInput
  }

  export type OrderMasterUncheckedUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderMasterUncheckedUpdateManyWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
  }

  export type MasterRatingsUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    Comment?: CommentUpdateOneRequiredWithoutMasterRatingsNestedInput
  }

  export type MasterRatingsUncheckedUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type MasterRatingsUncheckedUpdateManyWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type MasterProfessionCreateManyLevelInput = {
    id?: string
    professionId?: string | null
    minWorkingHours?: number | null
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    experience: number
    masterId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionLevelCreateManyLevelInput = {
    id?: string
    professionId: string
    minWorkingHours: number
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderProductCreateManyLevelInput = {
    id?: string
    orderId: string
    professionId?: string | null
    toolId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BasketCreateManyLevelInput = {
    id?: string
    ownerId: string
    professionId?: string | null
    toolId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterProfessionUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    experience?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: ProfessionUpdateOneWithoutMasterProfessionsNestedInput
    master?: MasterUpdateOneWithoutMasterProfessionsNestedInput
  }

  export type MasterProfessionUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    experience?: FloatFieldUpdateOperationsInput | number
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterProfessionUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    experience?: FloatFieldUpdateOperationsInput | number
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionLevelUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: ProfessionUpdateOneRequiredWithoutProfessionLevelsNestedInput
  }

  export type ProfessionLevelUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionLevelUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderProductUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutOrderProductsNestedInput
    profession?: ProfessionUpdateOneWithoutOrderProductsNestedInput
    tool?: ToolUpdateOneWithoutOrderProductsNestedInput
  }

  export type OrderProductUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderProductUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BasketUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutBasketNestedInput
    profession?: ProfessionUpdateOneWithoutBasketNestedInput
    tool?: ToolUpdateOneWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BasketUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterProfessionCreateManyProfessionInput = {
    id?: string
    minWorkingHours?: number | null
    levelId?: string | null
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    experience: number
    masterId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionLevelCreateManyProfessionInput = {
    id?: string
    levelId: string
    minWorkingHours: number
    priceHourly: Decimal | DecimalJsLike | number | string
    priceDaily: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionToolCreateManyProfessionInput = {
    id?: string
    toolId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderProductCreateManyProfessionInput = {
    id?: string
    orderId: string
    toolId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BasketCreateManyProfessionInput = {
    id?: string
    ownerId: string
    toolId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterProfessionUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    experience?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    level?: LevelUpdateOneWithoutMasterProfessionsNestedInput
    master?: MasterUpdateOneWithoutMasterProfessionsNestedInput
  }

  export type MasterProfessionUncheckedUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    experience?: FloatFieldUpdateOperationsInput | number
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterProfessionUncheckedUpdateManyWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    experience?: FloatFieldUpdateOperationsInput | number
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionLevelUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    level?: LevelUpdateOneRequiredWithoutProfessionLevelsNestedInput
  }

  export type ProfessionLevelUncheckedUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionLevelUncheckedUpdateManyWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceDaily?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionToolUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tool?: ToolUpdateOneRequiredWithoutProfessionToolsNestedInput
  }

  export type ProfessionToolUncheckedUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionToolUncheckedUpdateManyWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderProductUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutOrderProductsNestedInput
    tool?: ToolUpdateOneWithoutOrderProductsNestedInput
    level?: LevelUpdateOneWithoutOrderProductLevelNestedInput
  }

  export type OrderProductUncheckedUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderProductUncheckedUpdateManyWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BasketUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutBasketNestedInput
    tool?: ToolUpdateOneWithoutBasketNestedInput
    level?: LevelUpdateOneWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BasketUncheckedUpdateManyWithoutProfessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderProductCreateManyOrderInput = {
    id?: string
    professionId?: string | null
    toolId?: string | null
    levelId?: string | null
    quantity?: number
    timeUnit?: $Enums.TimeUnit | null
    workingTime?: number | null
    price: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateManyOrderInput = {
    id?: string
    message: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderMasterCreateManyOrderInput = {
    id?: string
    masterid: string
  }

  export type OrderProductUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: ProfessionUpdateOneWithoutOrderProductsNestedInput
    tool?: ToolUpdateOneWithoutOrderProductsNestedInput
    level?: LevelUpdateOneWithoutOrderProductLevelNestedInput
  }

  export type OrderProductUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderProductUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionId?: NullableStringFieldUpdateOperationsInput | string | null
    toolId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null
    workingTime?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentNestedInput
    MasterRatings?: MasterRatingsUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MasterRatings?: MasterRatingsUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderMasterUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    master?: MasterUpdateOneRequiredWithoutOrdermastersNestedInput
  }

  export type OrderMasterUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    masterid?: StringFieldUpdateOperationsInput | string
  }

  export type OrderMasterUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    masterid?: StringFieldUpdateOperationsInput | string
  }

  export type MasterRatingsCreateManyCommentInput = {
    id?: string
    star: number
    masterId: string
  }

  export type MasterRatingsUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    Master?: MasterUpdateOneRequiredWithoutMasterRatingNestedInput
  }

  export type MasterRatingsUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    masterId?: StringFieldUpdateOperationsInput | string
  }

  export type MasterRatingsUncheckedUpdateManyWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    masterId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}